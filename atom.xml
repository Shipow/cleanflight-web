<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Cleanflight</title>
 <link href="http://shipow.github.io/cleanflight-web/atom.xml" rel="self"/>
 <link href="http://shipow.github.io/cleanflight-web/"/>
 <updated>2015-06-25T11:00:41+02:00</updated>
 <id>http://shipow.github.io/cleanflight-web</id>
 <author>
   <name>Kevin Granger</name>
   <email>shipowlata@gmail.com</email>
 </author>

 
 <entry>
   <title>Travis</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/travis"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/travis</id>
   <content type="html">&lt;h1&gt;Travis&lt;/h1&gt;

&lt;p&gt;Cleanflight provides Travis build and config files in the repository root. &lt;/p&gt;

&lt;h2&gt;Pushing builds to a remote server&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.travis.sh&lt;/code&gt; script can upload build artifacts to a remote server. This feature is controlled by the
&lt;code&gt;PUBLISH_URL&lt;/code&gt; environment variable. If set, the build script will use the cURL binary and simulate
a file upload post to the configured server.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Telemetry</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/telemetry"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/telemetry</id>
   <content type="html">&lt;h1&gt;Telemetry&lt;/h1&gt;

&lt;p&gt;Telemetry allows you to know what is happening on your aircraft while you are flying it.  Among other things you can receive battery voltages and GPS positions on your transmitter.&lt;/p&gt;

&lt;p&gt;Telemetry can be either always on, or enabled when armed.  If a serial port for telemetry is shared with other functionality then then telemetry will only be enabled when armed on that port.&lt;/p&gt;

&lt;p&gt;Telemetry is enabled using the &amp;lsquo;TELEMETRY` feature.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;feature TELEMETRY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Multiple telemetry providers are currently supported, FrSky, Graupner HoTT V4, SmartPort (S.Port) and MultiWii Serial Protocol (MSP)&lt;/p&gt;

&lt;p&gt;All telemetry systems use serial ports, configure serial ports to use the telemetry system required.&lt;/p&gt;

&lt;h2&gt;FrSky telemetry&lt;/h2&gt;

&lt;p&gt;FrSky telemetry is transmit only and just requires a single connection from the TX pin of a serial port to the RX pin on an FrSky telemetry receiver.&lt;/p&gt;

&lt;p&gt;FrSky telemetry signals are inverted.  To connect a cleanflight capable board to an FrSKy receiver you have some options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A hardware inverter - Built in to some flight controllers.&lt;/li&gt;
&lt;li&gt;Use software serial and enable frsky_inversion.&lt;/li&gt;
&lt;li&gt;Use a flight controller that has software configurable hardware inversion (e.g. STM32F30x).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For 1, just connect your inverter to a usart or software serial port.&lt;/p&gt;

&lt;p&gt;For 2 and 3 use the CLI command as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set telemetry_inversion = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Precision setting for VFAS&lt;/h3&gt;

&lt;p&gt;Cleanflight can send VFAS (FrSky Ampere Sensor Voltage) in two ways:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set frsky_vfas_precision  = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is default setting which supports VFAS resolution of 0.2 volts and is supported on all FrSky hardware.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set frsky_vfas_precision  = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is new setting which supports VFAS resolution of 0.1 volts and is only supported by OpenTX radios (this method uses custom ID 0x39).&lt;/p&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;RPM shows throttle output when armed.
RPM shows when disarmed.
TEMP2 shows Satellite Signal Quality when GPS is enabled.&lt;/p&gt;

&lt;p&gt;RPM requires that the &amp;#39;blades&amp;rsquo; setting is set to 12 on your receiver/display - tested with Taranis/OpenTX.&lt;/p&gt;

&lt;h2&gt;HoTT telemetry&lt;/h2&gt;

&lt;p&gt;Only Electric Air Modules and GPS Modules are emulated.&lt;/p&gt;

&lt;p&gt;Use the latest Graupner firmware for your transmitter and receiver.&lt;/p&gt;

&lt;p&gt;Older HoTT transmitters required the EAM and GPS modules to be enabled in the telemetry menu of the transmitter. (e.g. on MX-20)&lt;/p&gt;

&lt;p&gt;Serial ports use two wires but HoTT uses a single wire so some electronics are required so that the signals don&amp;rsquo;t get mixed up.  The TX and RX pins of
a serial port should be connected using a diode and a single wire to the &lt;code&gt;T&lt;/code&gt; port on a HoTT receiver.&lt;/p&gt;

&lt;p&gt;Connect as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HoTT TX/RX &lt;code&gt;T&lt;/code&gt; -&amp;gt; Serial RX (connect directly)&lt;/li&gt;
&lt;li&gt;HoTT TX/RX &lt;code&gt;T&lt;/code&gt; -&amp;gt; Diode &lt;code&gt;-(  |)-&lt;/code&gt; &amp;gt; Serial TX (connect via diode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The diode should be arranged to allow the data signals to flow the right way&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-(  |)- == Diode, | indicates cathode marker.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1N4148 diodes have been tested and work with the GR-24.&lt;/p&gt;

&lt;p&gt;As noticed by Skrebber the GR-12 (and probably GR-16/24, too) are based on a PIC 24FJ64GA-002, which has 5V tolerant digital pins.&lt;/p&gt;

&lt;p&gt;Note: The SoftSerial ports may not be 5V tolerant on your board.  Verify if you require a 5v/3.3v level shifters.&lt;/p&gt;

&lt;h2&gt;MultiWii Serial Protocol (MSP)&lt;/h2&gt;

&lt;p&gt;MSP Telemetry simply transmits MSP packets in sequence to any MSP device attached to the telemetry port.  It rotates though a fixes sequence of command responses.&lt;/p&gt;

&lt;p&gt;It is transmit only, it can work at any supported baud rate.&lt;/p&gt;

&lt;h2&gt;SmartPort (S.Port)&lt;/h2&gt;

&lt;p&gt;Smartport is a telemetry system used by newer FrSky transmitters and receivers such as the Taranis/XJR and X8R, X6R and X4R(SB).&lt;/p&gt;

&lt;p&gt;More information about the implementation can be found here: &lt;a href=&quot;https://github.com/frank26080115/cleanflight/wiki/Using-Smart-Port&quot;&gt;https://github.com/frank26080115/cleanflight/wiki/Using-Smart-Port&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In time this documentation will be updated with further details.&lt;/p&gt;

&lt;p&gt;Smartport devices can be connected directly to STM32F3 boards such as the SPRacingF3 and Sparky, with a single straight through cable without the need for any hardware modifications on the FC or the receiver.&lt;/p&gt;

&lt;p&gt;For Smartport on F3 based boards, enable the telemetry inversion setting.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set telemetry_inversion = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Spektrum Bind</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/spektrum-bind"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/spektrum-bind</id>
   <content type="html">&lt;h1&gt;Spektrum bind support&lt;/h1&gt;

&lt;p&gt;Spektrum bind with hardware bind plug support.&lt;/p&gt;

&lt;p&gt;The Spektrum bind code is actually enabled for the NAZE, NAZE32PRO, CJMCU, EUSTM32F103RC, SPARKY, CC3D, ALIENWIIF1, ALIENWIIF3 targets.&lt;/p&gt;

&lt;h2&gt;Configure the bind code&lt;/h2&gt;

&lt;p&gt;The following parameters can be used to enable and configure this in the related target.h file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SPEKTRUM_BIND          Enables the Spektrum bind code
BIND_PORT  GPIOA       Defines the port for the bind pin
BIND_PIN   Pin_3       Defines the bind pin (the satellite receiver is connected to)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is to activate the hardware bind plug feature&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HARDWARE_BIND_PLUG     Enables the hardware bind plug feature
BINDPLUG_PORT  GPIOB   Defines the port for the hardware bind plug
BINDPLUG_PIN   Pin_5   Defines the hardware bind plug pin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;The hardware bind plug will be enabled via defining HARDWARE_BIND_PLUG during building of the firmware. BINDPLUG_PORT and BINDPLUG_PIN also need to be defined (please see above). This is done automatically if the AlienWii32 firmware is built. The hardware bind plug is expected between the defined bind pin and ground. &lt;/p&gt;

&lt;h2&gt;Function&lt;/h2&gt;

&lt;p&gt;The bind code will actually work for NAZE, NAZE32PRO, CJMCU, EUSTM32F103RC, SPARKY targets (USART2) and CC3D target (USART3, flex port). The spektrum_sat_bind CLI parameter is defining the number of bind impulses (1-10) send to the satellite receiver. Setting spektrum_sat_bind to zero will disable the bind mode in any case. The bind mode will only be activated after an power on or hard reset. Please refer to the table below for the different possible values.&lt;/p&gt;

&lt;p&gt;If the hardware bind plug is configured the bind mode will only be activated if the plug is set during the firmware start-up. The value of the spektrum_sat_bind parameter will be permanently preserved. The bind plug should be always removed for normal flying.&lt;/p&gt;

&lt;p&gt;If no hardware bind plug is used the spektrum_sat_bind parameter will trigger the bind process during the next hardware reset and will be automatically reset to &amp;ldquo;0&amp;rdquo; after this.&lt;/p&gt;

&lt;p&gt;Please refer to the satellite receiver documentation for more details of the specific receiver in bind mode. Usually the bind mode will be indicated with some flashing LEDs.&lt;/p&gt;

&lt;h2&gt;Table with spektrum_sat_bind parameter value&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Receiver mode&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;DSM2 1024bit/22ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;DSM2 2048bit/11ms&lt;/td&gt;
&lt;td&gt;default AlienWii32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;DSMX 1024bit/22ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;DSMX 2048bit/11ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;More detailed information regarding the satellite binding process can be found here:
&lt;a href=&quot;http://wiki.openpilot.org/display/Doc/Spektrum+Satellite&quot;&gt;http://wiki.openpilot.org/display/Doc/Spektrum+Satellite&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Supported Hardware&lt;/h3&gt;

&lt;p&gt;NAZE, NAZE32PRO, CJMCU, SPARKY, EUSTM32F103RC, CC3D targets and ALIENWIIF1, ALIENWIIF3 targets with hardware bind plug&lt;/p&gt;

&lt;h3&gt;Connecting a Spektrum-compatible satellite to a Flip32+ flight controller&lt;/h3&gt;

&lt;p&gt;The Flip32/Flip32+ is wired in a rather strange way, i.e. the dedicated connector for the satellite module uses the same UART pins as the USB adapter. This means that you can&amp;rsquo;t use that connector as it maps to UART1 which you really shouldn&amp;rsquo;t assign to SERIAL_RX as that will break USB functionality. (Looks this problem is fixed in later versions of the Flip32/Flip32+)&lt;/p&gt;

&lt;p&gt;In order to connect the satellite to a Flip32+, you have to wire the serial data pin to RC_CH4. This is the fourth pin from the top in the left column of the 3x6 header on the right side of the board. GND and +3.3V may either be obtained from the dedicated SAT connector or from any ground pin and pin 1 of the BOOT connector which also provides 3.3V.&lt;/p&gt;

&lt;h4&gt;Tested satellite transmitter combinations&lt;/h4&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Satellite&lt;/th&gt;
&lt;th&gt;Remote&lt;/th&gt;
&lt;th&gt;Remark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Orange R100&lt;/td&gt;
&lt;td&gt;Spektrum DX6i&lt;/td&gt;
&lt;td&gt;Bind value 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lemon RX DSM2/DSMX&lt;/td&gt;
&lt;td&gt;Spektrum DX8&lt;/td&gt;
&lt;td&gt;Bind value 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lemon RX DSMX&lt;/td&gt;
&lt;td&gt;Walkera Devo10&lt;/td&gt;
&lt;td&gt;Bind value 9, Deviation firmware 4.01 up to 12 channels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lemon RX DSM2&lt;/td&gt;
&lt;td&gt;Walkera Devo7&lt;/td&gt;
&lt;td&gt;Bind value 9, Deviation firmware&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Sonar</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/sonar"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/sonar</id>
   <content type="html">&lt;h1&gt;Sonar&lt;/h1&gt;

&lt;p&gt;A sonar sensor can be used to measure altitude for use with BARO and SONAR altitude
hold modes.&lt;/p&gt;

&lt;p&gt;The sonar sensor is used instead of the pressure sensor (barometer) at low altitudes.
The sonar sensor is only used when the aircraft inclination angle (attitude) is small.&lt;/p&gt;

&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;Currently the only supported sensor is the HCSR04 sensor.&lt;/p&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;h3&gt;Naze/Flip32+&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Trigger&lt;/th&gt;
&lt;th&gt;Echo&lt;/th&gt;
&lt;th&gt;Inline 1k resistors&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Parallel PWM/ADC current sensor&lt;/td&gt;
&lt;td&gt;PB8 / Motor 5&lt;/td&gt;
&lt;td&gt;PB9 / Motor 6&lt;/td&gt;
&lt;td&gt;NO (5v tolerant)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PPM/Serial RX&lt;/td&gt;
&lt;td&gt;PB0 / RC7&lt;/td&gt;
&lt;td&gt;PB1 / RC8&lt;/td&gt;
&lt;td&gt;YES (3.3v input)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;Constraints&lt;/h4&gt;

&lt;p&gt;Current meter cannot be used in conjunction with Parallel PWM and Sonar.&lt;/p&gt;

&lt;h3&gt;Olimexino&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Trigger&lt;/th&gt;
&lt;th&gt;Echo&lt;/th&gt;
&lt;th&gt;Inline 1k resistors&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PB0 / RC7&lt;/td&gt;
&lt;td&gt;PB1 / RC8&lt;/td&gt;
&lt;td&gt;YES (3.3v input)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;Constraints&lt;/h4&gt;

&lt;p&gt;Current meter cannot be used in conjunction with Sonar.&lt;/p&gt;

&lt;h3&gt;CC3D&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Trigger&lt;/th&gt;
&lt;th&gt;Echo&lt;/th&gt;
&lt;th&gt;Inline 1k resistors&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PB5&lt;/td&gt;
&lt;td&gt;PB0&lt;/td&gt;
&lt;td&gt;YES (3.3v input)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Sonar support is not available when using the OpenPilot bootloader (OPBL).&lt;/p&gt;

&lt;h4&gt;Constraints&lt;/h4&gt;

&lt;p&gt;Sonar cannot be used in conjuction with SoftSerial or Parallel PWM.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Serial</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/serial"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/serial</id>
   <content type="html">&lt;h1&gt;Serial&lt;/h1&gt;

&lt;p&gt;Cleanflight has enhanced serial port flexibility but configuration is slightly more complex as a result.&lt;/p&gt;

&lt;p&gt;Cleanflight has the concept of a function (MSP, GPS, Serial RX, etc) and a port (VCP, UARTx, SoftSerial x).
Not all functions can be used on all ports due to hardware pin mapping, conflicting features, hardware, and software
constraints.&lt;/p&gt;

&lt;h2&gt;Serial port types&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;USB Virtual Com Port (VCP) - USB pins on a USB port connected directly to the processor without requiring
a dedicated USB to UART adapter.  VCP does not &amp;lsquo;use&amp;rsquo; a physical UART port.&lt;/li&gt;
&lt;li&gt;UART - A pair of dedicated hardware transmit and receive pins with signal detection and generation done in hardware.&lt;/li&gt;
&lt;li&gt;SoftSerial - A pair of hardware transmit and receive pins with signal detection and generation done in software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UART is the most efficient in terms of CPU usage.
SoftSerial is the least efficient and slowest, SoftSerial should only be used for low-bandwidth usages, such as telemetry transmission.&lt;/p&gt;

&lt;p&gt;UART ports are sometimes exposed via on-board USB to UART converters, such as the CP2102 as found on the Naze and Flip32 boards.
If the flight controller does not have an on-board USB to UART converter and doesn&amp;rsquo;t support VCP then an external USB to UART board is required.
These are sometimes referred to as FTDI boards.  FTDI is just a common manufacturer of a chip (the FT232RL) used on USB to UART boards.&lt;/p&gt;

&lt;p&gt;When selecting a USB to UART converter choose one that has DTR exposed as well as a selector for 3.3v and 5v since they are more useful.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.banggood.com/FT232RL-FTDI-USB-To-TTL-Serial-Converter-Adapter-Module-For-Arduino-p-917226.html&quot;&gt;FT232RL FTDI USB To TTL Serial Converter Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.banggood.com/Wholesale-USB-To-TTL-Or-COM-Converter-Module-Buildin-in-CP2102-New-p-27989.html&quot;&gt;USB To TTL / COM Converter Module buildin-in CP2102&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both SoftSerial and UART ports can be connected to your computer via USB to UART converter boards. &lt;/p&gt;

&lt;h2&gt;Serial Configuration&lt;/h2&gt;

&lt;p&gt;Serial port configuration is best done via the configurator.&lt;/p&gt;

&lt;p&gt;Configure serial ports first, then enable/disable features that use the ports.  To configure SoftSerial ports the SOFTSERIAL feature must be also be enabled. &lt;/p&gt;

&lt;h3&gt;Constraints&lt;/h3&gt;

&lt;p&gt;If the configuration is invalid the serial port configuration will reset to its defaults and features may be disabled.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There must always be a port available to use for MSP/CLI.&lt;/li&gt;
&lt;li&gt;There is a maximum of 2 MSP ports.&lt;/li&gt;
&lt;li&gt;To use a port for a function, the function&amp;rsquo;s corresponding feature must be also be enabled.
e.g. after configuring a port for GPS enable the GPS feature.&lt;/li&gt;
&lt;li&gt;If SoftSerial is used, then all SoftSerial ports must use the same baudrate.&lt;/li&gt;
&lt;li&gt;Softserial is limited to 19200 buad.&lt;/li&gt;
&lt;li&gt;All telemetry systems except MSP will ignore any attempts to override the baudrate.&lt;/li&gt;
&lt;li&gt;MSP/CLI can be shared with EITHER Blackbox OR telemetry.  In shared mode blackbox or telemetry will be output only when armed.&lt;/li&gt;
&lt;li&gt;Smartport telemetry cannot be shared with MSP.&lt;/li&gt;
&lt;li&gt;No other serial port sharing combinations are valid.&lt;/li&gt;
&lt;li&gt;You can use as many different telemetry systems as you like at the same time.&lt;/li&gt;
&lt;li&gt;You can only use each telemetry system once.  e.g.  FrSky telemetry cannot be used on two port, but MSP Telemetry + FrSky on different ports is fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Configuration via CLI&lt;/h3&gt;

&lt;p&gt;You can use the CLI for configuration but the commands are reserved for developers and advanced users.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;serial&lt;/code&gt; CLI command takes 6 arguments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identifier&lt;/li&gt;
&lt;li&gt;Function bitmask (see serialPortFunction_e in the source) &lt;/li&gt;
&lt;li&gt;MSP baud rate&lt;/li&gt;
&lt;li&gt;GPS baud rate&lt;/li&gt;
&lt;li&gt;Telemetry baud rate (auto baud allowed)&lt;/li&gt;
&lt;li&gt;Blackbox baud rate&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Baud Rates&lt;/h3&gt;

&lt;p&gt;The allowable baud rates are as follows:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;Baud rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Auto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;9600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;19200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;38400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;57600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;115200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;230400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;250000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Safety</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/safety"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/safety</id>
   <content type="html">&lt;h1&gt;Safety&lt;/h1&gt;

&lt;p&gt;As many can attest, multirotors and RC models in general can be very dangerous, particularly on the test bench. Here are some simple golden rules to save you a trip to the local ER:
* &lt;strong&gt;NEVER&lt;/strong&gt; arm your model with propellers fitted unless you intend to fly!
* &lt;strong&gt;Always&lt;/strong&gt; remove your propellers if you are setting up for the first time, flashing firmware, or if in any doubt.&lt;/p&gt;

&lt;h2&gt;Before Installing&lt;/h2&gt;

&lt;p&gt;Please consult the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/cli/&quot;&gt;Cli&lt;/a&gt;, &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/controls/&quot;&gt;Controls&lt;/a&gt;, &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/failsafe/&quot;&gt;Failsafe&lt;/a&gt; and &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/modes/&quot;&gt;Modes&lt;/a&gt; 
pages for further important information.&lt;/p&gt;

&lt;p&gt;You are highly advised to use the Receiver tab in the CleanFlight Configurator, making sure your Rx channel 
values are centered at 1500 (1520 for Futaba RC) with minimum &amp;amp; maximums of 1000 and 2000 (respectively) 
are reached when controls are operated.  Failure to configure these ranges properly can create
problems, such as inability to arm (because you can&amp;rsquo;t reach the endpoints) or immediate activation of
&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/failsafe/&quot;&gt;failsafe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may have to adjust your channel endpoints and trims/sub-trims on your RC transmitter to achieve the 
expected range of 1000 to 2000.&lt;/p&gt;

&lt;p&gt;The referenced values for each channel have marked impact on the operation of the flight controller and the 
different flight modes.&lt;/p&gt;

&lt;h2&gt;Props Spinning When Armed&lt;/h2&gt;

&lt;p&gt;With the default configuration, when the controller is armed, the propellers &lt;em&gt;WILL&lt;/em&gt; begin spinning at low speed.
We recommend keeping this setting as it provides a good visual indication the craft is armed.&lt;/p&gt;

&lt;p&gt;If you wish to change this behavior, see the MOTOR_STOP feature in the Configurator and relevant docuemntation pages.
Enabling this feature will stop the props from spinning when armed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rx</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/rx"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/rx</id>
   <content type="html">&lt;h1&gt;Receivers (RX)&lt;/h1&gt;

&lt;p&gt;A receiver is used to receive radio control signals from your transmitter and convert them into signals that the flight controller can understand.&lt;/p&gt;

&lt;p&gt;There are 3 basic types of receivers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parallel PWM Receivers&lt;/li&gt;
&lt;li&gt;PPM Receivers&lt;/li&gt;
&lt;li&gt;Serial Receivers&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Parallel PWM Receivers&lt;/h2&gt;

&lt;p&gt;8 channel support, 1 channel per input pin.  On some platforms using parallel input will disable the use of serial ports
and SoftSerial making it hard to use telemetry or GPS features.&lt;/p&gt;

&lt;h2&gt;PPM Receivers&lt;/h2&gt;

&lt;p&gt;PPM is sometimes known as PPM SUM or CPPM.&lt;/p&gt;

&lt;p&gt;12 channels via a single input pin, not as accurate or jitter free as methods that use serial communications, but readily available.&lt;/p&gt;

&lt;p&gt;These receivers are reported working:&lt;/p&gt;

&lt;p&gt;FrSky D4R-II
&lt;a href=&quot;http://www.frsky-rc.com/product/pro.php?pro_id=24&quot;&gt;http://www.frsky-rc.com/product/pro.php?pro_id=24&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graupner GR24
&lt;a href=&quot;http://www.graupner.de/en/products/33512/product.aspx&quot;&gt;http://www.graupner.de/en/products/33512/product.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;R615X Spektrum/JR DSM2/DSMX Compatible 6Ch 2.4GHz Receiver w/CPPM
&lt;a href=&quot;http://orangerx.com/2014/05/20/r615x-spektrumjr-dsm2dsmx-compatible-6ch-2-4ghz-receiver-wcppm-2/&quot;&gt;http://orangerx.com/2014/05/20/r615x-spektrumjr-dsm2dsmx-compatible-6ch-2-4ghz-receiver-wcppm-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FrSky D8R-XP 8ch telemetry receiver, or CPPM and RSSI enabled receiver
&lt;a href=&quot;http://www.frsky-rc.com/product/pro.php?pro_id=21&quot;&gt;http://www.frsky-rc.com/product/pro.php?pro_id=21&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Serial Receivers&lt;/h2&gt;

&lt;h3&gt;Spektrum&lt;/h3&gt;

&lt;p&gt;8 channels via serial currently supported.&lt;/p&gt;

&lt;p&gt;These receivers are reported working:&lt;/p&gt;

&lt;p&gt;Lemon Rx DSMX Compatible PPM 8-Channel Receiver + Lemon DSMX Compatible Satellite with Failsafe
&lt;a href=&quot;http://www.lemon-rx.com/shop/index.php?route=product/product&amp;amp;product_id=118&quot;&gt;http://www.lemon-rx.com/shop/index.php?route=product/product&amp;amp;product_id=118&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;S.BUS&lt;/h3&gt;

&lt;p&gt;16 channels via serial currently supported.  See below how to set up your transmitter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You probably need an inverter between the receiver output and the flight controller. However, some flight controllers have this built in (the main port on CC3D, for example), and doesn&amp;rsquo;t need one.&lt;/li&gt;
&lt;li&gt;Softserial ports cannot be used with SBUS because it runs at too high of a bitrate (1Mbps).  Refer to the chapter specific to your board to determine which port(s) may be used.&lt;/li&gt;
&lt;li&gt;You will need to configure the channel mapping in the GUI (Receiver tab) or CLI (&lt;code&gt;map&lt;/code&gt; command). Note that channels above 8 are mapped &amp;ldquo;straight&amp;rdquo;, with no remapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These receivers are reported working:&lt;/p&gt;

&lt;p&gt;FrSky X4RSB 3/16ch Telemetry Receiver
&lt;a href=&quot;http://www.frsky-rc.com/product/pro.php?pro_id=135&quot;&gt;http://www.frsky-rc.com/product/pro.php?pro_id=135&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FrSky X8R 8/16ch Telemetry Receiver
&lt;a href=&quot;http://www.frsky-rc.com/product/pro.php?pro_id=105&quot;&gt;http://www.frsky-rc.com/product/pro.php?pro_id=105&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Futaba R2008SB 2.4GHz S-FHSS
&lt;a href=&quot;http://www.futaba-rc.com/systems/futk8100-8j/&quot;&gt;http://www.futaba-rc.com/systems/futk8100-8j/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;OpenTX S.BUS configuration&lt;/h4&gt;

&lt;p&gt;If using OpenTX set the transmitter module to D16 mode and ALSO select CH1-16 on the transmitter before binding to allow reception
of all 16 channels. &lt;/p&gt;

&lt;p&gt;OpenTX 2.09, which is shipped on some Taranis X9D Plus transmitters, has a bug - &lt;a href=&quot;https://github.com/opentx/opentx/issues/1701&quot;&gt;issue:1701&lt;/a&gt;.
The bug prevents use of all 16 channels.  Upgrade to the latest OpenTX version to allow correct reception of all 16 channels,
without the fix you are limited to 8 channels regardless of the CH1-16/D16 settings.&lt;/p&gt;

&lt;h3&gt;XBUS&lt;/h3&gt;

&lt;p&gt;The firmware currently supports the MODE B version of the XBus protocol.
Make sure to set your TX to use &amp;ldquo;MODE B&amp;rdquo; for XBUS in the TX menus!
See here for info on JR&amp;rsquo;s XBUS protocol: &lt;a href=&quot;http://www.jrpropo.com/english/propo/XBus/&quot;&gt;http://www.jrpropo.com/english/propo/XBus/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These receivers are reported working:&lt;/p&gt;

&lt;p&gt;XG14 14ch DMSS System w/RG731BX XBus Receiver
&lt;a href=&quot;http://www.jramericas.com/233794/JRP00631/&quot;&gt;http://www.jramericas.com/233794/JRP00631/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There exist a remote receiver made for small BNF-models like the Align T-Rex 150 helicopter. The code also supports using the Align DMSS RJ01 receiver directly with the cleanflight software.
To use this receiver you must power it with 3V from the hardware, and then connect the serial line as other serial RX receivers.
In order for this receiver to work, you need to specify the XBUS_MODE_B_RJ01 for serialrx_provider. Note that you need to set your radio mode for XBUS &amp;ldquo;MODE B&amp;rdquo; also for this receiver to work.
Receiver name: Align DMSS RJ01 (HER15001)&lt;/p&gt;

&lt;h3&gt;SUMD&lt;/h3&gt;

&lt;p&gt;16 channels via serial currently supported.&lt;/p&gt;

&lt;p&gt;These receivers are reported working:&lt;/p&gt;

&lt;p&gt;GR-24 receiver HoTT
&lt;a href=&quot;http://www.graupner.de/en/products/33512/product.aspx&quot;&gt;http://www.graupner.de/en/products/33512/product.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graupner receiver GR-12SH+ HoTT
&lt;a href=&quot;http://www.graupner.de/en/products/870ade17-ace8-427f-943b-657040579906/33565/product.aspx&quot;&gt;http://www.graupner.de/en/products/870ade17-ace8-427f-943b-657040579906/33565/product.aspx&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;SUMH&lt;/h3&gt;

&lt;p&gt;8 channels via serial currently supported.&lt;/p&gt;

&lt;p&gt;SUMH is a legacy Graupner protocol.  Graupner have issued a firmware updates for many recivers that lets them use SUMD instead.&lt;/p&gt;

&lt;h2&gt;MultiWii serial protocol (MSP)&lt;/h2&gt;

&lt;p&gt;Allows you to use MSP commands as the RC input.  Only 8 channel support to maintain compatibility with MSP.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;There are 3 features that control receiver mode:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;RX_PPM
RX_SERIAL
RX_PARALLEL_PWM
RX_MSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only one receiver feature can be enabled at a time.&lt;/p&gt;

&lt;h3&gt;Serial RX&lt;/h3&gt;

&lt;p&gt;See the Serial chapter for some some RX configuration examples.&lt;/p&gt;

&lt;p&gt;To setup spectrum on the Naze32 or clones in the GUI:
1. Start on the &amp;ldquo;Ports&amp;rdquo; tab make sure that UART2 has serial RX.  If not set the checkbox, save and reboot.
2. Move to the &amp;ldquo;Configuration&amp;rdquo; page and in the upper lefthand corner choose Serial RX as the receiver type.
3. Below that choose the type of serial receiver that you are using.  Save and reboot.&lt;/p&gt;

&lt;p&gt;Using CLI:
For Serial RX enable &lt;code&gt;RX_SERIAL&lt;/code&gt; and set the &lt;code&gt;serialrx_provider&lt;/code&gt; CLI setting as follows.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Serial RX Provider&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SPEKTRUM1024&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SPEKTRUM2048&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SBUS&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUMD&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUMH&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XBUS_MODE_B&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XBUS_MODE_B_RJ01&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;PPM/PWM input filtering.&lt;/h3&gt;

&lt;p&gt;Hardware input filtering can be enabled if you are experiencing interference on the signal sent via your PWM/PPM RX.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;input_filtering_mode&lt;/code&gt; CLI setting to select a mode.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Disabled&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Enabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Rssi</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/rssi"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/rssi</id>
   <content type="html">&lt;h1&gt;RSSI&lt;/h1&gt;

&lt;p&gt;RSSI is a measurement of signal strength and is very handy so you know when your aircraft isw going out of range or if it is suffering RF interference.&lt;/p&gt;

&lt;p&gt;Some receivers have RSSI outputs.  3 types are supported.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;RSSI via PPM channel&lt;/li&gt;
&lt;li&gt;RSSI via Parallel PWM channel&lt;/li&gt;
&lt;li&gt;RSSI via ADC with PPM RC that has an RSSI output - aka RSSI ADC&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;RSSI via PPM&lt;/h2&gt;

&lt;p&gt;Configure your receiver to output RSSI on a spare channel, then select the channel used via the CLI.&lt;/p&gt;

&lt;p&gt;e.g. if you used channel 9 then you would set:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set rssi_channel = 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Some systems such as EZUHF invert the RSSI ( 0 = Full signal / 100 = Lost signal). To correct this problem you can invert the channel input so you will get a correct reading by using command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set rssi_ppm_invert = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Default is set to &amp;ldquo;0&amp;rdquo; for normal operation ( 100 = Full signal / 0 = Lost signal).&lt;/p&gt;

&lt;h2&gt;RSSI via Parallel PWM channel&lt;/h2&gt;

&lt;p&gt;Connect the RSSI signal to any PWM input channel then set the RSSI channel as you would for RSSI via PPM&lt;/p&gt;

&lt;h2&gt;RSSI ADC&lt;/h2&gt;

&lt;p&gt;Connect the RSSI signal to the RC2/CH2 input. The signal must be between 0v and 3.3v.
Use inline resistors to lower voltage if required; inline smoothing capacitors may also help.
A simple PPM-&amp;gt;RSSI conditioner can easily be made. See the  PPM-RSSI conditioning.pdf  for details.&lt;/p&gt;

&lt;p&gt;Under CLI :
- enable using the RSSI_ADC feature  :  &lt;code&gt;feature RSSI_ADC&lt;/code&gt;
- set the RSSI_SCALE parameter (between 1 and 255) to adjust RSSI level according to your configuration.&lt;/p&gt;

&lt;p&gt;FrSky D4R-II and X8R supported.&lt;/p&gt;

&lt;p&gt;The feature can not be used when RX_PARALLEL_PWM is enabled.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Profiles</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/profiles"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/profiles</id>
   <content type="html">&lt;h1&gt;Profiles&lt;/h1&gt;

&lt;p&gt;A profile is a set of configuration settings.&lt;/p&gt;

&lt;p&gt;Currently three profiles are supported. The default profile is profile &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Changing profiles&lt;/h2&gt;

&lt;p&gt;Profiles can be selected using a GUI or the following stick combinations:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Profile&lt;/th&gt;
&lt;th&gt;Throttle&lt;/th&gt;
&lt;th&gt;Yaw&lt;/th&gt;
&lt;th&gt;Pitch&lt;/th&gt;
&lt;th&gt;Roll&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;td&gt;Middle&lt;/td&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;Middle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;td&gt;Middle&lt;/td&gt;
&lt;td&gt;Right&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The CLI &lt;code&gt;profile&lt;/code&gt; command can also be used:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;profile &amp;lt;index&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Rate Profiles&lt;/h1&gt;

&lt;p&gt;Cleanflight supports rate profiles in addition to regular profiles.&lt;/p&gt;

&lt;p&gt;Rate profiles contain settings that adjust how your craft behaves based on control input.&lt;/p&gt;

&lt;p&gt;Three rate profiles are supported.&lt;/p&gt;

&lt;p&gt;Rate profiles can be selected while flying using the inflight adjustments feature.&lt;/p&gt;

&lt;p&gt;Each normal profile has a setting called &amp;lsquo;default_rate_profile`.  When a profile is activated the
corresponding rate profile is also activated. &lt;/p&gt;

&lt;p&gt;Profile 0 has a default rate profile of 0.
Profile 1 has a default rate profile of 1.
Profile 2 has a default rate profile of 2.&lt;/p&gt;

&lt;p&gt;The defaults are set this way so that it&amp;rsquo;s simple to configure a profile and a rate profile at the same.&lt;/p&gt;

&lt;p&gt;The current rate profile can be shown or set using the CLI &lt;code&gt;rateprofile&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rateprofile &amp;lt;index&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The values contained within a rate profile can be seen by using the CLI &lt;code&gt;dump rates&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;e.g
&amp;ldquo;`&lt;/p&gt;

&lt;h1&gt;dump rates&lt;/h1&gt;

&lt;h1&gt;rateprofile&lt;/h1&gt;

&lt;p&gt;rateprofile 0&lt;/p&gt;

&lt;p&gt;set rc_rate = 90
set rc_expo = 65
set thr_mid = 50
set thr_expo = 0
set roll_pitch_rate = 0
set yaw_rate = 0
set tpa_rate = 0
set tpa_breakpoint = 1500
&amp;rdquo;`&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pid Tuning</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/pid-tuning"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/pid-tuning</id>
   <content type="html">&lt;h1&gt;PID tuning&lt;/h1&gt;

&lt;p&gt;Every aspect of flight dynamics is controlled by the selected &amp;ldquo;PID controller&amp;rdquo;. This is an algorithm which is
responsible for reacting to your stick inputs and keeping the craft stable in the air by using the gyroscopes and/or
accelerometers (depending on your flight mode).&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;PIDs&amp;rdquo; are a set of tuning parameters which control the operation of the PID controller. The optimal PID settings
to use are different on every craft, so if you can&amp;rsquo;t find someone with your exact setup who will share their settings
with you, some trial and error is required to find the best performing PID settings.&lt;/p&gt;

&lt;p&gt;A video on how to recognise and correct different flight problems caused by PID settings is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YNzqTGEl2xQ&quot;&gt;https://www.youtube.com/watch?v=YNzqTGEl2xQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, the goal of the PID controller is to bring the craft&amp;rsquo;s rotation rate in all three axes to the rate that
you&amp;rsquo;re commanding with your sticks. An error is computed which is the difference between your target rotation rate and
the actual one measured by the gyroscopes, and the controller tries to bring this error to zero.&lt;/p&gt;

&lt;h2&gt;PIDs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The P term&lt;/strong&gt; controls the strength of the correction that is applied to bring the craft toward the target angle or
rotation rate. If the P term is too low, the craft will be difficult to control as it won&amp;rsquo;t respond quickly enough to
keep itself stable. If it is set too high, the craft will rapidly oscillate/shake as it continually overshoots its
target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The I term&lt;/strong&gt; corrects small, long term errors. If it is set too low, the craft&amp;rsquo;s attitude will slowly drift. If it is
set too high, the craft will oscillate (but with slower oscillations than with P being set too high).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The D term&lt;/strong&gt; attempts to increase system stability by monitoring the rate of change in the error. If the error is rapidly converging to zero, the D term causes the strength of the correction to be backed off in order to avoid overshooting the target.&lt;/p&gt;

&lt;h2&gt;TPA and TPA Breakpoint&lt;/h2&gt;

&lt;p&gt;TPA stands for Throttle PID Attenuation and according to &lt;a href=&quot;http://blog.alexyorke.net/what-is-tpa/&quot;&gt;AlexYork.net&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;TPA basically allows an aggressively tuned multi-rotor (one that feels very locked in) to reduce its PID gains when throttle is applied beyond the TPA threshold/breakpoint in order to eliminate fast oscillations..&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that TPA is set via CLI or on the PID TUNING tab of the GUI.  tpa_breakpoint is set via CLI&lt;/p&gt;

&lt;p&gt;Also note that TPA and tpa_breakpoint may not be used in certain PID Controllers.  Check the description on the individual controller.&lt;/p&gt;

&lt;p&gt;TPA applies a PID value reduction in relation to full Throttle. It is used to apply dampening of PID values as full throttle is reached.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TPA&lt;/strong&gt; = % of dampening that will occur at full throttle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tpa_breakpoint&lt;/strong&gt; = the point in the throttle curve at which TPA will begin to be applied.&lt;/p&gt;

&lt;p&gt;An Example: With TPA = 50 (or .5 in the GUI) and tpa_breakpoint = 1500 (assumed throttle range 1000 - 2000)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At 1500 on the throttle channel, the PIDs will begin to be dampened.&lt;/li&gt;
&lt;li&gt;At &amp;frac34; throttle (1750), PIDs are reduced by approximately 25% (half way between 1500 and 2000 the dampening will be 50% of the total TPA value of 50% in this example)&lt;/li&gt;
&lt;li&gt;At full throttle (2000) the full amount of dampening set in TPA is applied. (50% reduction in this example)&lt;/li&gt;
&lt;li&gt;TPA can lead into increase of rotation rate when more throttle applied. You can get faster flips and rolls when more throttle applied due to coupling of PID&amp;rsquo;s and rates. Only PID controllers 1 and 2 are using linear TPA implementation, where no rotation rates are affected when TPA is being used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1668170/6053290/655255dc-ac92-11e4-9491-1a58d868c131.png&quot; alt=&quot;tpa example chart&quot; title=&quot;TPA Example Chart&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How and Why to use this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are getting oscillations starting at say &amp;frac34; throttle, set tpa breakpoint = 1750 or lower (remember, this is assuming your throttle range is 1000-2000), and then slowly increase TPA until your oscillations are gone. Usually, you will want tpa breakpoint to start a little sooner then when your oscillations start so you&amp;rsquo;ll want to experiment with the values to reduce/remove the oscillations.&lt;/p&gt;

&lt;h2&gt;PID controllers&lt;/h2&gt;

&lt;p&gt;Cleanflight has 6 built-in PID controllers which each have different flight behavior. Each controller requires
different PID settings for best performance, so if you tune your craft using one PID controller, those settings will
likely not work well on any of the other controllers.&lt;/p&gt;

&lt;p&gt;You can change between PID controllers by running &lt;code&gt;set pid_controller=n&lt;/code&gt; on the CLI tab of the Cleanflight
Configurator, where &lt;code&gt;n&lt;/code&gt; is the number of the controller you want to use. Please read these notes first before trying one
out.&lt;/p&gt;

&lt;h3&gt;PID controller 0, &amp;ldquo;MultiWii&amp;rdquo; (default)&lt;/h3&gt;

&lt;p&gt;PID Controller 0 is the default controller in Cleanflight, and Cleanflight&amp;rsquo;s default PID settings are tuned to be
middle-of-the-road settings for this controller. It originates from the old MultiWii PID controller from MultiWii 2.2
and earlier.&lt;/p&gt;

&lt;p&gt;One of the quirks with this controller is that if you increase the P value for an axis, the maximum rotation rates for
that axis are lowered. Hence you need to crank up the pitch or roll rates if you have higher and higher P values.&lt;/p&gt;

&lt;p&gt;In Horizon and Angle modes, this controller uses both the LEVEL &amp;ldquo;P&amp;rdquo; and &amp;ldquo;I&amp;rdquo; settings in order to tune the 
auto-leveling corrections in a similar way to the way that P and I settings are applied to roll and yaw axes in the acro
flight modes. The LEVEL &amp;ldquo;D&amp;rdquo; term is used as a limiter to constrain the maximum correction applied by the LEVEL &amp;ldquo;P&amp;rdquo; term.&lt;/p&gt;

&lt;h3&gt;PID controller 1, &amp;ldquo;Rewrite&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;PID Controller 1 is a newer PID controller that is derived from the one in MultiWii 2.3 and later. It works better from
all accounts, and fixes some inherent problems in the way the old one worked. From reports, tuning is apparently easier
on controller 1, and it tolerates a wider range of PID values well.&lt;/p&gt;

&lt;p&gt;Unlike controller 0, controller 1 allows the user to manipulate PID values to tune reaction and stability without
affecting yaw, roll or pitch rotation rates (which are tuned by the dedicated roll &amp;amp; pitch and yaw rate
settings).&lt;/p&gt;

&lt;p&gt;In Angle mode, this controller uses the LEVEL &amp;ldquo;P&amp;rdquo; PID setting to decide how strong the auto-level correction should
be. Note that the default value for P_Level is 90.  This is more than likely too high of a value for most, and will cause the model to be very unstable in Angle Mode, and could result in loss of control.  It is recommended to change this value to 20 before using PID Controller 1 in Angle Mode.&lt;/p&gt;

&lt;p&gt;In Horizon mode, this controller uses the LEVEL &amp;ldquo;I&amp;rdquo; PID setting to decide how much auto-level correction should be applied. Level &amp;ldquo;I&amp;rdquo; term: Strength of horizon auto-level. value of 0.030 in the configurator equals to 3.0 for Level P. Level &amp;ldquo;D&amp;rdquo; term: Strength of horizon transition. 0 is more stick travel on level and 255 is more rate mode what means very narrow angle of leveling.&lt;/p&gt;

&lt;h3&gt;PID controller 2, &amp;ldquo;LuxFloat&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;PID Controller 2 is Lux&amp;rsquo;s new floating point PID controller. Both controller 0 and 1 use integer arithmetic, which was
faster in the days of the slower 8-bit MultiWii controllers, but is less precise.&lt;/p&gt;

&lt;p&gt;This controller has code that attempts to compensate for variations in the looptime, which should mean that the PIDs
don&amp;rsquo;t have to be retuned when the looptime setting changes. &lt;/p&gt;

&lt;p&gt;There were initially some problems with horizon mode, and sluggishness in acro mode, that were recently fixed by
nebbian in v1.6.0. The autotune feature does not work on this controller, so don&amp;rsquo;t try to autotune it.&lt;/p&gt;

&lt;p&gt;It is the first PID Controller designed for 32-bit processors and not derived from MultiWii.&lt;/p&gt;

&lt;p&gt;The strength of the auto-leveling correction applied during Angle mode is set by the parameter &amp;ldquo;level_angle&amp;rdquo; which
is labeled &amp;ldquo;LEVEL Proportional&amp;rdquo; in the GUI. This can be used to tune the auto-leveling strength in Angle mode compared to
Horizon mode. The default is 5.0.&lt;/p&gt;

&lt;p&gt;The strength of the auto-leveling correction applied during Horizon mode is set by the parameter &amp;ldquo;level_horizon&amp;rdquo; which
is labeled &amp;ldquo;LEVEL Integral&amp;rdquo; in the GUI. The default is 3.0, which makes the Horizon mode apply weaker self-leveling than
the Angle mode. Note: There is currently a bug in the Configurator which shows this parameter divided by 100 (so it
shows as 0.03 rather than 3.0).&lt;/p&gt;

&lt;p&gt;The transition between self-leveling and acro behavior in Horizon mode is controlled by the &amp;ldquo;sensitivity_horizon&amp;rdquo;
parameter which is labeled &amp;ldquo;LEVEL Derivative&amp;rdquo; in the Cleanflight Configurator GUI. This sets the percentage of your
stick travel that should have self-leveling applied to it, so smaller values cause more of the stick area to fly using
only the gyros. The default is 75% &lt;/p&gt;

&lt;p&gt;For example, at a setting of &amp;ldquo;100&amp;rdquo; for &amp;ldquo;sensitivity_horizon&amp;rdquo;, 100% self-leveling strength will be applied at center
stick, 50% self-leveling will be applied at 50% stick, and no self-leveling will be applied at 100% stick. If
sensitivity is decreased to 75, 100% self-leveling will be applied at center stick, 50% will be applied at 63%
stick, and no self-leveling will be applied at 75% stick and onwards.&lt;/p&gt;

&lt;h3&gt;PID controller 3, &amp;ldquo;MultiWii23&amp;rdquo; (default for the ALIENWIIF1 and ALIENWIIF3 targets)&lt;/h3&gt;

&lt;p&gt;PID Controller 3 is an direct port of the PID controller from MultiWii 2.3 and later.&lt;/p&gt;

&lt;p&gt;The algorithm is handling roll and pitch differently to yaw. Users with problems on yaw authority should try this one.&lt;/p&gt;

&lt;p&gt;For the ALIENWII32 targets the gyroscale is removed for even more yaw authority. This will provide best performance on very small multicopters with brushed motors.&lt;/p&gt;

&lt;h3&gt;PID controller 4, &amp;ldquo;MultiWiiHybrid&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;PID Controller 4 is an hybrid version of two MultiWii PID controllers. Roll and pitch is using the MultiWii 2.2 algorithm and yaw is using the 2.3 algorithm. &lt;/p&gt;

&lt;p&gt;This PID controller was initialy implemented for testing purposes but is also performing quite well.&lt;/p&gt;

&lt;p&gt;For the ALIENWII32 targets the gyroscale is removed for more yaw authority. This will provide best performance on very small multicopters with brushed motors.&lt;/p&gt;

&lt;h3&gt;PID controller 5, &amp;ldquo;Harakiri&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;PID Controller 5 is an port of the PID controller from the Harakiri firmware.&lt;/p&gt;

&lt;p&gt;The algorithm is leveraging more floating point math. This PID controller also compensates for different looptimes on roll and pitch. It likely don&amp;rsquo;t need retuning of the PID values when looptime is changing. Actually there are two settings hardcoded which are configurable via the GUI in Harakiri:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    OLD_YAW 0 // [0/1] 0 = multiwii 2.3 yaw, 1 = older yaw.
    MAIN_CUT_HZ 12.0f // (default 12Hz, Range 1-50Hz)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The PID controller is flight tested and running well with the default PID settings. If you want do acrobatics start slowly.&lt;/p&gt;

&lt;p&gt;Yaw authority is also quite good.&lt;/p&gt;

&lt;h2&gt;RC rate, Pitch and Roll Rates (P/R rate before they were separated), and Yaw rate&lt;/h2&gt;

&lt;h3&gt;RC Rate&lt;/h3&gt;

&lt;p&gt;An overall multiplier on the RC stick inputs for pitch, rol;, and yaw. &lt;/p&gt;

&lt;p&gt;On PID Controllers 0, and 3-5 can be used to set the &amp;ldquo;feel&amp;rdquo; around center stick for small control movements. (RC Expo also affects this).For PID Controllers 1 and 2, this basically sets the baseline stick sensitivity&lt;/p&gt;

&lt;h3&gt;Pitch and Roll rates&lt;/h3&gt;

&lt;p&gt;In PID Controllers 0 and 3-5, the affect of the PID error terms for P and D are gradually lessened as the control sticks are moved away from center, ie 0.3 rate gives a 30% reduction of those terms at full throw, effectively making the stabilizing effect of the PID controller less at stick extremes. This results in faster rotation rates. So for these controllers, you can set center stick sensitivity to control movement with RC rate above, and yet have much faster rotation rates at stick extremes.&lt;/p&gt;

&lt;p&gt;For PID Controllers 1 and 2, this is an multiplier on overall stick sensitivity, like RC rate, but for roll and pitch independently. Stablility (to outside factors like turbulence) is not reduced at stick extremes. A zero value is no increase in stick sensitivity over that set by RC rate above. Higher values increases stick sensitivity across the entire stick movement range.&lt;/p&gt;

&lt;h3&gt;Yaw Rate&lt;/h3&gt;

&lt;p&gt;In PID Controllers 0 and 5, it acts as a PID reduction as explained above. In PID Controllers 1-4, it acts as a stick sensitivity multiplier, as explained above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pid Internals</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/pid-internals"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/pid-internals</id>
   <content type="html">&lt;h3&gt;IO variables&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gyroADC/8192*2000 = deg/s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gyroADC/4 ~ deg/s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rcCommand&lt;/code&gt; - &lt;code&gt;&amp;lt;-500 - 500&amp;gt;&lt;/code&gt; nominal, but is scaled with &lt;code&gt;rcRate/100&lt;/code&gt;, max +-1250&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inclination&lt;/code&gt; - in 0.1 degree, roll and pitch deviation from horizontal position
&lt;code&gt;max_angle_inclination&lt;/code&gt; - in 0.1 degree, default 50 degrees (500)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;axisPID&lt;/code&gt; - output to mixer, will be added to throttle(&lt;code&gt;&amp;lt;1000-2000&amp;gt;&lt;/code&gt;), output range is &lt;code&gt;&amp;lt;minthrottle, maxthrottle&amp;gt;&lt;/code&gt; (default &lt;code&gt;&amp;lt;1150 - 1850&amp;gt;&lt;/code&gt;)&lt;/p&gt;

&lt;h3&gt;PID controller 0, &amp;ldquo;MultiWii&amp;rdquo; (default)&lt;/h3&gt;

&lt;h4&gt;Leveling term&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;error = constrain(2*rcCommand[axis], limit +- max_angle_inclination) - inclination[axis]
Pacc = constrain(P8[PIDLEVEL]/100 * error, limit +- 5 * D8[PIDLEVEL])
Iacc = intergrate(error, limit +-10000) * I8[PIDLEVEL] / 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Gyro term&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Pgyro = rcCommand[axis];
error = rcCommand[axis] * 10 * 8 / pidProfile-&amp;gt;P8[axis] - gyroADC[axis] / 4; (conversion so that error is in deg/s ?)
Igyro = integrate(error, limit +-16000) / 10 / 8  * I8[axis] / 100 (conversion back to mixer units ?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reset I term if
  - axis rotation rate &amp;gt; +-64deg/s
  - axis is YAW and rcCommand&amp;gt;+-100&lt;/p&gt;

&lt;h5&gt;Mode dependent mix(yaw is always from gyro)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;HORIZON - proportionally according to max deflection
&lt;code&gt;
deflection = MAX(ABS(rcCommand[PITCH]), ABS(rcCommand[ROLL])) / 500 ; limit to 0.0 .. 1.0
P = Pacc * (1-deflection) + Pgyro * deflection
I = Iacc * (1-deflection) + Igyro * deflection
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;gyro
&lt;code&gt;
P = Pgyro
I = Igyro
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ANGLE
&lt;code&gt;
P = Pacc
I = Iacc
&lt;/code&gt;
#### Gyro stabilization&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;P -=  gyroADC[axis] / 4 * dynP8 / 10 / 8
D = -mean(diff(gyroADC[axis] / 4), over 3 samples) * 3 * dynD8 / 32
[equivalent to :]
D = - (gyroADC[axis]/4 - (&amp;lt;3 loops old&amp;gt;gyroADC[axis]/4)) * dynD8 / 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be seen as sum of
 - PI controller (handles rcCommand, HORIZON/ANGLE); &lt;code&gt;Igyro&lt;/code&gt; is only output based on gyroADC
 - PD controller(parameters dynP8/dynD8) with zero setpoint acting on gyroADC&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Oneshot</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/oneshot"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/oneshot</id>
   <content type="html">&lt;h1&gt;Oneshot&lt;/h1&gt;

&lt;p&gt;Oneshot allows faster communication between the Flight Controller and the ESCs that are present on your multirotor.&lt;/p&gt;

&lt;p&gt;It does this in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a signal that varies between 125 µs and 250 µs (instead of the normal PWM timing of 1000µs to 2000µs)&lt;/li&gt;
&lt;li&gt;Only send a &amp;lsquo;shot&amp;rsquo; once per flight controller loop, and do this as soon as the flight controller has calculated the required speed of the motors.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Supported ESCs&lt;/h2&gt;

&lt;p&gt;FlyDuino KISS ESCs are able to use the Oneshot125 protocol out of the box. There is only one soldering needed.
BLHeli rev13.0 also supports Oneshot125 and will be automatically selected by the ESC without additional work.&lt;/p&gt;

&lt;h2&gt;Supported Boards&lt;/h2&gt;

&lt;p&gt;The Naze boards are supported, and have been flight tested in a number of configurations.&lt;/p&gt;

&lt;p&gt;CC3D boards have been tested with a PPM receiver, however parallel PWM receivers might not work properly with this board.&lt;/p&gt;

&lt;h2&gt;Enabling Oneshot&lt;/h2&gt;

&lt;p&gt;To configure Oneshot, you must turn off any power to your ESCs.  &lt;/p&gt;

&lt;p&gt;It is a good idea at this stage to configure your ESC for oneshot mode (by soldering JP1 in the case of the KISS ESC).&lt;/p&gt;

&lt;p&gt;Connect a USB cable to your board, and connect using the Chrome GUI app.&lt;/p&gt;

&lt;p&gt;Go to the CLI tab, and type the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;feature ONESHOT125
save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can safely power up your ESCs again.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The process for calibrating oneshot ESCs is the same as any other ESC.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that your ESCs are not powered up.&lt;/li&gt;
&lt;li&gt;Connect to the board using a USB cable, and change to the motor test page.&lt;/li&gt;
&lt;li&gt;Set the motor speed to maximum using the main slider.&lt;/li&gt;
&lt;li&gt;Connect power to your ESCs.  They will beep.&lt;/li&gt;
&lt;li&gt;Click on the slider to bring the motor speed down to zero.  The ESCs will beep again, usually a couple of times.&lt;/li&gt;
&lt;li&gt;Disconnect the power from your ESCs.&lt;/li&gt;
&lt;li&gt;Re-connect power to your ESCs, and verify that moving the motor slider makes your motors spin up normally.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;FlyDuino (&lt;a href=&quot;http://flyduino.net/&quot;&gt;&lt;a href=&quot;http://flyduino.net/&quot;&gt;http://flyduino.net/&lt;/a&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Msp_extensions</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/api/msp_extensions"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/api/msp_extensions</id>
   <content type="html">&lt;h1&gt;MSP Extensions&lt;/h1&gt;

&lt;p&gt;Cleanflight includes a number of extensions to the MultiWii Serial Protocol (MSP). This document describes 
those extensions in order that 3rd party tools may identify cleanflight firmware and react appropriately.&lt;/p&gt;

&lt;p&gt;Issue the MSP_API_VERSION command to find out if the firmware supports them.&lt;/p&gt;

&lt;h2&gt;Mode Ranges&lt;/h2&gt;

&lt;h3&gt;MSP_MODE_RANGES&lt;/h3&gt;

&lt;p&gt;The MSP_MODE_RANGES returns the current auxiliary mode settings from the flight controller. It should be invoked
before any modification is made to the configuration.&lt;/p&gt;

&lt;p&gt;The message returns a group of 4 unsigned bytes for each &amp;lsquo;slot&amp;rsquo; available in the flight controller. The number of
slots should be calculated from the size of the returned message.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Msg Id&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MSP_MODE_RANGES&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;to FC&lt;/td&gt;
&lt;td&gt;Following this command, the FC returns a block of 4 bytes for each auxiliary mode &amp;#39;slot&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;permanentId&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See Modes.md for a definition of the permanent ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux switch number (indexed from 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeStartStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The start value for this element in &amp;#39;blocks&amp;rsquo; of 25  where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeEndStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The end value for this element in &amp;#39;blocks&amp;rsquo; of 25 where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Thus, for a cleanflight firmware with 40 slots 160 bytes would be returned in response to MSP_MODE_RANGES,&lt;/p&gt;

&lt;h3&gt;MSP_SET_MODE_RANGE&lt;/h3&gt;

&lt;p&gt;The MSP_SET_MODE_RANGE is used to inform the flight controller of
auxiliary mode settings. The client &lt;em&gt;must&lt;/em&gt; return all auxiliary
elements, including those that have been disabled or are undefined, by
sending this message for all auxiliary slots.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Msg Id&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MSP_SET_MODE_RANGE&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;to FC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sequence id&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;A monotonically increasing ID, from 0 to the number of slots -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permanentId&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See Modes.md for a definition of the permanent ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux channel number (indexed from 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeStartStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The start value for this element in &amp;#39;blocks&amp;rsquo; of 25  where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeEndStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The end value for this element in &amp;#39;blocks&amp;rsquo; of 25 where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;Implementation Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The client should make no assumptions about the number of slots available. Rather, the number should be computed 
from the size of the MSP_MODE_RANGES message divided by the size of the returned data element (4 bytes);&lt;/li&gt;
&lt;li&gt;The client should ensure that all changed items are returned to the flight controller, including those where a
switch or range has been disabled;&lt;/li&gt;
&lt;li&gt;A &amp;#39;null&amp;rsquo; return, with all values other than the sequence id set to 0, must be made for all unused slots, up to
the maximum number of slots calculated from the initial message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Adjustment Ranges&lt;/h2&gt;

&lt;h3&gt;MSP_ADJUSTMENT_RANGES&lt;/h3&gt;

&lt;p&gt;The MSP_ADJUSTMENT_RANGES returns the current adjustment range settings from
the flight controller. It should be invoked before any modification is
made to the configuration.&lt;/p&gt;

&lt;p&gt;The message returns a group of 6 unsigned bytes for each &amp;#39;slot&amp;rsquo;
available in the flight controller. The number of slots should be
calculated from the size of the returned message.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Msg Id&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MSP_ADJUSTMENT_RANGES&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;to FC&lt;/td&gt;
&lt;td&gt;Following this command, the FC returns a block of 6 bytes for each adjustment range &amp;#39;slot&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;adjustmentStateIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux channel number (indexed from 0) used to activate the adjustment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeStartStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The start value for this element in &amp;#39;blocks&amp;rsquo; of 25  where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeEndStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The end value for this element in &amp;#39;blocks&amp;rsquo; of 25 where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adjustmentFunction&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxSwitchChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux channel number used to perform the function (indexed from 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Thus, for a cleanflight firmware with 12 slots 72 bytes would be returned in response to MSP_ADJUSTMENT_RANGES,&lt;/p&gt;

&lt;h3&gt;MSP_SET_ADJUSTMENT_RANGE&lt;/h3&gt;

&lt;p&gt;The MSP_SET_ADJUSTMENT_RANGE is used to inform the flight controller of
adjustment range settings. The client &lt;em&gt;must&lt;/em&gt; return all adjustment range
elements, including those that have been disabled or are undefined, by
sending this message for all adjustment range slots.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Msg Id&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MSP_SET_ADJUSTMENT_RANGE&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;to FC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sequence id&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;A monotonically increasing ID, from 0 to the number of slots -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adjustmentStateIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux channel number (indexed from 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeStartStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The start value for this element in &amp;#39;blocks&amp;rsquo; of 25  where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rangeEndStep&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The end value for this element in &amp;#39;blocks&amp;rsquo; of 25 where 0 == 900 and 48 == 2100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adjustmentFunction&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auxSwitchChannelIndex&lt;/td&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;The Aux channel number used to perform the function (indexed from 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;AdjustmentIndex&lt;/h4&gt;

&lt;p&gt;The FC maintains internal state for each adjustmentStateIndex, currently 4 simultaneous adjustment states are maintained.  Multiple adjustment ranges
can be configured to use the same state but care should be taken not to send multiple adjustment ranges that when active would confict.&lt;/p&gt;

&lt;p&gt;e.g.  Configuring two identical adjustment ranges using the same slot would conflict, but configuring two adjustment ranges that used 
only one half of the possible channel range each but used the same adjustmentStateIndex would not conflict.&lt;/p&gt;

&lt;p&gt;The FC does NOT check for conflicts.&lt;/p&gt;

&lt;h4&gt;AdjustmentFunction&lt;/h4&gt;

&lt;p&gt;There are many adjustments that can be made, the numbers of them and their use is found in the documentation of the cli &lt;code&gt;adjrange&lt;/code&gt; command in the &amp;#39;Inflight Adjustents&amp;rsquo; section.&lt;/p&gt;

&lt;h3&gt;Implementation Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The client should make no assumptions about the number of slots available. Rather, the number should be computed 
from the size of the MSP_ADJUSTMENT_RANGES message divided by the size of the returned data element (6 bytes);&lt;/li&gt;
&lt;li&gt;The client should ensure that all changed items are returned to the flight controller, including those where a
switch or range has been disabled;&lt;/li&gt;
&lt;li&gt;A &amp;#39;null&amp;rsquo; return, with all values except for the sequence id set to 0, must be made for all unused slots,
up to the maximum number of slots calculated from the initial message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Deprecated MSP&lt;/h2&gt;

&lt;p&gt;The following MSP commands are replaced by the MSP_MODE_RANGES and
MSP_SET_MODE_RANGE extensions, and are not recognised by
cleanflight.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MSP_BOX&lt;/li&gt;
&lt;li&gt;MSP_SET_BOX&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;See also&lt;/h2&gt;

&lt;p&gt;Modes.md describes the user visible implementation for the cleanflight
modes extension.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Modes</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/modes"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/modes</id>
   <content type="html">&lt;h1&gt;Modes&lt;/h1&gt;

&lt;p&gt;Cleanflight has various modes that can be toggled on or off.  Modes can be enabled/disabled by stick positions,
auxillary receiver channels and other events such as failsafe detection.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MSP ID&lt;/th&gt;
&lt;th&gt;CLI ID&lt;/th&gt;
&lt;th&gt;Short Name&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ARM&lt;/td&gt;
&lt;td&gt;Enables motors and flight stabilisation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;ANGLE&lt;/td&gt;
&lt;td&gt;Legacy auto-level flight mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;HORIZON&lt;/td&gt;
&lt;td&gt;Auto-level flight mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;BARO&lt;/td&gt;
&lt;td&gt;Altitude hold mode (Requires barometer sensor)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;MAG&lt;/td&gt;
&lt;td&gt;Heading lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;HEADFREE&lt;/td&gt;
&lt;td&gt;Head Free - When enabled yaw has no effect on pitch/roll inputs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;HEADADJ&lt;/td&gt;
&lt;td&gt;Heading Adjust - Sets a new yaw origin for HEADFREE mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;CAMSTAB&lt;/td&gt;
&lt;td&gt;Camera Stabilisation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;CAMTRIG&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;GPSHOME&lt;/td&gt;
&lt;td&gt;Autonomous flight to HOME position&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;GPSHOLD&lt;/td&gt;
&lt;td&gt;Maintain the same longitude/lattitude&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;PASSTHRU&lt;/td&gt;
&lt;td&gt;Pass roll, yaw, and pitch directly from rx to servos in airplane mix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;BEEPERON&lt;/td&gt;
&lt;td&gt;Enable beeping - useful for locating a crashed aircraft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;LEDMAX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;LEDLOW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;LLIGHTS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;CALIB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;GOV&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;OSD&lt;/td&gt;
&lt;td&gt;Enable/Disable On-Screen-Display (OSD)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;TELEMETRY&lt;/td&gt;
&lt;td&gt;Enable telemetry via switch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;AUTOTUNE&lt;/td&gt;
&lt;td&gt;Autotune Pitch/Roll PIDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;SONAR&lt;/td&gt;
&lt;td&gt;Altitude hold mode (sonar sensor only)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Mode details&lt;/h2&gt;

&lt;h3&gt;Headfree&lt;/h3&gt;

&lt;p&gt;In this mode, the &amp;ldquo;head&amp;rdquo; of the multicopter is always pointing to the same direction as when the feature was activated. This means that when the multicopter rotates around the Z axis (yaw), the controls will always respond according the same &amp;ldquo;head&amp;rdquo; direction.&lt;/p&gt;

&lt;p&gt;With this mode it is easier to control the multicopter, even fly it with the physical head towards you since the controls always respond the same. This is a friendly mode to new users of multicopters and can prevent losing the control when you don&amp;rsquo;t know the head direction. &lt;/p&gt;

&lt;h3&gt;GPS Return To Home&lt;/h3&gt;

&lt;p&gt;WORK-IN-PROGRESS.  This mode is not reliable yet, please share your experiences with the developers.&lt;/p&gt;

&lt;p&gt;In this mode the aircraft attempts to return to the GPS position recorded when the aircraft was armed.&lt;/p&gt;

&lt;p&gt;This mode should be enabled in conjunction with Angle or Horizon modes and an Altitude hold mode.&lt;/p&gt;

&lt;p&gt;Requires a 3D GPS fix and minimum of 5 satellites in view.&lt;/p&gt;

&lt;h3&gt;GPS Position Hold&lt;/h3&gt;

&lt;p&gt;WORK-IN-PROGRESS.  This mode is not reliable yet, please share your experiences with the developers.&lt;/p&gt;

&lt;p&gt;In this mode the aircraft attempts to stay at the same GPS position, as recorded when the mode is enabled.&lt;/p&gt;

&lt;p&gt;Disabling and re-enabling the mode will reset the GPS hold position.&lt;/p&gt;

&lt;p&gt;This mode should be enabled in conjunction with Angle or Horizon modes and an Altitude hold mode.&lt;/p&gt;

&lt;p&gt;Requires a 3D GPS fix and minimum of 5 satellites in view.&lt;/p&gt;

&lt;h2&gt;Auxillary Configuration&lt;/h2&gt;

&lt;p&gt;Spare auxillary receiver channels can be used to enable/disable modes.  Some modes can only be enabled this way.&lt;/p&gt;

&lt;p&gt;Configure your transmitter so that switches or dials (potentiometers) send channel data on channels 5 and upwards (the first 4 channels are usually occupied by the throttle, aileron, rudder, and elevator channels).&lt;/p&gt;

&lt;p&gt;&lt;u&gt;e.g. You can configure a 3 position switch to send 1000 when the switch is low, 1500 when the switch is in the middle and 2000 when the switch is high.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Configure your tx/rx channel limits to use values between 1000 and 2000.  The range used by mode ranges is fixed to 900 to 2100.&lt;/p&gt;

&lt;p&gt;When a channel is within a specifed range the corresponding mode is enabled.&lt;/p&gt;

&lt;p&gt;Use the GUI configuration tool to allow easy configuration when channel.&lt;/p&gt;

&lt;h3&gt;CLI&lt;/h3&gt;

&lt;p&gt;There is a CLI command, &lt;code&gt;aux&lt;/code&gt; that allows auxillary configuration.  It takes 5 arguments as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AUD range slot number (0 - 39)&lt;/li&gt;
&lt;li&gt;mode id (see mode list above)&lt;/li&gt;
&lt;li&gt;AUX channel index (AUX1 = 0, AUX2 = 1,&amp;hellip; etc)&lt;/li&gt;
&lt;li&gt;low position, from 900 to 2100. Should be a multiple of 25.&lt;/li&gt;
&lt;li&gt;high position, from 900 to 2100. Should be a multiple of 25.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the low and high position are the same then the values are ignored.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;p&gt;Configure AUX range slot 0 to enable ARM when AUX1 is withing 1700 and 2100.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aux 0 0 0 1700 2100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can display the AUX configuration by using the &lt;code&gt;aux&lt;/code&gt; command with no arguments.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mixer</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/mixer"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/mixer</id>
   <content type="html">&lt;h1&gt;Mixer&lt;/h1&gt;

&lt;p&gt;Cleanflight supports a number of mixing configurations as well as custom mixing.  Mixer configurations determine how the servos and motors work together to control the aircraft.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;To use a built-in mixing configuration, you can use the Chrome configuration GUI.  It includes images of the various mixer types to assist in making the proper connections.  See the Configuration section of the documentation for more information on the GUI.&lt;/p&gt;

&lt;p&gt;You can also use the Command Line Interface (CLI) to set the mixer type:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;mixer list&lt;/code&gt; to see a list of supported mixes&lt;/li&gt;
&lt;li&gt;Select a mixer.  For example, to select TRI, use &lt;code&gt;mixer TRI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You must use &lt;code&gt;save&lt;/code&gt; to preserve your changes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Supported Mixer Types&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Motors&lt;/th&gt;
&lt;th&gt;Servos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TRI&lt;/td&gt;
&lt;td&gt;Tricopter&lt;/td&gt;
&lt;td&gt;M1-M3&lt;/td&gt;
&lt;td&gt;S1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QUADP&lt;/td&gt;
&lt;td&gt;Quadcopter-Plus&lt;/td&gt;
&lt;td&gt;M1-M4&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QUADX&lt;/td&gt;
&lt;td&gt;Quadcopter-X&lt;/td&gt;
&lt;td&gt;M1-M4&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BI&lt;/td&gt;
&lt;td&gt;Bicopter (left/right)&lt;/td&gt;
&lt;td&gt;M1-M2&lt;/td&gt;
&lt;td&gt;S1, S2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GIMBAL&lt;/td&gt;
&lt;td&gt;Gimbal control&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;S1, S2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y6&lt;/td&gt;
&lt;td&gt;Y6-copter&lt;/td&gt;
&lt;td&gt;M1-M6&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEX6&lt;/td&gt;
&lt;td&gt;Hexacopter-Plus&lt;/td&gt;
&lt;td&gt;M1-M6&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FLYING_WING&lt;/td&gt;
&lt;td&gt;Fixed wing; elevons&lt;/td&gt;
&lt;td&gt;M1&lt;/td&gt;
&lt;td&gt;S1, S2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y4&lt;/td&gt;
&lt;td&gt;Y4-copter&lt;/td&gt;
&lt;td&gt;M1-M4&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEX6X&lt;/td&gt;
&lt;td&gt;Hexacopter-X&lt;/td&gt;
&lt;td&gt;M1-M6&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OCTOX8&lt;/td&gt;
&lt;td&gt;Octocopter-X (over/under)&lt;/td&gt;
&lt;td&gt;M1-M8&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OCTOFLATP&lt;/td&gt;
&lt;td&gt;Octocopter-FlatPlus&lt;/td&gt;
&lt;td&gt;M1-M8&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OCTOFLATX&lt;/td&gt;
&lt;td&gt;Octocopter-FlatX&lt;/td&gt;
&lt;td&gt;M1-M8&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AIRPLANE&lt;/td&gt;
&lt;td&gt;Fixed wing; Ax2, R, E&lt;/td&gt;
&lt;td&gt;M1&lt;/td&gt;
&lt;td&gt;S1, S2, S3, S4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HELI_120_CCPM&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HELI_90_DEG&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VTAIL4&lt;/td&gt;
&lt;td&gt;Quadcopter with V-Tail&lt;/td&gt;
&lt;td&gt;M1-M4&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEX6H&lt;/td&gt;
&lt;td&gt;Hexacopter-H&lt;/td&gt;
&lt;td&gt;M1-M6&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PPM_TO_SERVO&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DUALCOPTER&lt;/td&gt;
&lt;td&gt;Dualcopter&lt;/td&gt;
&lt;td&gt;M1-M2&lt;/td&gt;
&lt;td&gt;S1, S2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINGLECOPTER&lt;/td&gt;
&lt;td&gt;Conventional helicopter&lt;/td&gt;
&lt;td&gt;M1&lt;/td&gt;
&lt;td&gt;S1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATAIL4&lt;/td&gt;
&lt;td&gt;Quadcopter with A-Tail&lt;/td&gt;
&lt;td&gt;M1-M4&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CUSTOM&lt;/td&gt;
&lt;td&gt;User-defined&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Servo filtering&lt;/h2&gt;

&lt;p&gt;A low-pass filter can be enabled for the servos.  It may be useful for avoiding structural modes in the airframe, for example.  &lt;/p&gt;

&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Currently it can only be configured via the CLI:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;set servo_lowpass_freq = nnn&lt;/code&gt; to select the cutoff frequency.  Valid values range from 10 to 400.  This is a fraction of the loop frequency in 1/1000ths. For example, &lt;code&gt;40&lt;/code&gt; means &lt;code&gt;0.040&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;set servo_lowpass_enable = 1&lt;/code&gt; to enable filtering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The cutoff frequency can be determined by the following formula:
&lt;code&gt;Frequency = 1000 * servo_lowpass_freq / looptime&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, if &lt;code&gt;servo_lowpass_freq&lt;/code&gt; is set to 40, and looptime is set to the default of 3500 us, the cutoff frequency will be 11.43 Hz.&lt;/p&gt;

&lt;h3&gt;Tuning&lt;/h3&gt;

&lt;p&gt;One method for tuning the filter cutoff is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure your vehicle can move at least somewhat freely in the troublesome axis.  For example, if you are having yaw oscillations on a tricopter, ensure that the copter is supported in a way that allows it to rotate left and right to at least some degree.  Suspension near the CG is ideal.  Alternatively, you can just fly the vehicle and trigger the problematic condition you are trying to eliminate, although tuning will be more tedious.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tap the vehicle at its end in the axis under evaluation.  Directly commanding the servo in question to move may also be used.  In the tricopter example, tap the end of the tail boom from the side, or command a yaw using your transmitter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your vehicle oscillates for several seconds or even continues oscillating indefinitely, then the filter cutoff frequency should be reduced. Reduce the value of &lt;code&gt;servo_lowpass_freq&lt;/code&gt; by half its current value and repeat the previous step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the oscillations are dampened within roughly a second or are no longer present, then you are done.  Be sure to run &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Custom Motor Mixing&lt;/h2&gt;

&lt;p&gt;Custom motor mixing allows for completely customized motor configurations. Each motor must be defined with a custom mixing table for that motor. The mix must reflect how close each motor is with reference to the CG (Center of Gravity) of the flight controller. A motor closer to the CG of the flight controller will need to travel less distance than a motor further away.  &lt;/p&gt;

&lt;p&gt;Steps to configure custom mixer in the CLI:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;mixer custom&lt;/code&gt; to enable the custom mixing.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix reset&lt;/code&gt; to erase the any existing custom mixing. &lt;/li&gt;
&lt;li&gt;Issue a cmix statement for each motor. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The cmix statement has the following syntax: &lt;code&gt;cmix n THROTTLE ROLL PITCH YAW&lt;/code&gt; &lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mixing table parameter&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Motor ordering number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;THROTTLE&lt;/td&gt;
&lt;td&gt;All motors that are used in this configuration are set to 1.0. Unused set to 0.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ROLL&lt;/td&gt;
&lt;td&gt;Indicates how much roll authority this motor imparts to the roll of the flight controller. Accepts values nominally from 1.0 to -1.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PITCH&lt;/td&gt;
&lt;td&gt;Indicates the pitch authority this motor has over the flight controller. Also accepts values nominally from 1.0 to -1.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YAW&lt;/td&gt;
&lt;td&gt;Indicates the direction of the motor rotation in relationship with the flight controller. 1.0 = CCW -1.0 = CW.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;Example 1: A KK2.0 wired motor setup&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a X configuration quad, but the motors are still wired using the KK board motor numbering scheme. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;KK2.0 Motor Layout

  1CW      2CCW
     \    /
       KK
     /    \
  4CCW     3CW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;mixer custom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix reset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix 1 1.0,  1.0, -1.0, -1.0&lt;/code&gt; for the Front Left motor. It tells the flight controller the #1 motor is used, provides positive roll, provides negative pitch and is turning CW.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix 2 1.0, -1.0, -1.0,  1.0&lt;/code&gt; for the Front Right motor. It still provides a negative pitch authority, but unlike the front left, it provides negative roll authority and turns CCW.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix 3 1.0, -1.0,  1.0, -1.0&lt;/code&gt; for the Rear Right motor. It has negative roll, provides positive pitch when the speed is increased and turns CW.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cmix 4 1.0,  1.0,  1.0,  1.0&lt;/code&gt; for the Rear Left motor. Increasing motor speed imparts positive roll, positive pitch and turns CCW.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Example 2: A HEX-U Copter&lt;/h3&gt;

&lt;p&gt;Here is an example of a U-shaped hex; probably good for herding giraffes in the Sahara. Because the 1 and 6 motors are closer to the roll axis, they impart much more force than the motors mounted twice as far from the FC CG. The effect they have on pitch is the same as the forward motors because they are the same distance from the FC CG. The 2 and 5 motors do not contribute anything to pitch because speeding them up and slowing them down has no effect on the forward/back pitch of the FC. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HEX6-U

.4........3. 
............
.5...FC...2. 
............
...6....1...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Roll&lt;/th&gt;
&lt;th&gt;Pitch&lt;/th&gt;
&lt;th&gt;Yaw&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 1 1.0, -0.5,  1.0, -1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;half negative&lt;/td&gt;
&lt;td&gt;full positive&lt;/td&gt;
&lt;td&gt;CW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 2 1.0, -1.0,  0.0,  1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full negative&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;CCW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 3 1.0, -1.0, -1.0, -1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full negative&lt;/td&gt;
&lt;td&gt;full negative&lt;/td&gt;
&lt;td&gt;CW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 4 1.0,  1.0, -1.0,  1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full positive&lt;/td&gt;
&lt;td&gt;full negative&lt;/td&gt;
&lt;td&gt;CCW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 5 1.0,  1.0,  0.0, -1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full positive&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;CW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use &lt;code&gt;cmix 6 1.0,  0.5,  1.0,  1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;half positive&lt;/td&gt;
&lt;td&gt;full positive&lt;/td&gt;
&lt;td&gt;CCW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrating From Baseflight</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/migrating-from-baseflight"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/migrating-from-baseflight</id>
   <content type="html">&lt;h1&gt;Migrating from baseflight&lt;/h1&gt;

&lt;h2&gt;Procedure&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;First ensure your main flight battery is disconnected or your props are off!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before flashing with cleanflight, dump your configs for each profile via the CLI and save to a text file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;profile 0
dump
profile 1
dump
profile 2
dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then after flashing cleanflight paste the output from each dump command into the cli, switching profiles as you go.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll note that some commands are not recognised by cleanflight when you do this.  For the commands that are not recognised look
up the new configuration options and choose appropriate values for the settings.  See below for a list of differences.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve done this for the first profile, save the config.  Then verify your config is OK, e.g. features serial ports, etc.
When you&amp;rsquo;ve verified the first profile is OK repeat for the other profiles.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also advisable to take screenshots of your AUX settings from baseflight configurator and then after re-applying the settings
verify your aux config is correct - aux settings are not backwards compatible.&lt;/p&gt;

&lt;h2&gt;CLI command differences from baseflight&lt;/h2&gt;

&lt;p&gt;In general all CLI commands use underscore characters to separate words for consistency.  In baseflight the format of CLI commands is somewhat haphazard.&lt;/p&gt;

&lt;h3&gt;gps_baudrate&lt;/h3&gt;

&lt;p&gt;reason: unified baud rate configuration&lt;/p&gt;

&lt;p&gt;If an unsupported baud rate value is used the gps code will select 115200 baud.&lt;/p&gt;

&lt;p&gt;see &lt;code&gt;serial_port_x_gps_baudrate&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;gps_type&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;gps_provider&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;serialrx_type&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;serialrx_provider&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;rssi_aux_channel&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;rssi_channel&lt;/code&gt; for improved functionality&lt;/p&gt;

&lt;p&gt;Cleanflight supports using any RX channel for rssi.  Baseflight only supports AUX1 to 4.&lt;/p&gt;

&lt;p&gt;In Cleanflight a value of 0 disables the feature, a higher value indicates the channel number to read RSSI information from.&lt;/p&gt;

&lt;p&gt;Example: to use RSSI on AUX1 in Cleanflight use &lt;code&gt;set rssi_channel = 5&lt;/code&gt;, since 5 is the first AUX channel (this is equivalent to &lt;code&gt;set rssi_aux_channel = 1&lt;/code&gt; in Baseflight).&lt;/p&gt;

&lt;h3&gt;failsafe_detect_threshold&lt;/h3&gt;

&lt;p&gt;reason: improved functionality&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;rx_min_usec&lt;/code&gt; and &lt;code&gt;rx_max_usec&lt;/code&gt; in Failsafe documentation.&lt;/p&gt;

&lt;h3&gt;emfavoidance&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;emf_avoidance&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;yawrate&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;yaw_rate&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;yawdeadband&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;yaw_deadband&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;midrc&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;mid_rc&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;mincheck&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;min_check&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;maxcheck&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;max_check&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;minthrottle&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;min_throttle&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;maxthrottle&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;max_throttle&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;mincommand&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;min_command&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;deadband3d_low&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;3d_deadband_low&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;deadband3d_high&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;3d_deadband_high&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;deadband3d_throttle&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;3d_deadband_throttle&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;neutral3d&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;3d_neutral&lt;/code&gt; for consistency&lt;/p&gt;

&lt;h3&gt;alt_hold_throttle_neutral&lt;/h3&gt;

&lt;p&gt;reason: renamed to &lt;code&gt;alt_hold_deadband&lt;/code&gt; for consistency&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ledstrip</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/ledstrip"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/ledstrip</id>
   <content type="html">&lt;h1&gt;LED Strip&lt;/h1&gt;

&lt;p&gt;Cleanflight supports the use of addressable LED strips.  Addressable LED strips allow each LED in the strip to
be programmed with a unique and independant color.  This is far more advanced than the normal RGB strips which
require that all the LEDs in the strip show the same color.&lt;/p&gt;

&lt;p&gt;Addressable LED strips can be used to show information from the flight controller system, the current implementation
supports the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Up to 32 LEDs.&lt;/li&gt;
&lt;li&gt;Indicators showing pitch/roll stick positions.&lt;/li&gt;
&lt;li&gt;Heading/Orientation lights.&lt;/li&gt;
&lt;li&gt;Flight mode specific color schemes.&lt;/li&gt;
&lt;li&gt;Low battery warning.&lt;/li&gt;
&lt;li&gt;AUX operated on/off switch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function and orientation configuration is fixed for now but later it should be able to be set via the UI or CLI..&lt;/p&gt;

&lt;p&gt;In the future, if someone codes it, they could be used to show GPS navigation status, thrust levels, RSSI, etc.
Lots of scope for ideas and improvements.&lt;/p&gt;

&lt;p&gt;Likewise, support for more than 32 LEDs is possible, it just requires additional development.&lt;/p&gt;

&lt;h2&gt;Supported hardware&lt;/h2&gt;

&lt;p&gt;Only strips of 32 WS2811/WS2812 LEDs are supported currently.  If the strip is longer than 32 LEDs it does not matter,
but only the first 32 are used.&lt;/p&gt;

&lt;p&gt;WS2812 LEDs require an 800khz signal and precise timings and thus requires the use of a dedicated hardware timer.&lt;/p&gt;

&lt;p&gt;Note: Not all WS2812 ICs use the same timings, some batches use different timings.  &lt;/p&gt;

&lt;p&gt;It could be possible to be able to specify the timings required via CLI if users request it.&lt;/p&gt;

&lt;h3&gt;Tested Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/2226&quot;&gt;Adafruit NeoPixel Jewel 7&lt;/a&gt; (preliminary testing)

&lt;ul&gt;
&lt;li&gt;Measured current consumption in all white mode ~ 350 mA.&lt;/li&gt;
&lt;li&gt;Fits well under motors on mini 250 quads.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/1426&quot;&gt;Adafruit NeoPixel Stick&lt;/a&gt; (works well)

&lt;ul&gt;
&lt;li&gt;Measured current consumption in all white mode ~ 350 mA.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;p&gt;WS2812 LED strips generally require a single data line, 5V and GND.&lt;/p&gt;

&lt;p&gt;WS2812 LEDs on full brightness can consume quite a bit of current.  It is recommended to verify the current draw and ensure your
supply can cope with the load.  On a multirotor that uses multiple BEC ESC&amp;rsquo;s you can try use a different BEC to the one the FC
uses.  e.g. ESC1/BEC1 -&amp;gt; FC, ESC2/BEC2 -&amp;gt; LED strip.   It&amp;rsquo;s also possible to power one half of the strip from one BEC and the other half
from another BEC.  Just ensure that the GROUND is the same for all BEC outputs and LEDs.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Target&lt;/th&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;LED Strip&lt;/th&gt;
&lt;th&gt;Signal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Naze/Olimexino&lt;/td&gt;
&lt;td&gt;RC5&lt;/td&gt;
&lt;td&gt;Data In&lt;/td&gt;
&lt;td&gt;PA6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CC3D&lt;/td&gt;
&lt;td&gt;RCO5&lt;/td&gt;
&lt;td&gt;Data In&lt;/td&gt;
&lt;td&gt;PB4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ChebuzzF3/F3Discovery&lt;/td&gt;
&lt;td&gt;PB8&lt;/td&gt;
&lt;td&gt;Data In&lt;/td&gt;
&lt;td&gt;PB8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sparky&lt;/td&gt;
&lt;td&gt;PWM5&lt;/td&gt;
&lt;td&gt;Data In&lt;/td&gt;
&lt;td&gt;PA6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Since RC5 is also used for SoftSerial on the Naze/Olimexino it means that you cannot use SoftSerial and led strips at the same time.
Additionally, since RC5 is also used for Parallel PWM RC input on both the Naze, Chebuzz and STM32F3Discovery targets, led strips
can not be used at the same time at Parallel PWM.&lt;/p&gt;

&lt;p&gt;If you have LEDs that are intermittent, flicker or show the wrong colors then drop the VIN to less than 4.7v, e.g. by using an inline
diode on the VIN to the LED strip. The problem occurs because of the difference in voltage between the data signal and the power
signal.  The WS2811 LED&amp;rsquo;s require the data signal (Din) to be between 0.3 * Vin (Max) and 0.7 * VIN (Min) to register valid logic
low/high signals.  The LED pin on the CPU will always be between 0v to ~3.3v, so the Vin should be 4.7v (3.3v / 0.7 = 4.71v).
Some LEDs are more tolerant of this than others.&lt;/p&gt;

&lt;p&gt;The datasheet can be found here: &lt;a href=&quot;http://www.adafruit.com/datasheets/WS2812.pdf&quot;&gt;http://www.adafruit.com/datasheets/WS2812.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The led strip feature can be configured via the GUI&lt;/p&gt;

&lt;p&gt;GUI:
Enable the Led Strip feature via the GUI under setup.&lt;/p&gt;

&lt;p&gt;Configure the leds from the Led Strip tab in the cleanflight GUI.
First setup how the led&amp;rsquo;s are laid out so that you can visualize it later as you configure and so the flight controller knows how many led&amp;rsquo;s there are available.&lt;/p&gt;

&lt;p&gt;There is a step by step guide on how to use the GUI to configure the Led Strip feature using the GUI &lt;a href=&quot;http://blog.oscarliang.net/setup-rgb-led-cleanflight/&quot;&gt;http://blog.oscarliang.net/setup-rgb-led-cleanflight/&lt;/a&gt; which was published early 2015 by Oscar Liang which may or may not be up-to-date by the time you read this.&lt;/p&gt;

&lt;p&gt;CLI:
Enable the &lt;code&gt;LED_STRIP&lt;/code&gt; feature via the cli:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;feature LED_STRIP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you enable LED_STRIP feature and the feature is turned off again after a reboot then check your config does not conflict with other features, as above.&lt;/p&gt;

&lt;p&gt;Configure the LEDs using the &lt;code&gt;led&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;led&lt;/code&gt; command takes either zero or two arguments - an zero-based led number and a sequence which indicates pair of coordinates, direction flags and mode flags and a color.&lt;/p&gt;

&lt;p&gt;If used with zero arguments it prints out the led configuration which can be copied for future reference.&lt;/p&gt;

&lt;p&gt;Each led is configured using the following template: &lt;code&gt;x,y:ddd:mmm:cc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are grid coordinates of a 0 based 16x16 grid, north west is 0,0, south east is 15,15
&lt;code&gt;ddd&lt;/code&gt; specifies the directions, since an led can face in any direction it can have multiple directions.  Directions are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt; - North
 &lt;code&gt;E&lt;/code&gt; - East
 &lt;code&gt;S&lt;/code&gt; - South
 &lt;code&gt;W&lt;/code&gt; - West
 &lt;code&gt;U&lt;/code&gt; - Up
 &lt;code&gt;D&lt;/code&gt; - Down&lt;/p&gt;

&lt;p&gt;For instance, an LED that faces South-east at a 45 degree downwards angle could be configured as &lt;code&gt;SED&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: It is perfectly possible to configure an LED to have all directions &lt;code&gt;NESWUD&lt;/code&gt; but probably doesn&amp;rsquo;t make sense.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mmm&lt;/code&gt; specifies the modes that should be applied an LED.  Modes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt; - &lt;code&gt;W&lt;/code&gt;warnings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; - &lt;code&gt;F&lt;/code&gt;light mode &amp;amp; Orientation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; - &lt;code&gt;I&lt;/code&gt;ndicator.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt;rmed state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; - &lt;code&gt;T&lt;/code&gt;hrust state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; - &lt;code&gt;R&lt;/code&gt;ing thrust state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; - &lt;code&gt;C&lt;/code&gt;olor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cc&lt;/code&gt; specifies the color number (0 based index).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;led 0 0,15:SD:IAW:0
led 1 15,0:ND:IAW:0
led 2 0,0:ND:IAW:0
led 3 0,15:SD:IAW:0
led 4 7,7::C:1
led 5 8,8::C:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To erase an led, and to mark the end of the chain, use &lt;code&gt;0,0::&lt;/code&gt; as the second argument, like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;led 4 0,0:::
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is best to erase all LEDs that you do not have connected.&lt;/p&gt;

&lt;h3&gt;Modes&lt;/h3&gt;

&lt;h4&gt;Warning&lt;/h4&gt;

&lt;p&gt;This mode simply uses the LEDs to flash when warnings occur.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Warning&lt;/th&gt;
&lt;th&gt;LED Pattern&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Arm-lock enabled&lt;/td&gt;
&lt;td&gt;flash between green and off&lt;/td&gt;
&lt;td&gt;occurs calibration or when unarmed and the aircraft is tilted too much&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low Battery&lt;/td&gt;
&lt;td&gt;flash red and off&lt;/td&gt;
&lt;td&gt;battery monitoring must be enabled.  May trigger temporarily under high-throttle due to voltage drop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failsafe&lt;/td&gt;
&lt;td&gt;flash between light blue and yellow&lt;/td&gt;
&lt;td&gt;Failsafe must be enabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Flash patterns appear in order, so that it&amp;rsquo;s clear which warnings are enabled.&lt;/p&gt;

&lt;h4&gt;Flight Mode &amp;amp; Orientation&lt;/h4&gt;

&lt;p&gt;This mode shows the flight mode and orientation.&lt;/p&gt;

&lt;p&gt;When flight modes are active then the LEDs are updated to show different colors depending on the mode, placement on the grid and direction.&lt;/p&gt;

&lt;p&gt;LEDs are set in a specific order:
 * LEDs that marked as facing up or down.
 * LEDs that marked as facing west or east AND are on the west or east side of the grid.
 * LEDs that marked as facing north or south AND are on the north or south side of the grid.&lt;/p&gt;

&lt;p&gt;That is, south facing LEDs have priority.&lt;/p&gt;

&lt;p&gt;The mapping between modes led placement and colors is currently fixed and cannot be changed.&lt;/p&gt;

&lt;h4&gt;Indicator&lt;/h4&gt;

&lt;p&gt;This mode flashes LEDs that correspond to roll and pitch stick positions.  i.e.  they indicate the direction the craft is going to turn.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;LED Color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;WHITE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;RED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;LIME GREEN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head Free&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;YELLOW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizon&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;CYAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;YELLOW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angle&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;MINT GREEN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mag&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;North&lt;/td&gt;
&lt;td&gt;LIGHT BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;East&lt;/td&gt;
&lt;td&gt;DARK VIOLET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;South&lt;/td&gt;
&lt;td&gt;RED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;DEEP PINK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;BLUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baro&lt;/td&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;ORANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;Armed state&lt;/h4&gt;

&lt;p&gt;This mode toggles LEDs between green and blue when disarmed and armed, respectively.&lt;/p&gt;

&lt;p&gt;Note: Armed State cannot be used with Flight Mode.&lt;/p&gt;

&lt;h4&gt;Thrust state&lt;/h4&gt;

&lt;p&gt;This mode fades the LED current LED color to the previous/next color in the HSB color space depending on throttle stick position.  When the
throttle is in the middle position the color is unaffected, thus it can be mixed with orientation colors to indicate orientation and throttle at
the same time.  Thrust should normally be combined with Color or Mode/Orientation.&lt;/p&gt;

&lt;h4&gt;Thrust ring state&lt;/h4&gt;

&lt;p&gt;This mode is allows you to use a 12, 16 or 24 leds ring (e.g. NeoPixel ring) for an afterburner effect. When armed the leds use the following sequences: 2 On, 4 Off, 2 On, 4 Off, and so on.  The light pattern rotates clockwise as throttle increases. &lt;/p&gt;

&lt;p&gt;A better effect is acheived when LEDs configured for thrust ring have no other functions.&lt;/p&gt;

&lt;p&gt;LED direction and X/Y positions are irrelevant for thrust ring LED state.  The order of the LEDs that have the state determines how the LED behaves.&lt;/p&gt;

&lt;p&gt;Each LED of the ring can be a different color. The color can be selected between the 16 colors availables.&lt;/p&gt;

&lt;p&gt;For example, led 0 is set as a &lt;code&gt;R&lt;/code&gt;ing thrust state led in color 13 as follow. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;led 0 2,2::R:13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LED strips and rings can be combined.&lt;/p&gt;

&lt;h4&gt;Solid Color&lt;/h4&gt;

&lt;p&gt;The mode allows you to set an LED to be permanently on and set to a specific color.&lt;/p&gt;

&lt;p&gt;x,y position and directions are ignored when using this mode.&lt;/p&gt;

&lt;p&gt;Other modes will override or combine with the color mode.&lt;/p&gt;

&lt;p&gt;For example, to set led 0 to always use color 10 you would issue this command. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;led 0 0,0::C:10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Colors&lt;/h3&gt;

&lt;p&gt;Colors can be configured using the cli &lt;code&gt;color&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;color&lt;/code&gt; command takes either zero or two arguments - an zero-based color number and a sequence which indicates pair of hue, saturation and value (HSV).&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;http://en.wikipedia.org/wiki/HSL_and_HSV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If used with zero arguments it prints out the color configuration which can be copied for future reference.&lt;/p&gt;

&lt;p&gt;The default color configuration is as follows:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Index&lt;/th&gt;
&lt;th&gt;Color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;orange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;lime green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;mint green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;cyan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;light blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;dark violet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;magenta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;deep pink&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;color 0 0,0,0
color 1 0,255,255
color 2 0,0,255
color 3 30,0,255
color 4 60,0,255
color 5 90,0,255
color 6 120,0,255
color 7 150,0,255
color 8 180,0,255
color 9 210,0,255
color 10 240,0,255
color 11 270,0,255
color 12 300,0,255
color 13 330,0,255
color 14 0,0,0
color 15 0,0,0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Positioning&lt;/h2&gt;

&lt;p&gt;Cut the strip into sections as per diagrams below.  When the strips are cut ensure you reconnect each output to each input with cable where the break is made.
e.g. connect 5V out to 5V in, GND to GND and Data Out to Data In.&lt;/p&gt;

&lt;p&gt;Orientation is when viewed with the front of the aircraft facing away from you and viewed from above.&lt;/p&gt;

&lt;h3&gt;Example 12 LED config&lt;/h3&gt;

&lt;p&gt;The default configuration is as follows
&lt;code&gt;
led 0 15,15:ES:IA:0
led 1 15,8:E:WF:0
led 2 15,7:E:WF:0
led 3 15,0:NE:IA:0
led 4 8,0:N:F:0
led 5 7,0:N:F:0
led 6 0,0:NW:IA:0
led 7 0,7:W:WF:0
led 8 0,8:W:WF:0
led 9 0,15:SW:IA:0
led 10 7,15:S:WF:0
led 11 8,15:S:WF:0
led 12 7,7:U:WF:0
led 13 8,7:U:WF:0
led 14 7,8:D:WF:0
led 15 8,8:D:WF:0
led 16 8,9::R:3
led 17 9,10::R:3
led 18 10,11::R:3
led 19 10,12::R:3
led 20 9,13::R:3
led 21 8,14::R:3
led 22 7,14::R:3
led 23 6,13::R:3
led 24 5,12::R:3
led 25 5,11::R:3
led 26 6,10::R:3
led 27 7,9::R:3
led 28 0,0:::0
led 29 0,0:::0
led 30 0,0:::0
led 31 0,0:::0
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which translates into the following positions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6             3
      \           /
       \   5-4   /
        \ FRONT /
    7,8 | 12-15 | 1,2
        /  BACK \
       /  10,11  \
      /           \
     9             0
       RING 16-27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LEDs 0,3,6 and 9 should be placed underneath the quad, facing downwards.
LEDs 1-2, 4-5, 7-8 and 10-11 should be positioned so the face east/north/west/south, respectively.
LEDs 12-13 should be placed facing down, in the middle
LEDs 14-15 should be placed facing up, in the middle
LEDs 16-17 should be placed in a ring and positioned at the rear facing south.&lt;/p&gt;

&lt;p&gt;This is the default so that if you don&amp;rsquo;t want to place LEDs top and bottom in the middle just connect the first 12 LEDs.&lt;/p&gt;

&lt;h3&gt;Example 16 LED config&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;led 0 15,15:SD:IA:0
led 1 8,8:E:FW:0
led 2 8,7:E:FW:0
led 3 15,0:ND:IA:0
led 4 7,7:N:FW:0
led 5 8,7:N:FW:0
led 6 0,0:ND:IA:0
led 7 7,7:W:FW:0
led 8 7,8:W:FW:0
led 9 0,15:SD:IA:0
led 10 7,8:S:FW:0
led 11 8,8:S:FW:0
led 12 7,7:D:FW:0
led 13 8,7:D:FW:0
led 14 7,7:U:FW:0
led 15 8,7:U:FW:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which translates into the following positions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6             3
      \           / 
       \   5-4   / 
      7 \ FRONT / 2
        | 12-15 | 
      8 /  BACK \ 1
       /  10-11  \
      /           \ 
     9             0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LEDs 0,3,6 and 9 should be placed underneath the quad, facing downwards.
LEDs 1-2, 4-5, 7-8 and 10-11 should be positioned so the face east/north/west/south, respectively.
LEDs 12-13 should be placed facing down, in the middle
LEDs 14-15 should be placed facing up, in the middle&lt;/p&gt;

&lt;h3&gt;Exmple 28 LED config&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#right rear cluster
led 0 9,9:S:FWT:0
led 1 10,10:S:FWT:0
led 2 11,11:S:IA:0
led 3 11,11:E:IA:0
led 4 10,10:E:AT:0
led 5 9,9:E:AT:0
# right front cluster
led 6 10,5:S:F:0
led 7 11,4:S:F:0
led 8 12,3:S:IA:0
led 9 12,2:N:IA:0
led 10 11,1:N:F:0
led 11 10,0:N:F:0
# center front cluster
led 12 7,0:N:FW:0
led 13 6,0:N:FW:0
led 14 5,0:N:FW:0
led 15 4,0:N:FW:0
# left front cluster
led 16 2,0:N:F:0
led 17 1,1:N:F:0
led 18 0,2:N:IA:0
led 19 0,3:W:IA:0
led 20 1,4:S:F:0
led 21 2,5:S:F:0
# left rear cluster
led 22 2,9:W:AT:0
led 23 1,10:W:AT:0
led 24 0,11:W:IA:0
led 25 0,11:S:IA:0
led 26 1,10:S:FWT:0
led 27 2,9:S:FWT:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;       16-18  9-11
19-21 \           / 6-8
       \  12-15  / 
        \ FRONT /
        /  BACK \
       /         \
22-24 /           \ 3-5
       25-27   0-2  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All LEDs should face outwards from the chassis in this configuration.&lt;/p&gt;

&lt;p&gt;Note:
This configuration is specifically designed for the &lt;a href=&quot;http://www.goodluckbuy.com/alien-spider-aq50d-pro-250mm-mini-quadcopter-carbon-fiber-micro-multicopter-frame.html&quot;&gt;Alien Spider AQ50D PRO 250mm frame&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;On initial power up the LEDs on the strip will be set to WHITE.  This means you can attach a current meter to verify
the current draw if your measurement equipment is fast enough.  Most 5050 LEDs will draw 0.3 Watts a piece.
This also means that you can make sure that each R,G and B LED in each LED module on the strip is also functioning.&lt;/p&gt;

&lt;p&gt;After a short delay the LEDs will show the unarmed color sequence and or low-battery warning sequence.&lt;/p&gt;

&lt;p&gt;Also check that the feature &lt;code&gt;LED_STRIP&lt;/code&gt; was correctly enabled and that it does not conflict with other features, as above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/introduction"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/introduction</id>
   <content type="html">&lt;h1&gt;Cleanflight&lt;/h1&gt;

&lt;p&gt;Welcome to CleanFlight!&lt;/p&gt;

&lt;p&gt;Cleanflight is an community project which attempts to deliver flight controller firmware and related tools.&lt;/p&gt;

&lt;h2&gt;Primary Goals&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Community driven.&lt;/li&gt;
&lt;li&gt;Friendly project atmosphere.&lt;/li&gt;
&lt;li&gt;Focus on the needs of users.&lt;/li&gt;
&lt;li&gt;Great flight performance.&lt;/li&gt;
&lt;li&gt;Understandable and maintainable code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;See the flight controller hardware chapter for details.&lt;/p&gt;

&lt;h2&gt;Software&lt;/h2&gt;

&lt;p&gt;There are two primary components, the firmware and the configuration tool.  The firmware is the code that runs on the flight controller board.  The GUI configuration tool (configurator) is used to configure the flight controller, it runs on Windows, OSX and Linux.&lt;/p&gt;

&lt;h2&gt;Feedback &amp;amp; Contributing&lt;/h2&gt;

&lt;p&gt;We welcome all feedback.  If you love it we want to hear from you, if you have problems please tell us how we could improve things so we can make it better for everyone.&lt;/p&gt;

&lt;p&gt;If you want to contribute please see the notes here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/cleanflight#contributing&quot;&gt;https://github.com/cleanflight/cleanflight#contributing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers should read this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/cleanflight/blob/master/CONTRIBUTING.md&quot;&gt;https://github.com/cleanflight/cleanflight/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installation</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/installation"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/installation</id>
   <content type="html">&lt;h1&gt;Installation&lt;/h1&gt;

&lt;h2&gt;Using the configurator&lt;/h2&gt;

&lt;p&gt;This is a generic procedure to flash a board using the configurator. The configurator does not yet support all boards, so please check the documentation corresponding to your board before proceeding.&lt;/p&gt;

&lt;p&gt;Make sure you have the &lt;a href=&quot;https://github.com/cleanflight/cleanflight-configurator&quot;&gt;Cleanflight Configurator&lt;/a&gt; installed, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect the flight controller to the PC.&lt;/li&gt;
&lt;li&gt;Start the Cleanflight Configurator.&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;Disconnect&amp;rdquo; if the configurator connected to the board automatically.&lt;/li&gt;
&lt;li&gt;Click on the &amp;ldquo;Firmware Flasher&amp;rdquo; tab.&lt;/li&gt;
&lt;li&gt;Make sure you have internet connectivity and click on the &amp;ldquo;Load Firmware [Online]&amp;rdquo; button.&lt;/li&gt;
&lt;li&gt;Click on the &amp;ldquo;Choose a Firmware / Board&amp;rdquo; dropdown menu, and select the latest stable version for your flight controller.&lt;/li&gt;
&lt;li&gt;IMPORTANT: Read and understand the release notes that are displayed.  When upgrading review all release notes since your current firmware.&lt;/li&gt;
&lt;li&gt;If this is the first time Cleanflight is flashed to the board, tick the &amp;ldquo;Full Chip Erase&amp;rdquo; checkbox.&lt;/li&gt;
&lt;li&gt;Connect the flight controller board to the PC.  Ensure the correct serial port is selected.&lt;/li&gt;
&lt;li&gt;Click on the &amp;ldquo;Flash Firmware&amp;rdquo; button and hold still (do not breathe, too).&lt;/li&gt;
&lt;li&gt;When the progress bar becomes green and reads &amp;ldquo;Programming: SUCCESSFUL&amp;rdquo; you are done!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Manually&lt;/h2&gt;

&lt;p&gt;See the board specific flashing instructions.&lt;/p&gt;

&lt;h1&gt;Upgrading&lt;/h1&gt;

&lt;p&gt;When upgrading be sure to backup / dump your existing settings.  Some firmware releases are not backwards compatible and default settings are restored when the FC detects an out of date configuration.&lt;/p&gt;

&lt;h2&gt;Backup/Restore process&lt;/h2&gt;

&lt;p&gt;See the CLI section of the docs for details on how to backup and restore your configuration via the CLI.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Inflight Adjustments</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/inflight-adjustments"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/inflight-adjustments</id>
   <content type="html">&lt;h1&gt;In-flight Adjustments&lt;/h1&gt;

&lt;p&gt;With Cleanflight it&amp;rsquo;s possible to make adjustments to various settings by using AUX channels from your transmitter while the aircraft is flying.&lt;/p&gt;

&lt;h2&gt;Warning&lt;/h2&gt;

&lt;p&gt;Changing setting during flight can make your aircraft unstable and crash if you are not careful.&lt;/p&gt;

&lt;h2&gt;Recommendations&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Always make adjustments while flying in a large open area.&lt;/li&gt;
&lt;li&gt;Make small adjustments and fly carefully to test your adjustment.&lt;/li&gt;
&lt;li&gt;Give yourself enough flying space and time to adjust to how your changes affect the behaviour of the aircraft.&lt;/li&gt;
&lt;li&gt;Remember to set adjustment channel switches/pots to the center position before powering on your TX and your aircraft.&lt;/li&gt;
&lt;li&gt;If possible configure switch warnings on your transitter for dedicated adjustment switches. &lt;/li&gt;
&lt;li&gt;A momentary 3 position switch is the best choice of switch for this - i.e. one that re-centers itself when you let go of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;Up to 4 RX channels can be used to make different adjustments at the same time.&lt;/p&gt;

&lt;p&gt;The adjustment a channel makes can be controlled by another channel.&lt;/p&gt;

&lt;p&gt;The following adjustments can be made, in flight, as well as on the ground.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RC Rate&lt;/li&gt;
&lt;li&gt;RC Expo&lt;/li&gt;
&lt;li&gt;Throttle Expo&lt;/li&gt;
&lt;li&gt;Roll &amp;amp; Pitch Rate&lt;/li&gt;
&lt;li&gt;Yaw Rate&lt;/li&gt;
&lt;li&gt;Pitch+Roll P I and D&lt;/li&gt;
&lt;li&gt;Yaw P I and D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example scenarios:
Up to 4 3-position switches or pots can be used to adjust 4 different settings at the same time.
A single 2/&amp;frac34;/5/6/x position switche can be used to make one 3 position switch adjust one setting at a time.&lt;/p&gt;

&lt;p&gt;Any combination of switches and pots can be used.  So you could have 6 POS switch.&lt;/p&gt;

&lt;p&gt;Settings are not saved automatically, connect a GUI, refresh and save or save using stick position when disarmed.
Powering off without saving will discard the adjustments.&lt;/p&gt;

&lt;p&gt;Settings can be saved when disarmed using stick positions: Throttle Low, Yaw Left, Pitch Low, Roll Right.&lt;/p&gt;

&lt;h2&gt;Adjustment switches&lt;/h2&gt;

&lt;p&gt;The switch can be a ON-OFF-ON, POT or momentary ON-OFF-ON switch.  The latter is recommended.&lt;/p&gt;

&lt;p&gt;When the switch is returned to the center position the value will not be increased/decreased.&lt;/p&gt;

&lt;p&gt;Each time you can press the switch high/low and then return it to the middle the value will change at least once, you do not have to wait before pressing the switch again if you want to increase/decrease at a faster rate.  While the adjustment switch held is high/low, the adjustment function applies and increases/decreases the value being adjusted twice a second and the flight controller will beep shorter/longer, respectively. The system works similar to how a keyboard repeat delay works.&lt;/p&gt;

&lt;p&gt;Hint: With OpenTX transmitters you can combine two momentary OFF-ON switches to control a single channel.  You could make it so that a momentary switch on the left of your transmitter decreases the value and a momentary switch on the right increases the value.  Experiment with your mixer!&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The CLI command &lt;code&gt;adjrange&lt;/code&gt; is used to configure adjustment ranges.&lt;/p&gt;

&lt;p&gt;12 adjustment ranges can be defined.
4 adjustments can be made at the same time, each simultaneous adjustment requires an adjustment slot.&lt;/p&gt;

&lt;p&gt;Show the current ranges using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adjrange&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Configure a range using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adjrange &amp;lt;index&amp;gt; &amp;lt;slot&amp;gt; &amp;lt;range channel&amp;gt; &amp;lt;range start&amp;gt; &amp;lt;range end&amp;gt; &amp;lt;adjustment function&amp;gt; &amp;lt;adjustment channel&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;0 - 11&lt;/td&gt;
&lt;td&gt;Select the adjustment range to configure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slot&lt;/td&gt;
&lt;td&gt;0 - 3&lt;/td&gt;
&lt;td&gt;Select the adjustment slot to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range Channel&lt;/td&gt;
&lt;td&gt;0 based index, AUX1 = 0, AUX2 = 1&lt;/td&gt;
&lt;td&gt;The AUX channel to use to select an adjustment for a switch/pot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range Start&lt;/td&gt;
&lt;td&gt;900 - 2100. Steps of 25, e.g. 900, 925, 950&amp;hellip;&lt;/td&gt;
&lt;td&gt;Start of range&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range End&lt;/td&gt;
&lt;td&gt;900 - 2100&lt;/td&gt;
&lt;td&gt;End of range&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adjustment function&lt;/td&gt;
&lt;td&gt;0 - 11&lt;/td&gt;
&lt;td&gt;See Adjustment function table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adjustment channel&lt;/td&gt;
&lt;td&gt;0 based index, AUX1 = 0, AUX2 = 1&lt;/td&gt;
&lt;td&gt;The channel that is controlled by a 3 Position switch/Pot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Range Start/End values should match the values sent by your receiver.&lt;/p&gt;

&lt;p&gt;Normally Range Channel and Slot values are grouped together over multiple adjustment ranges.&lt;/p&gt;

&lt;p&gt;The Range Channel and the Adjustment Channel can be the same channel.  This is useful when you want a single 3 Position switch to be dedicated
to a single adjustment function regardless of other switch positions.&lt;/p&gt;

&lt;p&gt;The adjustment function is applied to the adjustment channel when range channel is between the range values.
The adjustment is made when the adjustment channel is in the high or low position.  high = mid_rc + 200, low = mid_rc - 200.  by default this is 1700 and 1300 respectively.&lt;/p&gt;

&lt;p&gt;When the Range Channel does not fall into Start/End range the assigned slot will retain it&amp;rsquo;s state and will continue to apply the adjustment.  For
this reason ensure that you define enough ranges to cover the range channel&amp;rsquo;s usable range.&lt;/p&gt;

&lt;h3&gt;Adjustment function&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Adjustment&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;RC RATE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;RC_EXPO&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;THROTTLE_EXPO&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;PITCH_ROLL_RATE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;YAW_RATE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;PITCH_ROLL_P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;PITCH_ROLL_I&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;PITCH_ROLL_D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;YAW_P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;YAW_I&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;YAW_D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;RATE_PROFILE&lt;/td&gt;
&lt;td&gt;Switch between 3 rate profiles using a 3 position switch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;PITCH_RATE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;ROLL_RATE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;PITCH_P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;PITCH_I&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;PITCH_D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;ROLL_P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;ROLL_I&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;ROLL_D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;h3&gt;Example 1 - 3 Position switch used to adjust pitch/roll rate&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;adjrange 0 0 3 900 2100 4 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure adjrange 0 to use adjustment slot 1 (0) so that when aux4
(3) in the range 900-2100 then use adjustment 4 (pitch/roll rate) when aux 4 (3)
is in the appropriate position.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Example 2 - 2 Position switch used to enable adjustment of RC rate via a 3 position switch&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;adjrange 1 1 0 900 1700 0 2
adjrange 2 1 0 1700 2100 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure adjrange 1 to use adjustment slot 2 (1) so that when aux1
(0) in the range 900-1700 then do nothing (0) when aux 3 (2) is in any
position.&lt;/li&gt;
&lt;li&gt;configure adjrange 2 to use adjustment slot 2 (1) so that when aux1
(0) in the range 1700-2100 then use adjustment rc rate (1) when aux 3
(2) is in the appropriate position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without the entire range of aux1 being defined there is nothing that
would stop aux 3 adjusting the pitch/roll rate once aux 1 wasn&amp;rsquo;t in the higher
range.&lt;/p&gt;

&lt;h3&gt;Example 3 - 6 Position switch used to select PID tuning adjustments via a 3 position switch&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;adjrange 3 2 1 900 1150 6 3
adjrange 4 2 1 1150 1300 7 3
adjrange 5 2 1 1300 1500 8 3
adjrange 6 2 1 1500 1700 9 3
adjrange 7 2 1 1700 1850 10 3
adjrange 8 2 1 1850 2100 11 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure adjrange 3 to use adjustment slot 3 (2) so that when aux2
(1) in the range 900-1150 then use adjustment Pitch/Roll P (6) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;li&gt;configure adjrange 4 to use adjustment slot 3 (2) so that when aux2
(1) in the range 1150-1300 then use adjustment Pitch/Roll I (7) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;li&gt;configure adjrange 5 to use adjustment slot 3 (2) so that when aux2
(1) in the range 1300-1500 then use adjustment Pitch/Roll D (8) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;li&gt;configure adjrange 6 to use adjustment slot 3 (2) so that when aux2
(1) in the range 1500-1700 then use adjustment Yaw P (9) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;li&gt;configure adjrange 7 to use adjustment slot 3 (2) so that when aux2
(1) in the range 1700-1850 then use adjustment Yaw I (10) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;li&gt;configure adjrange 8 to use adjustment slot 3 (2) so that when aux2
(1) in the range 1850-2100 then use adjustment Yaw D (11) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Example 4 - Use a single 3 position switch to change between 3 different rate profiles&lt;/h3&gt;

&lt;p&gt;adjrange 11 3 3 900 2100 12 3&lt;/p&gt;

&lt;p&gt;explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure adjrange 11 to use adjustment slot 4 (3) so that when aux4
(3) in the range 900-2100 then use adjustment Rate Profile (12) when aux 4
(3) is in the appropriate position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the switch is low, rate profile 0 is selcted.
When the switch is medium, rate profile 1 is selcted.
When the switch is high, rate profile 2 is selcted.&lt;/p&gt;

&lt;h3&gt;Configurator examples&lt;/h3&gt;

&lt;p&gt;The following 5 images show valid configurations.  In all cales the enture usable range for the Range Channel is used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-rate-profile-selection-via-3pos.png&quot; alt=&quot;Configurator example 1&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-pitch-and-roll-rate-adjustment-via-3pos.png&quot; alt=&quot;Configurator example 2&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-pid-via-two-3pos.png&quot; alt=&quot;Configurator example 3&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-pid-via-6pos-and-3pos.png&quot; alt=&quot;Configurator example 4&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-rates-via-a-2pos-and-3pos.png&quot; alt=&quot;Configurator example 5&quot;&gt;&lt;/p&gt;

&lt;p&gt;The following examples shows &lt;strong&gt;incorrect&lt;/strong&gt; configuration - the entire usable range for the Range Channel is not used in both cases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-incorrect-config-1.png&quot; alt=&quot;Configurator example 6&quot;&gt;
&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-incorrect-config-2.png&quot; alt=&quot;Configurator example 7&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the following example, the incorrect configuraton (above) has been corrected by adding a range that makes &amp;lsquo;No changes&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/adjustments-incorrect-config-2-corrected.png&quot; alt=&quot;Configurator example 7&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hardware Debugging In Eclipse</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/hardware-debugging-in-eclipse"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/hardware-debugging-in-eclipse</id>
   <content type="html">&lt;h1&gt;Hardware&lt;/h1&gt;

&lt;p&gt;Various debugging hardware solutions exist, the Segger J-Link clones are cheap and are known to work on Windows with both the Naze and Olimexino platforms.&lt;/p&gt;

&lt;p&gt;USB-MiniJTAG J-Link JTAG/SWD Debugger/Emulator&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hotmcu.com/usbminijtag-jlink-jtagswd-debuggeremula%E2%80%8Btor-p-29.html?cPath=3_25&amp;amp;zenid=fdefvpnod186umrhsek225dc10&quot;&gt;http://www.hotmcu.com/usbminijtag-jlink-jtagswd-debuggeremula%E2%80%8Btor-p-29.html?cPath=3_25&amp;amp;zenid=fdefvpnod186umrhsek225dc10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/hydra/cleanflight/images/hardware/THAOYU%20USB-MiniJTAG.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;ARM-JTAG-20-10 adapter&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-20-10/&quot;&gt;https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-20-10/&lt;/a&gt;
&lt;a href=&quot;http://uk.farnell.com/jsp/search/productdetail.jsp?sku=2144328&quot;&gt;http://uk.farnell.com/jsp/search/productdetail.jsp?sku=2144328&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/hydra/cleanflight/images/hardware/OLIMEX%20ARM-JTAG%20ADAPTER%202144328-40.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;The Segger J-Link server can be obtained from here&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.segger.com/jlink-software.html&quot;&gt;http://www.segger.com/jlink-software.html&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Build with DEBUG=GDB&lt;/h1&gt;

&lt;h2&gt;Naze target (default)&lt;/h2&gt;

&lt;h3&gt;via Command line&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;make clean TARGET=NAZE
make TARGET=NAZE DEBUG=GDB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;via Eclipse make target&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/hydra/cleanflight/images/eclipse-gdb-debugging/make%202%20-%20NAZE%20GDB.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;via configuration&lt;/h3&gt;

&lt;p&gt;use this method if you want to build automatically when launching the debug configuration&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fA0m0xM.png&quot; alt=&quot;make debug&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Olimexino target&lt;/h2&gt;

&lt;h3&gt;via command line&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;make clean TARGET=OLIMEXINO
make TARGET=OLIMEXINO DEBUG=GDB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;via Eclipse make target&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/hydra/cleanflight/images/eclipse-gdb-debugging/make%201%20-%20OLIMEXINO%20GDB.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h1&gt;GDB and OpenOCD&lt;/h1&gt;

&lt;p&gt;start openocd:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  openocd -f /usr/share/openocd/scripts/board/stm32vldiscovery.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new debug configuration in eclipse :
&lt;img src=&quot;http://i.imgur.com/somJLnq.png&quot; alt=&quot;connect to openocd&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/LTtioaF.png&quot; alt=&quot;use workspace default&quot;&gt;&lt;/p&gt;

&lt;p&gt;you can control openocd with a telnet connection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; telnet localhost 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stop the board, flash the firmware, restart:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; reset halt
 wait_halt 
 sleep 100
 poll
 flash probe 0
 flash write_image erase /home/user/git/cleanflight/obj/cleanflight_NAZE.hex 0x08000000
 sleep 200
 soft_reset_halt
 wait_halt
 poll
 reset halt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A this point you can launch the debug in Eclispe.
&lt;img src=&quot;http://i.imgur.com/u7wDgxv.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h1&gt;GDB and J Link&lt;/h1&gt;

&lt;p&gt;Here are some screenshots showing Hydra&amp;rsquo;s configuration of Eclipse (Kepler)&lt;/p&gt;

&lt;p&gt;If you use cygwin to build the binaries then be sure to have configured your common &lt;code&gt;Source Lookup Path&lt;/code&gt;, &lt;code&gt;Path Mappings&lt;/code&gt; first, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%207.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Create a new &lt;code&gt;GDB Hardware Debugging&lt;/code&gt; launch configuration from the &lt;code&gt;Run&lt;/code&gt; menu&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to have build the executable compiled with GDB debugging information first.
Select the appropriate .elf file (not hex file) - In these examples the target platform is an OLIMEXINO, not a naze32.&lt;/p&gt;

&lt;p&gt;DISABLE auto-build&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%201.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Choose the appropriate gdb executable - ideally from the same toolchain that you use to build the executable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%202.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Configure Startup as follows&lt;/p&gt;

&lt;p&gt;Initialization commands&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;target remote localhost:2331
monitor interface SWD
monitor speed 2000
monitor flash device = STM32F103RB
monitor flash download = 1
monitor flash breakpoints = 1
monitor endian little
monitor reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%203.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%204.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;It may be useful to specify run commands too:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;monitor reg r13 = (0x00000000)
monitor reg pc = (0x00000004)
continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%2013.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;If you use cygwin an additional entry should be shown on the Source tab (not present in this screenshot)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%205.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Nothing to change from the defaults on the Common tab&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%206.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Start up the J-Link server in USB mode&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%209.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;If it connects to your target device it should look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%2010.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;From Eclipse launch the application using the Run/Debug Configurations&amp;hellip;, Eclipse should upload the compiled file to the target device which looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%2011.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;When it&amp;rsquo;s running the J-Link server should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%2012.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Then finally you can use Eclipse debug features to inspect variables, memory, stacktrace, set breakpoints, step over code, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/debugging.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;If Eclipse can&amp;rsquo;t find your breakpoints and they are ignored then check your path mappings (if using cygwin) or use the other debugging launcher as follows.  Note the &amp;lsquo;Select other&amp;hellip;&amp;rsquo; at the bottom of the configuration window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/wiki/cleanflight/cleanflight/images/eclipse-gdb-debugging/config%208%20-%20If%20breakpoints%20do%20not%20work.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hardware Debugging</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/hardware-debugging"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/hardware-debugging</id>
   <content type="html">&lt;h1&gt;Hardware debugging&lt;/h1&gt;

&lt;p&gt;The code can be compiled with debugging information, you can then upload a debug version to a board via a JLink/St-Link debug adapter and step through the code in your IDE.&lt;/p&gt;

&lt;p&gt;More information about the necessary hardware and setting up the eclipse IDE can be found &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/hardware-debugging-in-eclipse/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A guide for visual studio can be found here:
&lt;a href=&quot;http://visualgdb.com/tutorials/arm/st-link/&quot;&gt;http://visualgdb.com/tutorials/arm/st-link/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This video is also helpful in understanding the proces:
&lt;a href=&quot;https://www.youtube.com/watch?v=kjvqySyNw20&quot;&gt;https://www.youtube.com/watch?v=kjvqySyNw20&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Compilation options&lt;/h2&gt;

&lt;p&gt;use &lt;code&gt;DEBUG=GDB&lt;/code&gt; make argument.&lt;/p&gt;

&lt;p&gt;You may find that if you compile all the files with debug information on that the program is too big to fit on the target device.  If this happens you have some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile all files without debug information (&lt;code&gt;make clean&lt;/code&gt;, &lt;code&gt;make ...&lt;/code&gt;), then re-save or &lt;code&gt;touch&lt;/code&gt; the files you want to be able to step though and then run &lt;code&gt;make DEBUG=GDB&lt;/code&gt;.  This will then re-compile the files you&amp;rsquo;re interested in debugging with debugging symbols and you will get a smaller binary file which should then fit on the device.&lt;/li&gt;
&lt;li&gt;You could use a development board such as an Olimexino or an EUSTM32F103RB, development boards often have more flash rom.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;OSX&lt;/h2&gt;

&lt;h3&gt;Install OpenOCD via Brew&lt;/h3&gt;

&lt;p&gt;ruby -e &amp;ldquo;$(curl -fsSL &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&gt;https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/a&gt;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;brew install openocd&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gps</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/gps"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/gps</id>
   <content type="html">&lt;h1&gt;GPS&lt;/h1&gt;

&lt;p&gt;GPS features in Cleanflight are experimental.  Please share your findings with the developers.&lt;/p&gt;

&lt;p&gt;GPS works best if the GPS receiver is mounted above and away from other sources of interference.&lt;/p&gt;

&lt;p&gt;The compass/mag sensor should be well away from sources of magnetic interference, e.g. keep it away from power wires, motors, ESCs.&lt;/p&gt;

&lt;p&gt;Two GPS protocols are supported. NMEA text and UBLOX binary.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Enable the GPS from the CLI as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;configure a serial port to use for GPS.&lt;/li&gt;
&lt;li&gt;set your GPS baud rate&lt;/li&gt;
&lt;li&gt;enable the &lt;code&gt;feature GPS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;gps_provider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;connect your GPS to the serial port configured for GPS.&lt;/li&gt;
&lt;li&gt;save and reboot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note:  GPS packet loss has been observed at 115200.  Try using 57600 if you experience this.&lt;/p&gt;

&lt;p&gt;For the connections step check the Board documentation for pins and port numbers.&lt;/p&gt;

&lt;h3&gt;GPS Provider&lt;/h3&gt;

&lt;p&gt;Set the &lt;code&gt;gps_provider&lt;/code&gt; appropriately.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;NMEA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;UBLOX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;GPS Auto configuration&lt;/h3&gt;

&lt;p&gt;When using UBLOX it is a good idea to use GPS auto configuration so your FC gets the GPS messages it needs.&lt;/p&gt;

&lt;p&gt;Enable GPS auto configuration as follows &lt;code&gt;set gps_auto_config=1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are not using GPS auto configuration then ensure your GPS receiver sends out the correct messages at the right frequency.  See below for manual UBlox settings.&lt;/p&gt;

&lt;h3&gt;SBAS&lt;/h3&gt;

&lt;p&gt;When using a UBLOX GPS the SBAS mode can be configured using &lt;code&gt;gps_sbas_mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The default is AUTO.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Region&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;AUTO&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;EGNOS&lt;/td&gt;
&lt;td&gt;Europe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;WAAS&lt;/td&gt;
&lt;td&gt;North America&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;MSAS&lt;/td&gt;
&lt;td&gt;Asia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;GAGAN&lt;/td&gt;
&lt;td&gt;India&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;If you use a regional specific setting you may achieve a faster GPS lock than using AUTO.&lt;/p&gt;

&lt;p&gt;This setting only works when &lt;code&gt;gps_auto_config=1&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;GPS Receiver Configuration&lt;/h2&gt;

&lt;p&gt;UBlox GPS units can either be configured using the FC or manually.&lt;/p&gt;

&lt;h3&gt;UBlox GPS manual configuration&lt;/h3&gt;

&lt;p&gt;Use UBox U-Center and connect your GPS to your computer.  The CLI &lt;code&gt;gpspassthrough&lt;/code&gt; command may be of use if you do not have a spare USART to USB adapter.&lt;/p&gt;

&lt;p&gt;Display the Packet Console (so you can see what messages your receiver is sending to your computer).&lt;/p&gt;

&lt;p&gt;Display the Configation View.&lt;/p&gt;

&lt;p&gt;Navigate to CFG (Configuration)&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Revert to default configuration&lt;/code&gt;.
Click &lt;code&gt;Send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point you might need to disconnect and reconnect at the default baudrate - probably 9600 baud.&lt;/p&gt;

&lt;p&gt;Navigate to PRT (Ports)&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;Target&lt;/code&gt; to &lt;code&gt;1 - Uart 1&lt;/code&gt;
Set &lt;code&gt;Protocol In&lt;/code&gt; to &lt;code&gt;0+1+2&lt;/code&gt;
Set &lt;code&gt;Protocol Out&lt;/code&gt; to &lt;code&gt;0+1&lt;/code&gt;
Set &lt;code&gt;Buadrate&lt;/code&gt; to &lt;code&gt;57600&lt;/code&gt; &lt;code&gt;115200&lt;/code&gt;
Press &lt;code&gt;Send&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will immediatly &amp;ldquo;break&amp;rdquo; communication to the GPS. Since you haven&amp;rsquo;t saved the new baudrate setting to the non-volatile memory you need to change the baudrate you communicate to the GPS without resetting the GPS. So &lt;code&gt;Disconnect&lt;/code&gt;, Change baud rate to match, then &lt;code&gt;Connect&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;PRT&lt;/code&gt; in the Configuration view again and inspect the packet console to make sure messages are being sent and acknowledged.&lt;/p&gt;

&lt;p&gt;Next, to ensure the FC doesn&amp;rsquo;t waste time processing unneeded messages, click on &lt;code&gt;MSG&lt;/code&gt; and enable the following on UART1 alone with a rate of 1. When changing message target and rates remember to click &lt;code&gt;Send&lt;/code&gt; after changing each message.:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;NAV-POSLLH
NAV-DOP
NAV-SOL
NAV-VELNED
NAV-TIMEUTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable the following on UART1 with a rate of 5, to reduce bandwidth and load on the FC.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;NAV-SVINFO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All other message types should be disabled.&lt;/p&gt;

&lt;p&gt;Next change the global update rate, click &lt;code&gt;Rate (Rates)&lt;/code&gt; in the Configuration view.&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;Measurement period&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt; ms.
Set &lt;code&gt;Navigation rate&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.
Click &lt;code&gt;Send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will cause the GPS receive to send the require messages out 10 times a second.  If your GPS receiver cannot be set to use &lt;code&gt;100&lt;/code&gt;ms try &lt;code&gt;200&lt;/code&gt;ms (5hz) - this is less precise.&lt;/p&gt;

&lt;p&gt;Next change the mode, click &lt;code&gt;NAV5 (Navigation 5)&lt;/code&gt; in the Configuration View.&lt;/p&gt;

&lt;p&gt;Set to &lt;code&gt;Dynamic Model&lt;/code&gt; to &lt;code&gt;Pedestrian&lt;/code&gt; and click &lt;code&gt;Send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next change the SBAS settings.  Click &lt;code&gt;SBAS (SBAS Settings)&lt;/code&gt; in the Configuration View.&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;Subsystem&lt;/code&gt; to &lt;code&gt;Enabled&lt;/code&gt;.
Set &lt;code&gt;PRN Codes&lt;/code&gt; to &lt;code&gt;Auto-Scan&lt;/code&gt;.
Click &lt;code&gt;Send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we need to save the configuration.&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;CFG (Configuration&lt;/code&gt; in the Configuration View.&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Save current configuration&lt;/code&gt; and click &lt;code&gt;Send&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;UBlox Navigation model&lt;/h3&gt;

&lt;p&gt;Cleanflight will use &lt;code&gt;Pedestrian&lt;/code&gt; when gps auto config is used.&lt;/p&gt;

&lt;p&gt;From the UBlox documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pedestrian - Applications with low acceleration and speed, e.g. how a pedestrian would move. Low acceleration assumed. MAX Altitude [m]: 9000, MAX Velocity [m/s]: 30, MAX Vertical, Velocity [m/s]: 20, Sanity check type: Altitude and Velocity, Max Position Deviation: Small.&lt;/li&gt;
&lt;li&gt;Portable - Applications with low acceleration, e.g. portable devices. Suitable for most situations. MAX Altitude [m]: 12000, MAX Velocity [m/s]: 310, MAX Vertical Velocity [m/s]: 50, Sanity check type: Altitude and Velocity, Max Position Deviation: Medium.&lt;/li&gt;
&lt;li&gt;Airborne &amp;lt; 1G - Used for applications with a higher dynamic range and vertical acceleration than a passenger car. No 2D position fixes supported. MAX Altitude [m]: 50000, MAX Velocity [m/s]: 100, MAX Vertical Velocity [m/s]: 100, Sanity check type: Altitude, Max Position Deviation: Large&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;There are many GPS receivers available on the market. 
Below are some examples of user-tested hardware. &lt;/p&gt;

&lt;h3&gt;Ublox&lt;/h3&gt;

&lt;h3&gt;U-Blox&lt;/h3&gt;

&lt;h4&gt;NEO-M8&lt;/h4&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;U-blox Neo-M8N w/Compass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reyax RY825AI&lt;/td&gt;
&lt;td&gt;NEO-M8N, 18Hz UART USB interface GPS Glonass BeiDou QZSS antenna module flash. &lt;a href=&quot;http://www.ebay.com/itm/RY825AI-18Hz-UART-USB-interface-GPS-Glonass-BeiDou-QZSS-antenna-module-flash/181566850426&quot;&gt;eBay&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;NEO-7&lt;/h4&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;U-blox Neo-7M w/Compass&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.hobbyking.com/hobbyking/store/__55558__Ublox_Neo_7M_GPS_with_Compass_and_Pedestal_Mount.html&quot;&gt;HobbyKing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h4&gt;NEO-7&lt;/h4&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ublox NEO-6M GPS with Compass&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ebay.com/itm/111585855757&quot;&gt;eBay&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;Serial NMEA&lt;/h3&gt;

&lt;h4&gt;MediaTek&lt;/h4&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MTK 3329&lt;/td&gt;
&lt;td&gt;Tested on hardware serial at 115200 baud (default) and on softserial at 19200 baud. The baudrate and refresh rate can be adjusted using the MiniGPS software (recommended if you lower the baudrate). The software will estimate the percentage of UART bandwidth used for your chosen baudrate and update rate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/getting-started"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/getting-started</id>
   <content type="html">&lt;h1&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;This is a step-by-step guide that can help a person that has never used Cleanflight before set up a flight controller and the aircraft around it for flight. Basic RC knowledge is required, though. A total beginner should first familiarize themselves with concepts and techniques of RC before using this (e.g. basic controls, soldering, transmitter operation etc). One could use &lt;a href=&quot;http://www.rcgroups.com/forums/index.php&quot;&gt;RCGroups&lt;/a&gt; and/or &lt;a href=&quot;https://www.youtube.com/user/flitetest&quot;&gt;the Youtube show FliteTest&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;DISCLAIMER: This documents is a work in progress. We cannot guarantee the safety or success of your project. At this point the document is only meant to be a helping guide, not an authoritative checklist of everything you should do to be safe and successful. Always exercise common sense, critical thinking and caution.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/introduction/&quot;&gt;Introduction&lt;/a&gt; chapter for an overview of Cleanflight and how the community works.&lt;/p&gt;

&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;NOTE: Flight Controllers are typically equipped with accelerometers. These devices are sensitive to shocks. When the device is not yet installed  to an aircraft, it has very little mass by itself. If you drop or bump the controller, a big force will be applied on its accelerometers, which could potentially damage them. Bottom line: Handle the board very carefully until it&amp;rsquo;s installed on an aircraft!&lt;/p&gt;

&lt;p&gt;For an overview of the hardware Cleanflight (hereby CF) can run on, see &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/boards/&quot;&gt;Boards.md&lt;/a&gt;. For information about specific boards, see the board specific documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Assuming that you have a flight controller board (hereby FC) in hand, you should first read through the manual that it came with. You can skip the details about software setup, as we&amp;rsquo;ll cover that here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decide how you&amp;rsquo;ll connect your receiver by reading the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/rx/&quot;&gt;receiver&lt;/a&gt; chapter, and how many pins you need on the outputs (to connect ESCs and servos) by reading about &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/mixer/&quot;&gt;Mixers&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;rsquo;re interested in monitoring your flight battery with CF, see &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/battery/&quot;&gt;Battery Monitoring&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may want audible feedback from your copter so skim through &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/buzzer/&quot;&gt;Buzzer&lt;/a&gt; and mark the pins that will be used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you want your RC Receiver&amp;rsquo;s RSSI to be sent to the board? &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/rssi/&quot;&gt;The RSSI chapter&lt;/a&gt; explains how. You may or may not need to make an additional connection from your Receiver to the FC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Would you like to try using a GPS unit to get your aircraft to Loiter or Return-To-Launch? Take a look at the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/gps/&quot;&gt;GPS&lt;/a&gt; and &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/gps-tested-hardware/&quot;&gt;GPS Tested Hardware&lt;/a&gt; chapters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may also want to read the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/serial/&quot;&gt;Serial&lt;/a&gt; chapter to determine what extra devices (such as Blackbox, OSD, Telemetry) you may want to use, and how they should be connected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that you know what features you are going to use, and which pins you need, you can go ahead and solder them to your board, if they are not soldered already. Soldering only the pins required for the application may save weight and contribute to a neater looking setup, but if you need to use a new feature later you may have to unmount the board from the craft and solder missing pins, so plan accordingly.  Before soldering your FC please review a how-to-solder tutorial to avoid expensive mistakes, practice soldering on some scrap before soldering your FC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are going to use &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/oneshot/&quot;&gt;Oneshot125&lt;/a&gt;, you may need to enable that on your ESCs using a jumper or flashing them with the latest stable firmware and enable Damped Light in their settings, if it&amp;rsquo;s supported. Refer to the ESCs&amp;rsquo; documentation or online discussions to determine this.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Software setup&lt;/h2&gt;

&lt;p&gt;Now that your board has pins on it, you are ready to connect it to your PC and flash it with CF. Install the Chromium browser or Google Chrome to your PC, if you don&amp;rsquo;t have it already, add the &lt;a href=&quot;https://chrome.google.com/webstore/detail/cleanflight-configurator/enacoimjcgeinfnnnpajinjgmkahmfgb&quot;&gt;Cleanflight Configurator&lt;/a&gt; to it, and start it.&lt;/p&gt;

&lt;p&gt;Then follow these instructions for &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/installation/&quot;&gt;Installation&lt;/a&gt; of the firmware to the FC.&lt;/p&gt;

&lt;h2&gt;Cleanflight Configuration&lt;/h2&gt;

&lt;p&gt;Your FC should now be running CF, and you should be able to connect to it using the Configurator. If that is not the case, please go back to the previous sections and follow the steps carefully.&lt;/p&gt;

&lt;!--- This next paragraph should probably contain less info, as this info already exists in Configuration.md --&gt;

&lt;p&gt;Now, there are two ways to &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/configuration/&quot;&gt;configure CF&lt;/a&gt;; via  the Configurator&amp;rsquo;s tabs (in a &amp;ldquo;graphical&amp;rdquo; way, clicking through and selecting/changing values and tickboxes) and using the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/cli/&quot;&gt;Command Line Interface (CLI)&lt;/a&gt;. Some settings may only be configurable using the CLI and some settings are best configured using the GUI (particularly the ports settings, which aren&amp;rsquo;t documented for the CLI as they&amp;rsquo;re not human friendly).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is now a good time to setup your RC Receiver and Transmitter. Set the Tx so that it outputs at least 4 channels (Aileron, Elevator, Throttle, Rudder) but preferably more. E.g. you can set channels 5 and 6 to be controlled by 3-position switches, to be used later. Maybe set up EXPO on AIL/ELE/RUD, but you should know that it can also be done in CF&amp;rsquo;s software later. If using RSSI over PPM or PWM, it&amp;rsquo;s now time to configure your Rx to output it on a spare channel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect the Rx to the FC, and the FC to the PC. You may need to power the Rx through a BEC (its 5V rail - observe polarity!).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On your PC, connect to the Configurator, and go to the first tab. Check that the board animation is moving properly when you move the actual board. Do an accelerometer calibration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuration tab: Select your aircraft configuration (e.g. Quad X), and go through each option in the tab to check if relevant for you. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E.g. you may want to enable ONESHOT125 for Oneshot-capable ESCs.&lt;/li&gt;
&lt;li&gt;You may need RX_PPM if you&amp;rsquo;re using an RC Receiver with PPM output etc.&lt;/li&gt;
&lt;li&gt;If planning to use the battery measurement feature of the FC, check VBAT under Battery Voltage.&lt;/li&gt;
&lt;li&gt;If using analog RSSI, enable that under RSSI. Do not enable this setting if using RSSI injected into the PPM stream.&lt;/li&gt;
&lt;li&gt;Motors will spin by default when the FC is armed. If you don&amp;rsquo;t like this, enable MOTOR_STOP.&lt;/li&gt;
&lt;li&gt;Also, adjust the minimum, middle and maximum throttle according to these guidelines:&lt;/li&gt;
&lt;li&gt;Minimum Throttle - Set this to the minimum throttle level that enables all motors to start reliably. If this is too low, some motors may not start properly after spindowns, which can cause loss of stability and control. A typical value would be 1100.&lt;/li&gt;
&lt;li&gt;Middle Throttle - The throttle level for middle stick position. Many radios use 1500, but some (e.g. Futaba) may use 1520 or other values.&lt;/li&gt;
&lt;li&gt;Maximum Throttle - The maximum throttle level that the ESCs should receive. A typical value would be 2000.&lt;/li&gt;
&lt;li&gt;Minimum Command - This is the &amp;ldquo;idle&amp;rdquo; signal level that will be sent to the ESCs when the craft is disarmed, which should not cause the motors to spin. A typical value would be 1000.&lt;/li&gt;
&lt;li&gt;Finally, click Save and Reboot.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Receiver tab: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check that the channel inputs move according to your Tx inputs. &lt;/li&gt;
&lt;li&gt;Check that the Channel map is correct along with the RSSI Channel, if you use that.&lt;/li&gt;
&lt;li&gt;Verify the range of each channel goes from ~1000 to ~2000.  See also &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/controls/&quot;&gt;controls&lt;/a&gt;. and &lt;code&gt;rx_min_usec&lt;/code&gt; and &lt;code&gt;rx_max_usec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also set EXPO here instead of your Tx. &lt;/li&gt;
&lt;li&gt;Click Save!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modes tab: Setup the desired modes. See the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/modes/&quot;&gt;modes&lt;/a&gt; chapter for what each mode does, but for the beginning you mainly need HORIZON, if any.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before finishing this section, you should calibrate the ESCs, install the FC to the frame, and connect the RSSI cable, buzzer and battery if you have chosen to use those.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Final testing and safety&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s important that you have configured CF properly, so that your aircraft does not fly away, or even worse fly into property and people! This is an important step that you should NOT postpone until after your maiden flight. Please do this now, before you head off to the flying field.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, learn how to arm your FC, and about other &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/controls/&quot;&gt;controls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Next up, setup &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/failsafe/&quot;&gt;Failsafe&lt;/a&gt;. Take your time, do it properly.&lt;/li&gt;
&lt;li&gt;Now, on the bench, without props, test that failsafe works properly, according to the above doc.&lt;/li&gt;
&lt;li&gt;Additionally, test the effect of AIL/ELE input of your Tx. Is the aircraft responding properly? Do the same for RUD input.&lt;/li&gt;
&lt;li&gt;Test the direction of AIL/ELE auto correction. Raise throttle at 30% (no blades!); when you tilt the aircraft, do the motors try to compensate momentarily? This should simulate random wind forces that the FC should counteract&lt;/li&gt;
&lt;li&gt;Test the direction of AIL/ELE auto correction in HORIZON mode. With throttle at 30%, if you tilt the aircraft so that one motor is lowered towards the ground, does it spin up and stay at high RPM until you level it off again? This tests the auto-leveling direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If one of these tests fail, do not attempt to fly, but go back to the configuration phase instead. Some channel may need reversing, or the direction of the board is wrong.&lt;/p&gt;

&lt;h2&gt;Using it (AKA: Flying)&lt;/h2&gt;

&lt;p&gt;Go to the field, turn Tx on, place aircraft on the ground, connect flight battery and wait. Arm and fly. Good luck!&lt;/p&gt;

&lt;h2&gt;Advanced Matters&lt;/h2&gt;

&lt;p&gt;Some advanced configurations and features are documented in the following pages, but have not been touched-upon earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/profiles/&quot;&gt;Profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/pid-tuning/&quot;&gt;PID tuning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/inflight-adjustments/&quot;&gt;In-flight Adjustments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/autotune/&quot;&gt;Autotune&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/blackbox/&quot;&gt;Blackbox logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/sonar/&quot;&gt;Using a Sonar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/spektrum-bind/&quot;&gt;Spektrum Bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/telemetry/&quot;&gt;Telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/display/&quot;&gt;Using a Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/ledstrip/&quot;&gt;Using a LED strip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/migrating-from-baseflight/&quot;&gt;Migrating from baseflight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Failsafe</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/failsafe"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/failsafe</id>
   <content type="html">&lt;h1&gt;Failsafe&lt;/h1&gt;

&lt;p&gt;There are two types of failsafe:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receiver based failsafe&lt;/li&gt;
&lt;li&gt;Flight controller based failsafe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Receiver based failsafe is where you, from your transmitter and receiver, configure channels to output desired signals if your receiver detects signal loss.
The idea is that you set throttle and other controls so the aircraft descends in a controlled manner.  See your receiver&amp;rsquo;s documentation for this method.&lt;/p&gt;

&lt;p&gt;Flight controller based failsafe is where the flight controller attempts to detect signal loss from your receiver.&lt;/p&gt;

&lt;p&gt;It is possible to use both types at the same time, which may be desirable.  Flight controller failsafe can even help if your receiver signal wires come loose, get damaged or your receiver malfunctions in a way the receiver itself cannot detect.&lt;/p&gt;

&lt;h2&gt;Flight controller failsafe system&lt;/h2&gt;

&lt;p&gt;The failsafe system is not activated until 5 seconds after the flight controller boots up.  This is to prevent failsafe from activating, as in the case of TX/RX gear with long bind procedures, before the RX sends out valid data. Note that you need to activate the &amp;lsquo;FAILSAFE&amp;rsquo; feature in order to activate failsafe on flight controller.&lt;/p&gt;

&lt;p&gt;After the failsafe has forced a landing, the flight controller cannot be armed and has to be reset.&lt;/p&gt;

&lt;p&gt;The failsafe system attempts to detect when your receiver loses signal.  It then attempts to prevent your aircraft from flying away uncontrollably by enabling an auto-level mode and setting the throttle that should allow the craft to come to a safer landing.&lt;/p&gt;

&lt;p&gt;The failsafe is activated when:&lt;/p&gt;

&lt;p&gt;Either:&lt;/p&gt;

&lt;p&gt;a) no valid channel data from the RX is received via Serial RX.&lt;/p&gt;

&lt;p&gt;b) the first 4 Parallel PWM/PPM channels do not have valid signals.&lt;/p&gt;

&lt;p&gt;And when:&lt;/p&gt;

&lt;p&gt;c) the failsafe guard time specified by &lt;code&gt;failsafe_delay&lt;/code&gt; has elapsed.&lt;/p&gt;

&lt;p&gt;Note that:&lt;/p&gt;

&lt;p&gt;d) The failsafe system will be activated regardless of current throttle position.&lt;/p&gt;

&lt;p&gt;e) The craft may already be on the ground with motors stopped and that motors and props could spin again - the software does not currently detect if the craft is on the ground.  Take care when using MOTOR_STOP feature.&lt;/p&gt;

&lt;h3&gt;Testing&lt;/h3&gt;

&lt;p&gt;Bench test the failsafe system before flying - remove props while doing so.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Arm the craft.&lt;/li&gt;
&lt;li&gt;Turn off transmitter or unplug RX.&lt;/li&gt;
&lt;li&gt;Observe motors spin at configured throttle setting for configured duration.&lt;/li&gt;
&lt;li&gt;Observe motors turn off after configured duration.&lt;/li&gt;
&lt;li&gt;Ensure that when you turn on your TX again or reconnect the RX that you cannot re-arm once the motors have stopped.&lt;/li&gt;
&lt;li&gt;Power cycle the FC.&lt;/li&gt;
&lt;li&gt;Arm the craft.&lt;/li&gt;
&lt;li&gt;Turn off transmitter or unplug RX.&lt;/li&gt;
&lt;li&gt;Observe motors spin at configured throttle setting for configured duration.&lt;/li&gt;
&lt;li&gt;Turn on TX or reconnect RX.&lt;/li&gt;
&lt;li&gt;Ensure that your switch positions don&amp;rsquo;t now cause the craft to disarm (otherwise it would fall out of the sky on regained signal).&lt;/li&gt;
&lt;li&gt;Observe that normal flight behavior is resumed.&lt;/li&gt;
&lt;li&gt;Disarm.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Field test the failsafe system&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Perform bench testing first!&lt;/li&gt;
&lt;li&gt;On a calm day go to an unpopulated area away from buildings or test indoors in a safe controlled environment - e.g. inside a big net.&lt;/li&gt;
&lt;li&gt;Arm the craft.&lt;/li&gt;
&lt;li&gt;Hover over something soft (long grass, ferns, heather, foam, etc.).&lt;/li&gt;
&lt;li&gt;Descend the craft and observe throttle position and record throttle value from your TX channel monitor.  Ideally 1500 should be hover. So your value should be less than 1500.&lt;/li&gt;
&lt;li&gt;Stop, disarm.&lt;/li&gt;
&lt;li&gt;Set failsafe throttle to the recorded value.&lt;/li&gt;
&lt;li&gt;Arm, hover over something soft again.&lt;/li&gt;
&lt;li&gt;Turn off TX (!)&lt;/li&gt;
&lt;li&gt;Observe craft descends and motors continue to spin for the configured duration.&lt;/li&gt;
&lt;li&gt;Observe FC disarms after the configured duration.&lt;/li&gt;
&lt;li&gt;Remove flight battery.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If craft descends too quickly then increase failsafe throttle setting.&lt;/p&gt;

&lt;p&gt;Ensure that the duration is long enough for your craft to land at the altitudes you normally fly at.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;When configuring the flight controller failsafe, use the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Configure your receiver to do one of the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a)  Upon signal loss, send no signal/pulses over the channels&lt;/p&gt;

&lt;p&gt;b)  Send an invalid signal over the channels (for example, send values lower than &amp;#39;rx_min_usec&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;c)  Ensure your receiver does not send out channel data that would cause a disarm by switch or sticks to be registered by the FC. This is especially important for those using a switch to arm.&lt;/p&gt;

&lt;p&gt;See your receiver&amp;rsquo;s documentation for direction on how to accomplish one of these.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set &amp;#39;failsafe_off_delay&amp;rsquo; to an appropriate value based on how high you fly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &amp;#39;failsafe_throttle&amp;rsquo; to a value that allows the aircraft to descend at approximately one meter per second (default is 1000 which should be throttle off).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable &amp;#39;FAILSAFE&amp;rsquo; feature in Cleanflight GUI or via CLI using &lt;code&gt;feature FAILSAFE&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the basic steps for flight controller failsafe configuration; see Failsafe Settings below for additional settings that may be changed.&lt;/p&gt;

&lt;h2&gt;Failsafe Settings&lt;/h2&gt;

&lt;p&gt;Failsafe delays are configured in 0.1 second steps.&lt;/p&gt;

&lt;p&gt;1 step = 0.1sec&lt;/p&gt;

&lt;p&gt;1 second = 10 steps&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;failsafe_delay&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Guard time for failsafe activation after signal lost.  This is the amount of time the flight controller waits to see if it begins receiving a valid signal again before activating failsafe.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;failsafe_off_delay&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Delay after failsafe activates before motors finally turn off.  This is the amount of time &amp;#39;failsafe_throttle&amp;rsquo; is active.  If you fly at higher altitudes you may need more time to descend safely.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;failsafe_throttle&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Throttle level used for landing.  Specify a value that causes the aircraft to descend at about 1M/sec. Default is set to 1000 which should correspond to throttle off.&lt;/p&gt;

&lt;p&gt;Use standard RX usec values.  See RX documentation.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;rx_min_usec&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The lowest channel value considered valid.  e.g. PWM/PPM pulse length &lt;/p&gt;

&lt;h3&gt;&lt;code&gt;rx_max_usec&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The highest channel value considered valid.  e.g. PWM/PPM pulse length &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;rx_min_usec&lt;/code&gt; and &lt;code&gt;rx_max_usec&lt;/code&gt; settings helps detect when your RX stops sending any data, enters failsafe mode or when the RX looses signal.&lt;/p&gt;

&lt;p&gt;With a Graupner GR-24 configured for PWM output with failsafe on channels 1-4 set to OFF in the receiver settings then this setting, at its default value, will allow failsafe to be activated.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Display</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/display"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/display</id>
   <content type="html">&lt;h1&gt;Display&lt;/h1&gt;

&lt;p&gt;Cleanflight supports displays to provide information to you about your aircraft and cleanflight state.&lt;/p&gt;

&lt;p&gt;When the aircraft is armed the display does not update so flight is not affected.  When disarmed the display cycles between various pages.&lt;/p&gt;

&lt;p&gt;There is currently no way to change the information on the pages, the list of pages or the time between pages - Code submissions via pull-requests are welcomed!&lt;/p&gt;

&lt;h2&gt;Supported Hardware&lt;/h2&gt;

&lt;p&gt;At this time no other displays are supported other than the SSD1306 / UG-2864HSWEG01.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;From the CLI enable the &lt;code&gt;DISPLAY&lt;/code&gt; feature&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;feature DISPLAY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;SSD1306 OLED displays&lt;/h3&gt;

&lt;p&gt;The SSD1306 display is a 128x64 OLED display that is visible in full sunlight, small and consumes very little current.&lt;br&gt;
This makes it ideal for aircraft use.&lt;/p&gt;

&lt;p&gt;There are various models of SSD1306 boards out there, they are not all equal and some require addtional modifications
before they work.  Choose wisely!&lt;/p&gt;

&lt;p&gt;Links to displays:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.banggood.com/0_96-Inch-4Pin-White-IIC-I2C-OLED-Display-Module-12864-LED-For-Arduino-p-958196.html&quot;&gt;banggood.com&lt;/a&gt; 0.96 Inch 4Pin White IIC I2C OLED Display Module 12864 LED For Arduino &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.banggood.com/0_96-Inch-4Pin-IIC-I2C-Blue-OLED-Display-Module-For-Arduino-p-969147.html&quot;&gt;banggood.com&lt;/a&gt; 0.96 Inch 4Pin IIC I2C Blue OLED Display Module For Arduino&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29&quot;&gt;wide.hk&lt;/a&gt; I2C 0.96&amp;quot; OLED display module&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://witespyquad.gostorego.com/accessories/readytofly-1-oled-128x64-pid-tuning-display-i2c.html&quot;&gt;witespyquad.gostorego.com&lt;/a&gt; ReadyToFlyQuads 1&amp;quot; OLED Display&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.multiwiicopter.com/products/1-oled&quot;&gt;multiwiicopter.com&lt;/a&gt; PARIS 1&amp;quot; OLED 128x64 PID tuning screen AIR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The banggood.com display is the cheapest at the time fo writing and will correctly send I2C ACK signals.&lt;/p&gt;

&lt;h4&gt;Crius CO-16&lt;/h4&gt;

&lt;p&gt;This display is best avoided but will work if you modify it.&lt;/p&gt;

&lt;p&gt;Step 1&lt;/p&gt;

&lt;p&gt;As supplied the I2C ack signal is not sent because the manufacturer did not bridge D1 and D2 together.  To fix this solder
the two pins together as they enter the screen.  Failure to do this will result is a screen that doesn&amp;rsquo;t display anything.&lt;/p&gt;

&lt;p&gt;Step 2&lt;/p&gt;

&lt;p&gt;Pin 14 must be disconnected from the main board using a scalpel. Then connect a 10nF or 100nF capacitor between pins 30 and the
lifted pin 14.&lt;/p&gt;

&lt;p&gt;Step 3&lt;/p&gt;

&lt;p&gt;Connect a 100K resistor between Pin 9 and the lifted Pin 14.&lt;/p&gt;

&lt;p&gt;Failure to perform steps 2 and 3 will result in a display that only works on power up some of the time any may display random dots
or other display corruption.&lt;/p&gt;

&lt;p&gt;More can be read about this procedure here: &lt;a href=&quot;http://www.multiwii.com/forum/viewtopic.php?f=6&amp;amp;t=2705&amp;amp;start=10&quot;&gt;http://www.multiwii.com/forum/viewtopic.php?f=6&amp;amp;t=2705&amp;amp;start=10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/Crius%20CO-16%20OLED%20diagram.png&quot; alt=&quot;Crius CO-16 Diagram&quot;&gt;
&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/Crius%20CO-16%20OLED%20modifications.jpg&quot; alt=&quot;Crius CO-16 Modification&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;p&gt;Connect +5v, Ground, I2C SDA and I2C SCL from the flight controller to the display.&lt;/p&gt;

&lt;p&gt;On Naze32 rev 5 boards the SDA and SCL pads are underneath the board.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Development</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/development"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/development</id>
   <content type="html">&lt;h1&gt;Development&lt;/h1&gt;

&lt;p&gt;This document is primarily for developers only.&lt;/p&gt;

&lt;h2&gt;General principals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Name everything well.&lt;/li&gt;
&lt;li&gt;Strike a balance between simplicity and not-repeating code.&lt;/li&gt;
&lt;li&gt;Methods that return a boolean should be named as a question, and should not change state.  e.g. &amp;lsquo;isOkToArm()&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Methods that start with the word &amp;#39;find&amp;rsquo; can return a null, methods that start with &amp;#39;get&amp;rsquo; should not.&lt;/li&gt;
&lt;li&gt;Methods should have verb or verb-phrase names, like &lt;code&gt;deletePage&lt;/code&gt; or &lt;code&gt;save&lt;/code&gt;.  Variables should not, they generally should be nouns.  Tell the system to &amp;#39;do&amp;rsquo; something &amp;#39;with&amp;rsquo; something.  e.g. deleteAllPages(pageList).&lt;/li&gt;
&lt;li&gt;Keep methods short - it makes it easier to test.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid of moving code to a new file - it helps to reduce test dependencies.&lt;/li&gt;
&lt;li&gt;Avoid noise-words in variable names, like &amp;#39;data&amp;rsquo; or &amp;#39;info&amp;rsquo;.  Think about what you&amp;rsquo;re naming and name it well.  Don&amp;rsquo;t be afraid to rename anything.&lt;/li&gt;
&lt;li&gt;Avoid comments that describe what the code is doing, the code should describe itself.  Comments are useful however for big-picture purposes and to document content of variables.&lt;/li&gt;
&lt;li&gt;If you need to document a variable do it at the declarion, don&amp;rsquo;t copy the comment to the &lt;code&gt;extern&lt;/code&gt; usage since it will lead to comment rot.&lt;/li&gt;
&lt;li&gt;Seek advice from other developers - know you can always learn more.&lt;/li&gt;
&lt;li&gt;Be professional - attempts at humor or slating existing code in the codebase itself is not helpful when you have to change/fix it.&lt;/li&gt;
&lt;li&gt;Know that there&amp;rsquo;s always more than one way to do something and that code is never final - but it does have to work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before making any code contributions, take a note of the &lt;a href=&quot;https://github.com/multiwii/baseflight/wiki/CodingStyle&quot;&gt;https://github.com/multiwii/baseflight/wiki/CodingStyle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also advised to read about clean code, here are some useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cleancoders.com/&quot;&gt;http://cleancoders.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Code_smell&quot;&gt;http://en.wikipedia.org/wiki/Code_smell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Code_refactoring&quot;&gt;http://en.wikipedia.org/wiki/Code_refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052&quot;&gt;http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Unit testing&lt;/h2&gt;

&lt;p&gt;Ideally, there should be tests for any new code. However, since this is a legacy codebase which was not designed to be tested this might be a bit difficult.&lt;/p&gt;

&lt;p&gt;If you want to make changes and want to make sure it&amp;rsquo;s tested then focus on the minimal set of changes required to add a test.&lt;/p&gt;

&lt;p&gt;Tests currently live in the &lt;code&gt;test&lt;/code&gt; folder and they use the google test framework. 
The tests are compiled and run natively on your development machine and not on the target platform.
This allows you to develop tests and code and actually execute it to make sure it works without needing a development board or simulator.&lt;/p&gt;

&lt;p&gt;This project could really do with some functional tests which test the behaviour of the application.&lt;/p&gt;

&lt;p&gt;All pull requests to add/improve the testability of the code or testing methods are highly sought!&lt;/p&gt;

&lt;p&gt;Note: Tests are written in C++ and linked with with firmware&amp;rsquo;s C code.&lt;/p&gt;

&lt;h3&gt;Running the tests.&lt;/h3&gt;

&lt;p&gt;The tests and test build system is very simple and based of the googletest example files, it will be improved in due course.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd test
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will build a set of executable files, one for each &lt;code&gt;*_unittest.cc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You can run them on the command line to execute the tests and to see the test report.&lt;/p&gt;

&lt;p&gt;You can also step-debug the tests in eclipse and you can use the GoogleTest test runner to make building and re-running the tests simple.&lt;/p&gt;

&lt;p&gt;The tests are currently always compiled with debugging information enabled, there may be additional warnings, if you see any warnings please attempt to fix them and submit pull requests with the fixes.&lt;/p&gt;

&lt;p&gt;Tests are verified and working with GCC 4.9.2.&lt;/p&gt;

&lt;h2&gt;Using git and github&lt;/h2&gt;

&lt;p&gt;Ensure you understand the github workflow: &lt;a href=&quot;https://guides.github.com/introduction/flow/index.html&quot;&gt;https://guides.github.com/introduction/flow/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please keep pull requests focused on one thing only, since this makes it easier to merge and test in a timely manner.&lt;/p&gt;

&lt;p&gt;If you need help with pull requests there are guides on github here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request/&quot;&gt;https://help.github.com/articles/creating-a-pull-request/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main flow for a contributing is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login to github, goto the cleanflight repository and press &lt;code&gt;fork&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then using the command line/terminal on your computer: &lt;code&gt;git clone &amp;lt;url to YOUR fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd cleanflight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-new-code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;files that have changed&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin my-new-code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create pull request using github UI to merge your changes from your new branch into &lt;code&gt;cleanflight/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat from step 4 for new other changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The primary thing to remember is that separate pull requests should be created for separate branches.  Never create a pull request from your &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Later, you can get the changes from the cleanflight repo into your &lt;code&gt;master&lt;/code&gt; branch by adding cleanflight as a git remote and merging from it as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add cleanflight https://github.com/cleanflight/cleanflight.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch cleanflight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge cleanflight/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt; is an optional step that will update your fork on github&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also perform the git commands using the git client inside Eclipse.  Refer to the Eclipse git manual.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Controls</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/controls"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/controls</id>
   <content type="html">&lt;h1&gt;Controls&lt;/h1&gt;

&lt;h2&gt;Arming&lt;/h2&gt;

&lt;p&gt;When armed, the aircraft is ready to fly and the motors will spin when throttle is applied.  The motors will 
spin at a slow speed when armed (this feature may be disabled by setting MOTOR_STOP, but for safety reasons,
that is not recommended).&lt;/p&gt;

&lt;p&gt;By default, arming and disarming is done using stick positions.  (NOTE: this feature is disabled when using a 
switch to arm.)&lt;/p&gt;

&lt;h2&gt;Stick Positions&lt;/h2&gt;

&lt;p&gt;The three stick positions are:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Position&lt;/th&gt;
&lt;th&gt;Approx. Channel Input&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The stick positions are combined to activate different functions:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Throttle&lt;/th&gt;
&lt;th&gt;Yaw&lt;/th&gt;
&lt;th&gt;Pitch&lt;/th&gt;
&lt;th&gt;Roll&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ARM&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DISARM&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profile 1&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profile 2&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profile 3&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calibrate Gyro&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calibrate Acc&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calibrate Mag/Compass&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inflight calibration controls&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trim Acc Left&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trim Acc Right&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trim Acc Forwards&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trim Acc Backwards&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disable LCD Page Cycling&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enable LCD Page Cycling&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;CENTER&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Save setting&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;HIGH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Download a graphic &lt;a href=&quot;https://multiwii.googlecode.com/svn/branches/Hamburger/MultiWii-StickConfiguration-23_v0-5772156649.pdf&quot;&gt;cheat sheet&lt;/a&gt; with Tx stick commands (the latest version can always be found 
&lt;a href=&quot;https://code.google.com/p/multiwii/source/browse/#svn%2Fbranches%2FHamburger&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Yaw control&lt;/h2&gt;

&lt;p&gt;While arming/disarming with sticks, your yaw stick will be moving to extreme values. In order to prevent your craft
from trying to yaw during arming/disarming while on the ground, your yaw input will not cause the craft to yaw when the
throttle is LOW (i.e. below the &lt;code&gt;min_check&lt;/code&gt; setting).&lt;/p&gt;

&lt;p&gt;For tricopters, you may want to retain the ability to yaw while on the ground, so that you can verify that your tail
servo is working correctly before takeoff. You can do this by setting &lt;code&gt;tri_unarmed_servo&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; on the CLI (this is the
default). If you are having issues with your tail rotor contacting the ground during arm/disarm, you can set this to
&lt;code&gt;0&lt;/code&gt; instead. Check this table to decide which setting will suit you:&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;5&quot;&gt;Is yaw control of the tricopter allowed?&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;Disarmed&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;Armed&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;&lt;th&gt;Throttle low&lt;/th&gt;&lt;th&gt;Throttle normal&lt;/th&gt;&lt;th&gt;Throttle low&lt;/th&gt;&lt;th&gt;Throttle normal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;tri_unarmed_servo = 0&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;tri_unarmed_servo = 1&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Configuration Storage</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/configuration-storage"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/configuration-storage</id>
   <content type="html">&lt;h1&gt;Configuration&lt;/h1&gt;

&lt;p&gt;The configuration in cleanflight is stored at the end of the flash ram, currently it uses 2KB of flash.&lt;/p&gt;

&lt;p&gt;Sometimes it&amp;rsquo;s necesaary to erase this during development.&lt;/p&gt;

&lt;h2&gt;Erasing&lt;/h2&gt;

&lt;p&gt;Generate a 2kb blank file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dd if=/dev/zero of=obj/blankconfig.bin bs=1024 count=2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Overwrite configuration using JLink&lt;/p&gt;

&lt;p&gt;Run JLink (OSX: &lt;code&gt;/Applications/SEGGER/JLink/JLinkExe&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Execute commands
&lt;code&gt;device &amp;lt;your device&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;STM32F303CB&lt;/code&gt;
&lt;code&gt;r&lt;/code&gt;
&lt;code&gt;h&lt;/code&gt; 
&lt;code&gt;loadbin obj/blankconfig.bin, &amp;lt;address&amp;gt;&lt;/code&gt;, address 128k device = 0x801F800, 256k device = 0x803f800
&lt;code&gt;r&lt;/code&gt; to Reboot FC.
&lt;code&gt;q&lt;/code&gt; to quit&lt;/p&gt;

&lt;p&gt;Example session&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ /Applications/SEGGER/JLink/JLinkExe
SEGGER J-Link Commander V4.90c (&amp;#39;?&amp;#39; for help)
Compiled Aug 29 2014 09:52:38
DLL version V4.90c, compiled Aug 29 2014 09:52:33
Firmware: J-Link ARM-OB STM32 compiled Aug 22 2012 19:52:04
Hardware: V7.00
S/N: -1 
Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull 
VTarget = 3.300V
Info: Could not measure total IR len. TDO is constant high.
Info: Could not measure total IR len. TDO is constant high.
No devices found on JTAG chain. Trying to find device on SWD.
Info: Found SWD-DP with ID 0x2BA01477
Info: Found Cortex-M4 r0p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: TPIU fitted.
Info: ETM fitted.
Cortex-M4 identified.
Target interface speed: 100 kHz
J-Link&amp;gt;device STM32F303CC
Info: Device &amp;quot;STM32F303CC&amp;quot; selected (256 KB flash, 32 KB RAM).
Reconnecting to target...
Info: Found SWD-DP with ID 0x2BA01477
Info: Found SWD-DP with ID 0x2BA01477
Info: Found Cortex-M4 r0p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: TPIU fitted.
Info: ETM fitted.
J-Link&amp;gt;r
Reset delay: 0 ms
Reset type NORMAL: Resets core &amp;amp; peripherals via SYSRESETREQ &amp;amp; VECTRESET bit.
J-Link&amp;gt;h
PC = 08001154, CycleCnt = 00000000
R0 = 00000000, R1 = 00000000, R2 = 00000000, R3 = 00000000
R4 = 00000000, R5 = 00000000, R6 = 00000000, R7 = 00000000
R8 = 00000000, R9 = 00000000, R10= 00000000, R11= 00000000
R12= 00000000
SP(R13)= 2000A000, MSP= 2000A000, PSP= 00000000, R14(LR) = FFFFFFFF
XPSR = 01000000: APSR = nzcvq, EPSR = 01000000, IPSR = 000 (NoException)
CFBP = 00000000, CONTROL = 00, FAULTMASK = 00, BASEPRI = 00, PRIMASK = 00
FPU regs: FPU not enabled / not implemented on connected CPU.
J-Link&amp;gt;loadbin obj/blankconfig.bin, 0x803f800
Downloading file [obj/blankconfig.bin]...
WARNING: CPU is running at low speed (7989 kHz).
Info: J-Link: Flash download: Flash programming performed for 1 range (2048 bytes)
Info: J-Link: Flash download: Total time needed: 1.254s (Prepare: 0.698s, Compare: 0.009s, Erase: 0.075s, Program: 0.405s, Verify: 0.005s, Restore: 0.059s)
O.K.
J-Link&amp;gt;r
Reset delay: 0 ms
Reset type NORMAL: Resets core &amp;amp; peripherals via SYSRESETREQ &amp;amp; VECTRESET bit.
J-Link&amp;gt;q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Configuration</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/configuration"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/configuration</id>
   <content type="html">&lt;h1&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Cleanflight is configured primarily using the Cleanflight Configurator GUI.&lt;/p&gt;

&lt;p&gt;Both the command line interface and GUI are accessible by connecting to a serial port on the target,
be it a USB virtual serial port, physical hardware UART port or a SoftSerial port.&lt;/p&gt;

&lt;p&gt;See the Serial section for more information and see the Board specific sections for details of the serial ports available on the board you are using.&lt;/p&gt;

&lt;p&gt;The GUI cannot currently configure all aspects of the system, the CLI must be used to enable or configure
some features and settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due to ongoing development, the fact that the GUI cannot yet backup all your settings and automatic chrome updates of the GUI app it is highly advisable to backup your settings (using the CLI) so that when a new version of the configurator or firmware is released you can re-apply your settings.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;GUI&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/cleanflight-gui.png&quot; alt=&quot;Cleanflight Gui&quot;&gt;&lt;/p&gt;

&lt;p&gt;The GUI tool is the preferred way of configuration.  The GUI tool also includes a terminal which
can be used to interact with the CLI.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cleanflight-configurator/enacoimjcgeinfnnnpajinjgmkahmfgb&quot;&gt;Cleanflight Configurator on Chrome store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you cannot use the latest version of the GUI to access the FC due to firmware compatibility issues you can still access the FC via the CLI to backup your settings, or you can install an old version of the configurator.&lt;/p&gt;

&lt;p&gt;Old versions of the configurator can be downloaded from the configurator releases page: &lt;a href=&quot;https://github.com/cleanflight/cleanflight-configurator/releases&quot;&gt;https://github.com/cleanflight/cleanflight-configurator/releases&lt;/a&gt;
See the README file that comes with the configurator for installation instructions.&lt;/p&gt;

&lt;h2&gt;CLI&lt;/h2&gt;

&lt;p&gt;Cleanflight can also be configured by a command line interface.&lt;/p&gt;

&lt;p&gt;See the CLI section of the documentation for more details.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cli</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/cli"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/cli</id>
   <content type="html">&lt;h1&gt;Command Line Interface (CLI)&lt;/h1&gt;

&lt;p&gt;Cleanflight has a command line interface (CLI) that can be used to change settings and configure the FC.&lt;/p&gt;

&lt;h2&gt;Accessing the CLI.&lt;/h2&gt;

&lt;p&gt;The CLI can be accessed via the GUI tool or via a terminal emulator connected to the CLI serial port.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect your terminal emulator to the CLI serial port (which, by default, is the same as the MSP serial port)&lt;/li&gt;
&lt;li&gt;Use the baudrate specified by msp_baudrate (115200 by default).&lt;/li&gt;
&lt;li&gt;Send a &lt;code&gt;#&lt;/code&gt; character.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To save your settings type in &amp;lsquo;save&amp;rsquo;, saving will reboot the flight controller.&lt;/p&gt;

&lt;p&gt;To exit the CLI without saving power off the flight controller or type in &amp;#39;exit&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;To see a list of other commands type in &amp;#39;help&amp;rsquo; and press return.&lt;/p&gt;

&lt;p&gt;To dump your configuration (including the current profile), use the &amp;#39;dump&amp;rsquo; command.&lt;/p&gt;

&lt;p&gt;See the other documentation sections for details of the cli commands and settings that are available.&lt;/p&gt;

&lt;h2&gt;Backup via CLI&lt;/h2&gt;

&lt;p&gt;Disconnect main power, connect to cli via USB/FTDI.&lt;/p&gt;

&lt;p&gt;dump using cli&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rateprofile 0
profile 0
dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dump profiles using cli if you use them&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;profile 1
dump profile
profile 2
dump profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dump rate profiles using cli if you use them&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rateprofile 1
dump rates
rateprofile 2
dump rates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;copy screen output to a file and save it.&lt;/p&gt;

&lt;h2&gt;Restore via CLI.&lt;/h2&gt;

&lt;p&gt;Use the cli &lt;code&gt;defaults&lt;/code&gt; command first.&lt;/p&gt;

&lt;p&gt;When restoring from a backup it is a good idea to do a dump of the latest defaults so you know what has changed - if you do this each time a firmware release is created youwill be able to see the cli changes between firmware versions.  For instance, in December 2014 the default GPS navigation PIDs changed.  If you blindly restore your backup you would not benefit from these new defaults.&lt;/p&gt;

&lt;p&gt;Use the CLI and send all the output from the saved backup commands.&lt;/p&gt;

&lt;p&gt;Do not send the file too fast, if you do the FC might not be able to keep up when using USART adapters (including built in ones) since there is no hardware serial flow control.&lt;/p&gt;

&lt;p&gt;You may find you have to copy/paste a few lines at a time.&lt;/p&gt;

&lt;p&gt;Repeat the backup process again!&lt;/p&gt;

&lt;p&gt;Compare the two backups to make sure you are happy with your restored settings.&lt;/p&gt;

&lt;p&gt;Re-apply any new defaults as desired.&lt;/p&gt;

&lt;h2&gt;CLI Command Reference&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;adjrange&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show/set adjustment ranges settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aux&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show/set aux settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;design custom mixer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;configure colors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;defaults&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;reset to defaults and reboot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;print configurable settings in a pastable form&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;feature&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;list or -val or val&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get variable value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gpspassthrough&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;passthrough gps to serial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;help&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;led&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;configure leds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;mapping of rc channel order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mixer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;mixer name or list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;motor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get/set motor output value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;play_sound&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;index, or none for next&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;index (0 to 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rateprofile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;index (0 to 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;save&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;save and reboot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name=value or blank or * for list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show system status&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;CLI Variable Reference&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Variable&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Description/Units&lt;/th&gt;
&lt;th&gt;Min&lt;/th&gt;
&lt;th&gt;Max&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Datatype&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;looptime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This is the main loop time (in us). Changing this affects PID effect with some PID controllers (see PID section for details). Default of 3500us/285Hz should work for everyone. Setting it to zero does not limit loop time, so it will go as fast as possible.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;3500&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;emf_avoidance&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Default value is 0 for 72MHz processor speed. Setting this to 1 increases the processor speed, to move the 6th harmonic away from 432MHz.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mid_rc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This is an important number to set in order to avoid trimming receiver/transmitter. Most standard receivers will have this at 1500, however Futaba transmitters will need this set to 1520. A way to find out if this needs to be changed, is to clear all trim/subtrim on transmitter, and connect to GUI. Note the value most channels idle at - this should be the number to choose. Once midrc is set, use subtrim on transmitter to make sure all channels (except throttle of course) are centered at midrc value.&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;min_check&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_check&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rssi_channel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rssi_scale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rssi_ppm_invert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;input_filtering_mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;min_throttle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are min/max values (in us) that are sent to esc when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1150&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_throttle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are min/max values (in us) that are sent to esc when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1850&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;min_command&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This is the PWM value sent to ESCs when they are not armed. If ESCs beep slowly when powered up, try decreasing this value. It can also be used for calibrating all ESCs at once.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;servo_center_pulse&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3d_deadband_low&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1406&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3d_deadband_high&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1514&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3d_neutral&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1460&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3d_deadband_throttle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;motor_pwm_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output frequency (in Hz) for motor pins. Defaults are 400Hz for motor. If setting above 500Hz, will switch to brushed (direct drive) motors mode. For example, setting to 8000 will use brushed mode at 8kHz switching frequency. Up to 32kHz is supported. Note, that in brushed mode, minthrottle is offset to zero. Default is 16000 for boards with brushed motors.&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;32000&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;servo_pwm_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output frequency (in Hz) servo pins. Default is 50Hz. When using tricopters or gimbal with digital servo, this rate can be increased. Max of 498Hz (for 500Hz pwm period), and min of 50Hz. Most digital servos will support for example 330Hz.&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;498&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;servo_lowpass_freq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Selects the servo PWM output cutoff frequency. Valid values range from 10 to 400. This is a fraction of the loop frequency in 1/1000ths. For example, &lt;code&gt;40&lt;/code&gt; means &lt;code&gt;0.040&lt;/code&gt;.  The cutoff frequency can be determined by the following formula: &lt;code&gt;Frequency = 1000 * servo_lowpass_freq / looptime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;servo_lowpass_enable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Disabled by default.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;retarded_arm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Disabled by default, enabling (setting to 1) allows disarming by throttle low + roll. This could be useful for mode-1 users and non-acro tricopters, where default arming by yaw could move tail servo too much.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disarm_kill_switch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enabled by default. Disarms the motors independently of throttle value. Setting to 0 reverts to the old behaviour of disarming only when the throttle is low. Only applies when arming and disarming with an AUX channel.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto_disarm_delay&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;small_angle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If the copter tilt angle exceed this value the copter will refuse to arm. default is 25°.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pid_at_min_throttle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If enabled, the copter will process the pid algorithm at minimum throttle.  Cannot be used when &lt;code&gt;retarded_arm&lt;/code&gt; is enabled.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flaps_speed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fixedwing_althold_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reboot_character&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_provider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_sbas_mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_auto_config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_auto_baud&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_pos_p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_pos_i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_pos_d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_posr_p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_posr_i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_posr_d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_nav_p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_nav_i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_nav_d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gps_wp_radius&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nav_controls_heading&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nav_speed_min&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nav_speed_max&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nav_slew_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;serialrx_provider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When feature SERIALRX is enabled, this allows connection to several receivers which output data via digital interface resembling serial. See RX section.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spektrum_sat_bind&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;telemetry_switch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Which aux channel to use to change serial output &amp;amp; baud rate (MSP / Telemetry). It disables automatic switching to Telemetry when armed.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;telemetry_inversion&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frsky_default_lattitude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-90&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frsky_default_longitude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-180&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frsky_coordinates_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frsky_unit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;battery_capacity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;20000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vbat_scale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Result is Vbatt in 0.1V steps. 3.3V = ADC Vref, 4095 = 12bit adc, 110 = 11:1 voltage divider (10k:1k) x 10 for 0.1V. Adjust this slightly if reported pack voltage is different from multimeter reading. You can get current voltage by typing &amp;ldquo;status&amp;rdquo;&amp;ldquo; in cli.&amp;rdquo;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vbat_max_cell_voltage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum voltage per cell, used for auto-detecting battery voltage in 0.1V units, default is 43 (4.3V)&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vbat_min_cell_voltage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Minimum voltage per cell, this triggers battery out alarms, in 0.1V units, default is 33 (3.3V)&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vbat_warning_cell_voltage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_meter_scale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This sets the output voltage to current scaling for the current sensor in 0.1 mV/A steps. 400 is 40mV/A such as the ACS756 sensor outputs. 183 is the setting for the Überdistro with a 0.25mOhm shunt.&lt;/td&gt;
&lt;td&gt;-10000&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_meter_offset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This sets the output offset voltage of the current sensor in millivolts.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3300&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multiwii_current_meter_output&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Default current output via MSP is in 0.01A steps. Setting this to 1 causes output in default multiwii scaling (1mA steps).&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;None defined!&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_meter_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_gyro&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. Default of zero means the driver determines alignment (and this generally means it&amp;rsquo;s configured for standard hardware). Default orientation of X forward, Y right, Z up is 1. After that, the numbers are as follows, and mean sensor is rotated. CW0_DEG=1, CW90_DEG=2, CW180_DEG=3, CW270_DEG=4, CW0_DEG_FLIP=5, CW90_DEG_FLIP=6, CW180_DEG_FLIP=7, CW270_DEG_FLIP=8. This should cover all orientations. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_acc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. Default of zero means the driver determines alignment (and this generally means it&amp;rsquo;s configured for standard hardware). Default orientation of X forward, Y right, Z up is 1. After that, the numbers are as follows, and mean sensor is rotated. CW0_DEG=1, CW90_DEG=2, CW180_DEG=3, CW270_DEG=4, CW0_DEG_FLIP=5, CW90_DEG_FLIP=6, CW180_DEG_FLIP=7, CW270_DEG_FLIP=8. This should cover all orientations. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_mag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. Default of zero means the driver determines alignment (and this generally means it&amp;rsquo;s configured for standard hardware). Default orientation of X forward, Y right, Z up is 1. After that, the numbers are as follows, and mean sensor is rotated. CW0_DEG=1, CW90_DEG=2, CW180_DEG=3, CW270_DEG=4, CW0_DEG_FLIP=5, CW90_DEG_FLIP=6, CW180_DEG_FLIP=7, CW270_DEG_FLIP=8. This should cover all orientations. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_board_roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Arbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc&lt;/td&gt;
&lt;td&gt;-180&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_board_pitch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Arbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc&lt;/td&gt;
&lt;td&gt;-180&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;align_board_yaw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Arbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc&lt;/td&gt;
&lt;td&gt;-180&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_angle_inclination&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This setting controls max inclination (tilt) allowed in angle (level) mode. default 500 (50 degrees).&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gyro_lpf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Hardware lowpass filter for gyro. Allowed values depend on the driver - For example MPU6050 allows 5,10,20,42,98,188,256Hz, while MPU3050 doesn&amp;rsquo;t allow 5Hz. If you have to set gyro lpf below 42Hz generally means the frame is vibrating too much, and that should be fixed first. Values outside of supported range will usually be ignored by drivers, and will configure lpf to default value of 42Hz.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;moron_threshold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When powering up, gyro bias is calculated. If the model is shaking/moving during this initial calibration, offsets are calculated incorrectly, and could lead to poor flying performance. This threshold (default of 32) means how much average gyro reading could differ before re-calibration is triggered.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gyro_cmpf_factor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This setting controls the Gyro Weight for the Gyro/Acc complementary filter.  Increasing this value reduces and delays Acc influence on the output of the filter.&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gyro_cmpfm_factor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This setting controls the Gyro Weight for the Gyro/Magnetometer complementary filter. Increasing this value reduces and delays the Magnetometer influence on the output of the filter.&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alt_hold_deadband&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alt_hold_fast_change&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;deadband&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are values (in us) by how much RC input can be different before it&amp;rsquo;s considered valid. For transmitters with jitter on outputs, this value can be increased. Defaults are zero, but can be increased up to 10 or so if rc inputs twitch while idle.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_deadband&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;These are values (in us) by how much RC input can be different before it&amp;rsquo;s considered valid. For transmitters with jitter on outputs, this value can be increased. Defaults are zero, but can be increased up to 10 or so if rc inputs twitch while idle.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;throttle_correction_value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The throttle_correction_value will be added to the throttle input. It will be maximal at the throttle_correction_angle and over, null when the copter is leveled and proportional in bewteen. The angle is set with 0.1 deg steps from 1 to 900, ie : 300 = 30.0 deg, 225 = 22.5 deg.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;throttle_correction_angle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The throttle_correction_value will be added to the throttle input. It will be maximal at the throttle_correction_angle and over, null when the copter is leveled and proportional in bewteen. The angle is set with 0.1 deg steps from 1 to 900, ie : 300 = 30.0 deg, 225 = 22.5 deg.&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_control_direction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_direction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_jump_prevention_limit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prevent yaw jumps during yaw stops. To disable set to 500.&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tri_unarmed_servo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;On tricopter mix only, if this is set to 1, servo will always be correcting regardless of armed state. to disable this, set it to 0.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;INT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_rate_profile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Default = profile number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rc_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rc_expo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rc_yaw_expo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thr_mid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thr_expo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;roll_pitch_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tpa_rate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Throttle PID attenuation reduces influence of P on ROLL and PITCH as throttle increases. For every 1% throttle after the TPA breakpoint, P is reduced by the TPA rate.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tpa_breakpoint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;See tpa_rate.&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;Rate Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;failsafe_delay&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;failsafe_off_delay&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;failsafe_throttle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rx_min_usec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines the shortest pulse width value used when ensuring the channel value is valid.  If the receiver gives a pulse value lower than this value then the channel will be marked as bad and will default to the value of &lt;code&gt;mid_rc&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;985&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rx_max_usec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines the longest pulse width value used when ensuring the channel value is valid.  If the receiver gives a pulse value higher than this value then the channel will be marked as bad and will default to the value of &lt;code&gt;mid_rc&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;2115&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gimbal_flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;When feature SERVO_TILT is enabled, this can be a combination of the following numbers: 1=normal gimbal (default), 2=tiltmix gimbal, 4=in PPM (or SERIALRX) input mode, this will forward AUX1..4 RC inputs to PWM5..8 pins&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;acc_hardware&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This is used to suggest which accelerometer driver should load, or to force no accelerometer in case gyro-only flight is needed. Default (0) will attempt to auto-detect among enabled drivers. Otherwise, to force a particular device, set it to 2 for ADXL345, 3 for MPU6050 integrated accelerometer, 4 for MMA8452, 5 for BMA280, 6 for LSM303DLHC, 7 for SPI_MPU6000, 8 for SPI_MPU6500 or 1 to disable accelerometer alltogether - resulting in gyro-only operation.&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;acc_lpf_factor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This setting controls the Low Pass Filter factor for ACC.  Increasing this value reduces ACC noise (visible in GUI), but would increase ACC lag time.  Zero = no filter&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;accxy_deadband&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;accz_deadband&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;accz_lpf_cutoff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;acc_unarmedcal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;acc_trim_pitch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;acc_trim_roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;baro_tab_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;baro_noise_lpf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;baro_cf_vel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.985&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;baro_cf_alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.965&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mag_hardware&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mag_declination&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current location magnetic declination in format. For example, -6deg 37min, = for Japan. Leading zero in ddd not required. Get your local magnetic declination here: &lt;a href=&quot;http://magnetic-declination.com/&quot;&gt;http://magnetic-declination.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-18000&lt;/td&gt;
&lt;td&gt;18000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;INT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pid_controller&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_pitch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_pitch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_pitch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_yaw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_yaw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_yaw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_pitchf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_pitchf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_pitchf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_rollf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_rollf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_rollf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_yawf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_yawf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_yawf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;level_horizon&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;level_angle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sensitivity_horizon&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p_vel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i_vel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d_vel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yaw_p_limit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limiter for yaw P term. This parameter is only affecting PID controller 3-5. To disable set to 500 (actual default).&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Profile&lt;/td&gt;
&lt;td&gt;UINT16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;blackbox_rate_num&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;blackbox_rate_denom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;UINT8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Buzzer</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/buzzer"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/buzzer</id>
   <content type="html">&lt;h1&gt;Buzzer&lt;/h1&gt;

&lt;p&gt;Cleanflight supports a buzzer which is used for the following purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Low and critical battery alarms (when battery monitoring enabled)&lt;/li&gt;
&lt;li&gt;Arm/disarm tones (and warning beeps while armed)&lt;/li&gt;
&lt;li&gt;Notification of calibration complete status&lt;/li&gt;
&lt;li&gt;TX-AUX operated beeping - useful for locating your aircraft after a crash&lt;/li&gt;
&lt;li&gt;Failsafe status&lt;/li&gt;
&lt;li&gt;Flight mode change&lt;/li&gt;
&lt;li&gt;Rate profile change (via TX-AUX switch)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the arm/disarm is via the control stick, holding the stick in the disarm position will sound a repeating tone.  This can be used as a lost-model locator.&lt;/p&gt;

&lt;p&gt;There is a special arming tone used if a GPS fix has been attained, and there&amp;rsquo;s a &amp;ldquo;ready&amp;rdquo; tone sounded after a GPS fix has been attained (only happens once).  The tone sounded via the TX-AUX-switch will count out the number of satellites (if GPS fix).&lt;/p&gt;

&lt;p&gt;The CLI command &lt;code&gt;play_sound&lt;/code&gt; is useful for demonstrating the buzzer tones. Repeatedly entering the command will play the various tones in turn. Entering the command with a numeric-index parameter will play the associated tone.&lt;/p&gt;

&lt;p&gt;Available buzzer tones include the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;RX_LOST_LANDING       Beeps SOS when armed and TX is turned off or signal lost (autolanding/autodisarm)
RX_LOST               Beeps when TX is turned off or signal lost (repeat until TX is okay)
DISARMING             Beep when disarming the board
ARMING                Beep when arming the board
ARMING_GPS_FIX        Beep a special tone when arming the board and GPS has fix
BAT_CRIT_LOW          Longer warning beeps when battery is critically low (repeats)
BAT_LOW               Warning beeps when battery is getting low (repeats)
RX_SET                Beeps when aux channel is set for beep or beep sequence how many satellites has found if GPS enabled
DISARM_REPEAT         Beeps sounded while stick held in disarm position
ACC_CALIBRATION       ACC inflight calibration completed confirmation
ACC_CALIBRATION_FAIL  ACC inflight calibration failed
READY_BEEP            Ring a tone when GPS is locked and ready
ARMED                 Warning beeps when board is armed (repeats until board is disarmed or throttle is increased)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Buzzer is enabled by default on platforms that have buzzer connections.&lt;/p&gt;

&lt;h2&gt;Types of buzzer supported&lt;/h2&gt;

&lt;p&gt;The buzzers are enabled/disabled by simply enabling or disabling a GPIO output pin on the board.
This means the buzzer must be able to generate its own tone simply by having power applied to it.&lt;/p&gt;

&lt;p&gt;Buzzers that need an analog or PWM signal do not work and will make clicking noises or no sound at all.&lt;/p&gt;

&lt;p&gt;Examples of a known-working buzzers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rapidonline.com/Audio-Visual/Hcm1205x-Miniature-Buzzer-5v-35-0055&quot;&gt;Hcm1205x Miniature Buzzer 5v&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.banggood.com/10Pcs-5V-Electromagnetic-Active-Buzzer-Continuous-Beep-Continuously-p-943524.html&quot;&gt;5V Electromagnetic Active Buzzer Continuous Beep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.radioshack.com/pc-board-12vdc-70db-piezo-buzzer/2730074.html#.VIAtpzHF_Si&quot;&gt;Radio Shack Model: 273-074 PC-BOARD 12VDC (3-16v) 70DB PIEZO BUZZER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;h3&gt;Naze32&lt;/h3&gt;

&lt;p&gt;Connect a supported buzzer directly to the BUZZ pins. Observe polarity. Also if you are working with flight controller outside of a craft, on a bench for example, you need to supply 5 volts and ground to one of the ESC connections or the buzzer will not function.&lt;/p&gt;

&lt;h3&gt;CC3D&lt;/h3&gt;

&lt;p&gt;Buzzer support on the CC3D requires that a buzzer circuit be created to which the input is PA15.
PA15 is unused and not connected according to the CC3D Revision A schematic.
Connecting to PA15 requires careful soldering.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;Wiring/CC3D%20-%20buzzer%20circuit.pdf&quot;&gt;CC3D - buzzer circuit.pdf&lt;/a&gt; for details.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building Manual</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/building-manual"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/building-manual</id>
   <content type="html">&lt;h1&gt;Building Manual.&lt;/h1&gt;

&lt;p&gt;The manual PDF file is generated by concatenating relevant markdown files and by transforming the result using Gimli to obtain the final PDF file. This steps are handled automatically by the &lt;code&gt;build_manual.sh&lt;/code&gt; script located in the root of the repository next to the Makefile.&lt;/p&gt;

&lt;h2&gt;Requrements &amp;amp; Installation&lt;/h2&gt;

&lt;p&gt;The PDF manual generation uses the Gimli for the conversion. It can be installed via ruby gems. On Debian based systems the installation steps are:
&lt;code&gt;bash
    sudo apt-get install ruby1.9.1 ruby1.9.1-dev rubygems zlib1g-dev wkhtmltopdf libxml2-dev libxslt-dev
    sudo sudo gem1.9.1 install gimli
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;All markdown files need to be registered in the &lt;code&gt;build_manual.sh&lt;/code&gt; file individually by modifying the &lt;code&gt;doc_files&lt;/code&gt; variable / array:
&lt;code&gt;bash
doc_files=( &amp;#39;Configuration.md&amp;#39;
    &amp;#39;Board - CC3D.md&amp;#39;
    &amp;#39;...&amp;#39;
    &amp;#39;...&amp;#39;
)
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building In Windows</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/building-in-windows"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/building-in-windows</id>
   <content type="html">&lt;h1&gt;Building in windows&lt;/h1&gt;

&lt;h2&gt;Setup Cygwin&lt;/h2&gt;

&lt;p&gt;download the Setup*.exe from &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;https://www.cygwin.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/001.cygwin_dl.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;Execute the download Setup and step through the installation  wizard (no need to customize the settings here). Stop at the  &amp;ldquo;Select Packages&amp;rdquo; Screen and select the following Packages
for Installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Devel/git&lt;/li&gt;
&lt;li&gt;Devel/git-completion (Optional)&lt;/li&gt;
&lt;li&gt;Devel/make&lt;/li&gt;
&lt;li&gt;Devel/binutils&lt;/li&gt;
&lt;li&gt;Editors/vim&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Editors/vim-common (Optional)&lt;/li&gt;
&lt;li&gt;Shells/mintty (should be already selected)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/002.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/003.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/004.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/005.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/006.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;p&gt;Continue with the Installation and accept all autodetected dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/007.cygwin_setup.png&quot; alt=&quot;Cygwin Installation&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Setup GNU ARM Toolchain&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;versions do matter, 4.8-2014-q2 is known to work well. Download this version from &lt;a href=&quot;https://launchpad.net/gcc-arm-embedded/+download&quot;&gt;https://launchpad.net/gcc-arm-embedded/+download&lt;/a&gt; - preferrebly as a ZIP-File. &lt;/p&gt;

&lt;p&gt;Extract the contents of this archive to any folder of your choice, for instance &lt;code&gt;C:\dev\gcc-arm-none-eabi-4_8-2014q2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/008.toolchain.png&quot; alt=&quot;GNU ARM Toolchain Setup&quot;&gt;&lt;/p&gt;

&lt;p&gt;add the &amp;ldquo;bin&amp;rdquo; subdirectory to the PATH Windows environment variable: &lt;code&gt;%PATH%;C:\dev\gcc-arm-none-eabi-4_8-2014q2\bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/009.toolchain_path.png&quot; alt=&quot;GNU ARM Toolchain Setup&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/010.toolchain_path.png&quot; alt=&quot;GNU ARM Toolchain Setup&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Checkout and compile Cleanflight&lt;/h2&gt;

&lt;p&gt;Head over to the Cleanflight Github page and grab the URL of the GIT Repository: &amp;ldquo;&lt;a href=&quot;https://github.com/cleanflight/cleanflight.git&quot;&gt;https://github.com/cleanflight/cleanflight.git&lt;/a&gt;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Open the Cygwin-Terminal, navigate to your development folder and use the git commandline to checkout the repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd /cygdrive/c/dev
git clone https://github.com/cleanflight/cleanflight.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/011.git_checkout.png&quot; alt=&quot;GIT Checkout&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/012.git_checkout.png&quot; alt=&quot;GIT Checkout&quot;&gt;&lt;/p&gt;

&lt;p&gt;To compile your Cleanflight binaries, enter the cleanflight directory and build the project using the make command. You can append TARGET=[HARDWARE] if you want to build anything other than the default NAZE target:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd cleanflight
make TARGET=NAZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/013.compile.png&quot; alt=&quot;GIT Checkout&quot;&gt;&lt;/p&gt;

&lt;p&gt;within few moments you should have your binary ready:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(...)
arm-none-eabi-size ./obj/main/cleanflight_NAZE.elf
   text    data     bss     dec     hex filename
  95388     308   10980  106676   1a0b4 ./obj/main/cleanflight_NAZE.elf
arm-none-eabi-objcopy -O ihex --set-start 0x8000000 obj/main/cleanflight_NAZE.elf obj/cleanflight_NAZE.hex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use the Cleanflight-Configurator to flash the &lt;code&gt;obj/cleanflight_NAZE.hex&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Updating and rebuilding&lt;/h2&gt;

&lt;p&gt;Navigate to the local cleanflight repository and use the following steps to pull the latest changes and rebuild your version of cleanflight:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd /cygdrive/c/dev/cleanflight
git reset --hard
git pull
make clean TARGET=NAZE
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Building In Ubuntu</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/building-in-ubuntu"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/building-in-ubuntu</id>
   <content type="html">&lt;h1&gt;Building in Ubuntu&lt;/h1&gt;

&lt;p&gt;Building for Ubuntu platform is remarkably easy. The only trick to understand is that the Ubuntu toolchain,
which they are downstreaming from Debian, is not compatible with Cleanflight. We suggest that you take an
alternative PPA from Terry Guo, found here:
&lt;a href=&quot;https://launchpad.net/%7Eterry.guo/+archive/ubuntu/gcc-arm-embedded&quot;&gt;https://launchpad.net/~terry.guo/+archive/ubuntu/gcc-arm-embedded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This PPA has several compiler versions and platforms available. For many hardware platforms (notably Naze)
the 4.9.3 compiler will work fine. For some, older compiler 4.8 (notably Sparky) is more appropriate. We
suggest you build with 4.9.3 first, and try to see if you can connect to the CLI or run the Configurator.
If you cannot, please see the section below for further hints on what you might do.&lt;/p&gt;

&lt;h2&gt;Setup GNU ARM Toolchain&lt;/h2&gt;

&lt;p&gt;Note specifically the last paragraph of Terry&amp;rsquo;s PPA documentation &amp;ndash; Ubuntu carries its own package for
&lt;code&gt;gcc-arm-none-eabi&lt;/code&gt;, so you&amp;rsquo;ll have to remove it, and then pin the one from the PPA.
For your release, you should first remove any older pacakges (from Debian or Ubuntu directly), introduce
Terry&amp;rsquo;s PPA, and update:
&lt;code&gt;
sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi
sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded
sudo apt-get update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Ubuntu 14.10 (current release, called Utopic Unicorn), you should pin:
&lt;code&gt;
sudo apt-get install gcc-arm-none-eabi=4.9.3.2014q4-0utopic12
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Ubuntu 14.04 (an LTS as of Q1&amp;#39;2015, called Trusty Tahr), you should pin:
&lt;code&gt;
sudo apt-get install gcc-arm-none-eabi=4.9.3.2014q4-0trusty12
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Ubuntu 12.04 (previous LTS, called Precise Penguin), you should pin:
&lt;code&gt;
sudo apt-get install gcc-arm-none-eabi=4.9.3.2014q4-0precise12
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Building on Ubuntu&lt;/h2&gt;

&lt;p&gt;After the ARM toolchain from Terry is installed, you should be able to build from source.
&lt;code&gt;
cd src
git clone git@github.com:cleanflight/cleanflight.git
cd cleanflight
make TARGET=NAZE
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see a set of files being compiled, and finally linked, yielding both an ELF and then a HEX:
&lt;code&gt;
...
arm-none-eabi-size ./obj/main/cleanflight_NAZE.elf 
   text    data     bss     dec     hex filename
  97164     320   11080  108564   1a814 ./obj/main/cleanflight_NAZE.elf
arm-none-eabi-objcopy -O ihex --set-start 0x8000000 obj/main/cleanflight_NAZE.elf obj/cleanflight_NAZE.hex
$ ls -la obj/cleanflight_NAZE.hex                                                                                                                                                 
-rw-rw-r-- 1 pim pim 274258 Jan 12 21:45 obj/cleanflight_NAZE.hex
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can use the Cleanflight-Configurator to flash the &lt;code&gt;obj/cleanflight_NAZE.hex&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Bricked/Bad build?&lt;/h2&gt;

&lt;p&gt;Users have reported that the 4.9.3 compiler for ARM produces bad builds, for example on the Sparky hardware platform.
It is very likely that using an older compiler would be fine &amp;ndash; Terry happens to have also a 4.8 2014q2 build in his
PPA - to install this, you can fetch the &lt;code&gt;.deb&lt;/code&gt; directly:
&lt;a href=&quot;http://ppa.launchpad.net/terry.guo/gcc-arm-embedded/ubuntu/pool/main/g/gcc-arm-none-eabi/&quot;&gt;http://ppa.launchpad.net/terry.guo/gcc-arm-embedded/ubuntu/pool/main/g/gcc-arm-none-eabi/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and use &lt;code&gt;dpkg&lt;/code&gt; to install:
&lt;code&gt;
sudo dpkg -i gcc-arm-none-eabi_4-8-2014q2-0saucy9_amd64.deb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to remove &lt;code&gt;obj/&lt;/code&gt; and &lt;code&gt;make clean&lt;/code&gt;, before building again.&lt;/p&gt;

&lt;h2&gt;Updating and rebuilding&lt;/h2&gt;

&lt;p&gt;Navigate to the local cleanflight repository and use the following steps to pull the latest changes and rebuild your version of cleanflight:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd src/cleanflight
git reset --hard
git pull
make clean TARGET=NAZE
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Credit goes to K.C. Budd, AKfreak for testing, and pulsar for doing the long legwork that yielded this very short document.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building In Mac Os X</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/building-in-mac-os-x"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/building-in-mac-os-x</id>
   <content type="html">&lt;h1&gt;Building in Mac OS X&lt;/h1&gt;

&lt;p&gt;Building in Mac OS X can be accomplished in just a few steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install general development tools (clang, make, git)&lt;/li&gt;
&lt;li&gt;Install ARM GCC 4.8 series compiler&lt;/li&gt;
&lt;li&gt;Checkout Cleanflight sourcecode through git&lt;/li&gt;
&lt;li&gt;Build the code&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Install general development tools (clang, make, git)&lt;/h2&gt;

&lt;p&gt;Open up a terminal and run &lt;code&gt;make&lt;/code&gt;. If it is installed already, you should see a message like this, which means that you
already have the required development tools installed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;make: *** No targets specified and no makefile found.  Stop.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it isn&amp;rsquo;t installed yet, you might get a popup like this. If so, click the &amp;ldquo;install&amp;rdquo; button to install the commandline
developer tools:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/mac-prompt-tools-install.png&quot; alt=&quot;Prompt to install developer tools&quot;&gt;&lt;/p&gt;

&lt;p&gt;If you just get an error like this instead of a helpful popup prompt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-bash: make: command not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try running &lt;code&gt;xcode-select --install&lt;/code&gt; instead to trigger the popup.&lt;/p&gt;

&lt;p&gt;If that doesn&amp;rsquo;t work, you&amp;rsquo;ll need to install the XCode development environment &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835&quot;&gt;from the App Store&lt;/a&gt;. After
installation, open up XCode and enter its preferences menu. Go to the &amp;ldquo;downloads&amp;rdquo; tab and install the 
&amp;ldquo;command line tools&amp;rdquo; package.&lt;/p&gt;

&lt;h2&gt;Install ARM GCC 4.8 series compiler&lt;/h2&gt;

&lt;p&gt;Cleanflight is built using the 4.8 series GCC compiler provided by the &lt;a href=&quot;https://launchpad.net/gcc-arm-embedded&quot;&gt;GNU Tools for ARM Embedded Processors project&lt;/a&gt;.
The newest &amp;ldquo;4.9&amp;rdquo; series compiler produces builds that don&amp;rsquo;t boot on CC3D and Sparky targets (and perhaps others), so it&amp;rsquo;s
better to use the older 4.8 compiler for the moment.&lt;/p&gt;

&lt;p&gt;Hit the &amp;ldquo;all downloads&amp;rdquo; link on the right side of the GNU Tools for ARM page to view &lt;a href=&quot;https://launchpad.net/gcc-arm-embedded/+download&quot;&gt;the older releases&lt;/a&gt;. Grab the
Mac installation tarball for the latest version in the 4.8 series (e.g. 4.8-2014-q3-update). Move it somewhere useful 
such as a &lt;code&gt;~/development&lt;/code&gt; folder (in your home directory) and double click it to unpack it. You should end up with a 
folder called &lt;code&gt;~/development/gcc-arm-none-eabi-4_8-2014q3/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you just need to add the &lt;code&gt;bin/&lt;/code&gt; directory from inside the GCC directory to your system&amp;rsquo;s path. Run &lt;code&gt;nano ~/.profile&lt;/code&gt;. Add a
new line at the end of the file which adds the path for the &lt;code&gt;bin/&lt;/code&gt; folder to your path, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PATH=$PATH:~/development/gcc-arm-none-eabi-4_8-2014q3/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Press CTRL+X to exit nano, and answer &amp;ldquo;y&amp;rdquo; when prompted to save your changes.&lt;/p&gt;

&lt;p&gt;Now &lt;em&gt;close this terminal window&lt;/em&gt; and open a new one. Try running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;arm-none-eabi-gcc --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should get output similar to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 4.8.4 20140725 (release) [ARM/embedded-4_8-branch revision 213147]
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;arm-none-eabi-gcc&lt;/code&gt; couldn&amp;rsquo;t be found, go back and check that you entered the correct path in your &lt;code&gt;~/.profile&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Checkout CleanFlight sourcecode through git&lt;/h2&gt;

&lt;p&gt;Enter your development directory and clone the &lt;a href=&quot;https://github.com/cleanflight/cleanflight&quot;&gt;Cleanflight repository&lt;/a&gt; using the &amp;ldquo;HTTPS clone URL&amp;rdquo; which is shown on
the right side of the Cleanflight GitHub page, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/cleanflight/cleanflight.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the entire Cleanflight repository for you into a new folder called &amp;ldquo;cleanflight&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;Build the code&lt;/h2&gt;

&lt;p&gt;Enter the cleanflight directory and run &lt;code&gt;make TARGET=NAZE&lt;/code&gt; to build firmware for the Naze32. When the build completes,
the .hex firmware should be available as &lt;code&gt;obj/cleanflight_NAZE.hex&lt;/code&gt; for you to flash using the Cleanflight
Configurator.&lt;/p&gt;

&lt;h2&gt;Updating to the latest source&lt;/h2&gt;

&lt;p&gt;If you want to erase your local changes and update to the latest version of the Cleanflight source, enter your
cleanflight directory and run these commands to first erase your local changes, fetch and merge the latest
changes from the repository, then rebuild the firmware:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git reset --hard
git pull

make clean TARGET=NAZE
make TARGET=NAZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or in the case of CC3D in need of a &lt;code&gt;obj/cleanflight_CC3D.bin&lt;/code&gt;
&lt;code&gt;
make clean TARGET=CC3D
make TARGET=CC3D OPBL=yes
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building In Eclipse</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/building-in-eclipse"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/building-in-eclipse</id>
   <content type="html">&lt;h1&gt;Short Version&lt;/h1&gt;

&lt;p&gt;Install the latest Eclipse Standard/SDK and install the &lt;strong&gt;C/C++ developments Tools&lt;/strong&gt; plugins
&lt;img src=&quot;http://i.imgur.com/IdJ8ki1.png&quot; alt=&quot;plugin eclipse&quot;&gt;&lt;/p&gt;

&lt;p&gt;Import the project using the wizard &lt;strong&gt;Existing Code as Makefile Project&lt;/strong&gt;
&lt;img src=&quot;http://i.imgur.com/XsVCwe2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Adjust your build option if necessary
&lt;img src=&quot;https://camo.githubusercontent.com/64a1d32400d6be64dd4b5d237df1e7f1b817f61b/687474703a2f2f692e696d6775722e636f6d2f6641306d30784d2e706e67&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have a valid ARM toolchain in the path
&lt;img src=&quot;http://i.imgur.com/dAbscJo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Long version&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;First you need an ARM toolchain. Good choices are &lt;strong&gt;GCC ARM Embedded&lt;/strong&gt; (&lt;a href=&quot;https://launchpad.net/gcc-arm-embedded&quot;&gt;https://launchpad.net/gcc-arm-embedded&lt;/a&gt;) or &lt;strong&gt;Yagarto&lt;/strong&gt; (&lt;a href=&quot;http://www.yagarto.de&quot;&gt;http://www.yagarto.de&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Now download Eclipse and unpack it somewhere. At the time of writing Eclipse 4.2 was the latest stable version.&lt;/li&gt;
&lt;li&gt;To work with ARM projects in Eclipse you need a few plugins:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eclipse C Development Tools&lt;/strong&gt; (CDT) (available via &lt;em&gt;Help &amp;gt; Install new Software&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zylin Embedded CDT Plugin&lt;/strong&gt; (&lt;a href=&quot;http://opensource.zylin.com/embeddedcdt.html&quot;&gt;http://opensource.zylin.com/embeddedcdt.html&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GNU ARM Eclipse&lt;/strong&gt; (&lt;a href=&quot;http://sourceforge.net/projects/gnuarmeclipse/&quot;&gt;http://sourceforge.net/projects/gnuarmeclipse/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;If you want to hook up an SWD debugger you also need the &lt;strong&gt;GDB Hardware Debugging&lt;/strong&gt; plugin (Also available via &lt;em&gt;Install new Software&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Now clone the project to your harddrive.&lt;/li&gt;
&lt;li&gt;Create a new C project in Eclipse and choose ARM Cross Target Application and your ARM toolchain.&lt;/li&gt;
&lt;li&gt;Import the Git project into the C project in Eclipse via &lt;em&gt;File &amp;gt; Import &amp;gt; General &amp;gt; File System&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Activate Git via &lt;em&gt;Project &amp;gt; Team &amp;gt; Share Project&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Switch to the master branch in Eclipse (&lt;em&gt;Project &amp;gt; Team &amp;gt; Switch To &amp;gt; master&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;The next thing you need to do is adjust the project configuration. There is a Makefile included that works but you might want to use GNU ARM Eclipse&amp;rsquo;s automatic Makefile generation. Open the Project configuration and go to &lt;em&gt;C/C++ Build &amp;gt; Settings&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;Under &lt;em&gt;Target Processor&lt;/em&gt; choose &amp;ldquo;cortex-m3&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;ARM Yagarto [Windows/Mac OS] Linker &amp;gt; General&lt;/em&gt; (or whatever toolchain you chose)

&lt;ul&gt;
&lt;li&gt;Browse to the Script file &lt;em&gt;stm32_flash.ld&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Uncheck &amp;ldquo;Do not use standard start files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Remove unused sections&amp;rdquo;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;ARM Yagarto [Windows/Mac OS] Linker &amp;gt; Libraries&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;Add &amp;ldquo;m&amp;rdquo; for the math library&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;ARM Yagarto [Windows/Mac OS] Compiler &amp;gt; Preprocessor&lt;/em&gt; add the following 2 items to &amp;ldquo;Defined Symbols&amp;rdquo;:

&lt;ul&gt;
&lt;li&gt;STM32F10X_MD&lt;/li&gt;
&lt;li&gt;USE_STDPERIPH_DRIVER&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;ARM Yagarto [Windows/Mac OS] Compiler &amp;gt; Directories&lt;/em&gt; add the following 3 items

&lt;ul&gt;
&lt;li&gt;${workspace_loc:/${ProjName}/lib/CMSIS/CM3/CoreSupport}&lt;/li&gt;
&lt;li&gt;${workspace_loc:/${ProjName}/lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x}&lt;/li&gt;
&lt;li&gt;${workspace_loc:/${ProjName}/lib/STM32F10x_StdPeriph_Driver/inc}&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;ARM Yagarto [Windows/Mac OS] Compiler &amp;gt; Miscellaneous&lt;/em&gt; add the following item to &amp;ldquo;Other flags&amp;rdquo;:

&lt;ul&gt;
&lt;li&gt;-fomit-frame-pointer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The code in the support directory is for uploading firmware to the board and is meant for your host machine. Hence, it must not be included in the build process. Just right-click on it to open its properties and choose &amp;ldquo;Exclude from build&amp;rdquo; under &lt;em&gt;C/C++ Build &amp;gt; Settings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The last thing you need to do is adding your toolchain to the PATH environment variable.

&lt;ul&gt;
&lt;li&gt;Go to &lt;em&gt;Project &amp;gt; Properties &amp;gt; C/C++ Build &amp;gt; Environment&lt;/em&gt;, add a variable named &amp;ldquo;PATH&amp;rdquo; and fill in the full path of your toolchain&amp;rsquo;s binaries.&lt;/li&gt;
&lt;li&gt;Make sure &amp;ldquo;Append variables to native environment&amp;rdquo; is selected.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Try to build the project via &lt;em&gt;Project &amp;gt; Build Project&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&amp;rsquo;re getting &amp;ldquo;&amp;hellip;could not be resolved&amp;rdquo; errors for data types like int32_t etc. try to disable and re-enable the Indexer under &lt;em&gt;Project &amp;gt; Properties &amp;gt; C/C++ General &amp;gt; Indexer&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Boards</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/boards"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/boards</id>
   <content type="html">&lt;h1&gt;Flight controller hardware&lt;/h1&gt;

&lt;p&gt;The current focus is geared towards flight controller hardware that use the STM32F103 and STM32F303 series processors.  The core logic is separated from the hardware drivers, porting to other processors is possible.&lt;/p&gt;

&lt;p&gt;The core set of supported flyable boards are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CC3D&lt;/li&gt;
&lt;li&gt;CJMCU&lt;/li&gt;
&lt;li&gt;Flip32+&lt;/li&gt;
&lt;li&gt;Naze32&lt;/li&gt;
&lt;li&gt;Sparky&lt;/li&gt;
&lt;li&gt;AlienWii32&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cleanflight also runs on the following developer boards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;STM32F3Discovery&lt;/li&gt;
&lt;li&gt;Port103R&lt;/li&gt;
&lt;li&gt;EUSTM32F103RB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also limited support for the following boards which may be removed due to lack of users or commercial availability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Olimexino&lt;/li&gt;
&lt;li&gt;Naze32Pro&lt;/li&gt;
&lt;li&gt;STM32F3Discovery with Chebuzz F3 shield.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each board has it&amp;rsquo;s pros and cons, before purchasing hardware the main thing to check is if the board offers enough serial ports and input/output pins for the hardware you want to use with it and that you can use them at the same time.  On some boards some features are mutually exclusive.&lt;/p&gt;

&lt;p&gt;Please see the board-specific chapters in the manual for wiring details.&lt;/p&gt;

&lt;p&gt;There are off-shoots (forks) of the project that support the STM32F4 processors as found on the Revo and Quanton boards.&lt;/p&gt;

&lt;p&gt;Where applicable the chapters also provide links to other hardware that is known to work with Cleanflight, such as receivers, buzzers, etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Sparky</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---sparky"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---sparky</id>
   <content type="html">&lt;h1&gt;Board - Sparky&lt;/h1&gt;

&lt;p&gt;The Sparky is a very low cost and very powerful board.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 hardware serial ports.&lt;/li&gt;
&lt;li&gt;Built-in serial port inverters which allows S.BUS receivers to be used without external inverters.&lt;/li&gt;
&lt;li&gt;USB (can be used at the same time as the serial ports).&lt;/li&gt;
&lt;li&gt;10 PWM outputs.&lt;/li&gt;
&lt;li&gt;Dedicated PPM/SerialRX input pin.&lt;/li&gt;
&lt;li&gt;MPU9150 I2C Acc/Gyro/Mag&lt;/li&gt;
&lt;li&gt;Baro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tested with revision 1 &amp;amp; 2 boards. &lt;/p&gt;

&lt;h2&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sonar&lt;/li&gt;
&lt;li&gt;Display (via Flex port)&lt;/li&gt;
&lt;li&gt;SoftSerial - though having 3 hardware serial ports makes it a little redundant.&lt;/li&gt;
&lt;li&gt;Airplane PWM mappings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Voltage and current monitoring (ADC support)&lt;/h1&gt;

&lt;p&gt;Voltage monitoring is possible when enabled via PWM9 pin and current can be monitored via PWM8 pin. The voltage divider and current sensor need to be connected externally. The vbatscale cli parameter need to be adjusted to fit the sensor specification. For more details regarding the sensor hardware you can check here: &lt;a href=&quot;https://github.com/TauLabs/TauLabs/wiki/User-Guide:-Battery-Configuration&quot;&gt;https://github.com/TauLabs/TauLabs/wiki/User-Guide:-Battery-Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Flashing&lt;/h1&gt;

&lt;h2&gt;Via Device Firmware Upload (DFU, USB) - Windows&lt;/h2&gt;

&lt;p&gt;These instructions are for flashing the Sparky board under Windows using DfuSE.
Credits go to Thomas Shue (Full video of the below steps can be found here: &lt;a href=&quot;https://www.youtube.com/watch?v=I4yHiRVRY94&quot;&gt;https://www.youtube.com/watch?v=I4yHiRVRY94&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Required Software:
DfuSE Version 3.0.2 (latest version 3.0.4 causes errors): &lt;a href=&quot;http://code.google.com/p/multipilot32/downloads/detail?name=DfuSe.rar&quot;&gt;http://code.google.com/p/multipilot32/downloads/detail?name=DfuSe.rar&lt;/a&gt;
STM VCP Driver 1.4.0: &lt;a href=&quot;http://www.st.com/web/en/catalog/tools/PF257938&quot;&gt;http://www.st.com/web/en/catalog/tools/PF257938&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A binary file is required for DFU, not a .hex file.  If one is not included in the release then build one as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Unpack DfuSE and the STM VCP Drivers into a folder on your Hardrive
Download the latest Sparky release (cleanflight_SPARKY.hex) from:
https://github.com/cleanflight/cleanflight/releases and store it on your Hardrive

In your DfuSE folder go to BIN and start DfuFileMgr.exe
Select: &amp;quot;I want to GENERATE a DFUfile from S19,HEX or BIN files&amp;quot; press OK
Press: &amp;quot;S19 or Hex..&amp;quot; 
Go to the folder where you saved the cleanflight_SPARKY.hex file, select it  and press open
(you might need to change the filetype in the DfuSE explorer window to &amp;quot;hex Files (*.hex)&amp;quot; to be able to see the file)
Press: &amp;quot;Generate&amp;quot; and select the .dfu output file and location
If all worked well you should see &amp;quot; Success for &amp;#39;Image for lternate Setting 00 (ST..)&amp;#39;!&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put the device into DFU mode by powering on the sparky with the bootloader pins temporarily bridged.  The only light that should come on is the blue PWR led.&lt;/p&gt;

&lt;p&gt;Check the windows device manager to make sure the board is recognized correctly.
It should show up as &amp;ldquo;STM Device in DFU mode&amp;rdquo; under Universal Serial Bus Controllers&lt;/p&gt;

&lt;p&gt;If it shows up as &amp;ldquo;STMicroelectronics Virtual COM&amp;rdquo; under Ports (COM &amp;amp; LPT) instead then the board is not in DFU mode. Disconnect the board, short the bootloader pins again while connecting the board.&lt;/p&gt;

&lt;p&gt;If the board shows up as &amp;ldquo;STM 32 Bootloader&amp;rdquo; device in the device manager, the drivers need to be updated manually.
Select the device in the device manager, press &amp;ldquo;update drivers&amp;rdquo;, select &amp;ldquo;manual update drivers&amp;rdquo; and choose the location where you extracted the STM VCP Drivers, select &amp;ldquo;let me choose which driver to install&amp;rdquo;. You shoud now be able to select either the STM32 Bootloader driver or the STM in DFU mode driver. Select the later and install.&lt;/p&gt;

&lt;p&gt;Then flash the binary as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;In your DfuSE folder go to BIN and start DfuSeDemo.exe
Select the Sparky Board (STM in DFU Mode) from the Available DFU and compatible HID Devices drop down list
Press &amp;quot;Choose..&amp;quot; at the bootom of the window and select the .dfu file created in the previous step
&amp;quot;File correctly loaded&amp;quot; should appear in the status bar
Press &amp;quot;Upgrade&amp;quot; and confirm with &amp;quot;Yes&amp;quot;
The status bar will show the upload progress and confirm that the upload is complete at the end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Disconnect and reconnect the board from USB and continue to configure it via the Cleanflight configurator as per normal&lt;/p&gt;

&lt;h2&gt;Via Device Firmware Upload (DFU, USB) - Mac OS X / Linux&lt;/h2&gt;

&lt;p&gt;These instructions are for dfu-util, tested using dfu-util 0.7 for OSX from the OpenTX project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-tx.org/2013/07/15/dfu-util-07-for-mac-taranis-flashing-utility/&quot;&gt;http://www.open-tx.org/2013/07/15/dfu-util-07-for-mac-taranis-flashing-utility/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A binary file is required for DFU, not a .hex file.  If one is not included in the release then build one as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;make TARGET=SPARKY clean
make TARGET=SPARKY binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put the device into DFU mode by powering on the sparky with the bootloader pins temporarily bridged.  The only light that should come on is the blue PWR led.&lt;/p&gt;

&lt;p&gt;Run &amp;lsquo;dfu-util -l&amp;rsquo; to make sure the device is listed, as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dfu-util -l
dfu-util 0.7

Copyright 2005-2008 Weston Schmidt, Harald Welte and OpenMoko Inc.
Copyright 2010-2012 Tormod Volden and Stefan Schmidt
This program is Free Software and has ABSOLUTELY NO WARRANTY
Please report bugs to dfu-util@lists.gnumonks.org

Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=0, name=&amp;quot;@Internal Flash  /0x08000000/128*0002Kg&amp;quot;
Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=1, name=&amp;quot;@Option Bytes  /0x1FFFF800/01*016 e&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then flash the binary as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dfu-util -D obj/cleanflight_SPARKY.bin --alt 0 -R -s 0x08000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output should be similar to this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dfu-util 0.7

Copyright 2005-2008 Weston Schmidt, Harald Welte and OpenMoko Inc.
Copyright 2010-2012 Tormod Volden and Stefan Schmidt
This program is Free Software and has ABSOLUTELY NO WARRANTY
Please report bugs to dfu-util@lists.gnumonks.org

Opening DFU capable USB device... ID 0483:df11
Run-time device DFU version 011a
Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=0, name=&amp;quot;@Internal Flash  /0x08000000/128*0002Kg&amp;quot;
Claiming USB DFU Interface...
Setting Alternate Setting #0 ...
Determining device status: state = dfuERROR, status = 10
dfuERROR, clearing status
Determining device status: state = dfuIDLE, status = 0
dfuIDLE, continuing
DFU mode device DFU version 011a
Device returned transfer size 2048
No valid DFU suffix signature
Warning: File has no DFU suffix
DfuSe interface name: &amp;quot;Internal Flash  &amp;quot;
Downloading to address = 0x08000000, size = 76764
......................................
File downloaded successfully
can&amp;#39;t detach
Resetting USB to switch back to runtime mode

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Linux you might want to take care that the modemmanager isn&amp;rsquo;t trying to use your sparky as modem getting it into bootloader mode while doing so. In doubt you probably want to uninstall it. It could also be good idea to get udev fixed. It looks like teensy did just that -&amp;gt; &lt;a href=&quot;http://www.pjrc.com/teensy/49-teensy.rules&quot;&gt;http://www.pjrc.com/teensy/49-teensy.rules&lt;/a&gt; (untested)&lt;/p&gt;

&lt;p&gt;To make a full chip erase you can use a file created by 
&lt;code&gt;
dd if=/dev/zero of=zero.bin bs=1 count=262144
&lt;/code&gt;
This can be used by dfu-util.&lt;/p&gt;

&lt;h2&gt;Via SWD&lt;/h2&gt;

&lt;p&gt;On the bottom of the board there is an SWD header socket onto switch a JST-SH connector can be soldered.
Once you have SWD connected you can use the st-link or j-link tools to flash a binary.&lt;/p&gt;

&lt;p&gt;See Sparky schematic for CONN2 pinouts.&lt;/p&gt;

&lt;h2&gt;TauLabs bootloader&lt;/h2&gt;

&lt;p&gt;Flashing cleanflight will erase the TauLabs bootloader, this is not a problem and can easily be restored using the st flashloader tool.&lt;/p&gt;

&lt;h1&gt;Serial Ports&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;RX&lt;/th&gt;
&lt;th&gt;TX&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;USB VCP&lt;/td&gt;
&lt;td&gt;RX (USB)&lt;/td&gt;
&lt;td&gt;TX (USB)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USART1&lt;/td&gt;
&lt;td&gt;RX / PB7&lt;/td&gt;
&lt;td&gt;TX / PB6&lt;/td&gt;
&lt;td&gt;Conn1 / Flexi Port.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;USART2&lt;/td&gt;
&lt;td&gt;RX / PA3&lt;/td&gt;
&lt;td&gt;PWM6 / PA2&lt;/td&gt;
&lt;td&gt;On RX is on INPUT header.  Best port for Serial RX input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;USART3&lt;/td&gt;
&lt;td&gt;RX / PB11&lt;/td&gt;
&lt;td&gt;TX / PB10&lt;/td&gt;
&lt;td&gt;RX/TX is on one end of the 6-pin header about the PWM outputs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;USB VCP &lt;em&gt;can&lt;/em&gt; be used at the same time as other serial ports (unlike Naze32).&lt;/p&gt;

&lt;p&gt;All USART ports all support automatic hardware inversion which allows direct connection of serial rx receivers like the FrSky X4RSB - no external inverter needed.&lt;/p&gt;

&lt;h1&gt;Battery Monitoring Connections&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Signal&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PWM9&lt;/td&gt;
&lt;td&gt;PA4&lt;/td&gt;
&lt;td&gt;Battery Voltage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM8&lt;/td&gt;
&lt;td&gt;PA7&lt;/td&gt;
&lt;td&gt;Current Meter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Voltage Monitoring&lt;/h2&gt;

&lt;p&gt;The Sparky has no battery divider cricuit, PWM9 has an inline 10k resistor which has to be factored into the resistor calculations.
The divider circuit should eventally create a voltage between 0v and 3.3v (MAX) at the MCU input pin.&lt;/p&gt;

&lt;p&gt;WARNING: Double check the output of your voltage divider using a voltmeter &lt;em&gt;before&lt;/em&gt; connecting to the FC.&lt;/p&gt;

&lt;h3&gt;Example Circuit&lt;/h3&gt;

&lt;p&gt;For a 3Cell battery divider the following circuit works:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Battery (+) ---&amp;lt; R1 &amp;gt;--- PWM9 ---&amp;lt; R2 &amp;gt;--- Battery (-)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;R1 = 8k2 (Grey Red Red)&lt;/li&gt;
&lt;li&gt;R2 = 2k0 (Red Black Red)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives a 2.2k for an 11.2v battery.  The &lt;code&gt;vbat_scale&lt;/code&gt; for this divider should be set around &lt;code&gt;52&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Current Monitoring&lt;/h2&gt;

&lt;p&gt;Connect a current sensor to PWM8/PA7 that gives a range between 0v and 3.3v out (MAX). &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Paris Air Hero 32</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---paris-air-hero-32"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---paris-air-hero-32</id>
   <content type="html">&lt;h1&gt;Board - Paris Air Hero 32 / Acro Naze 32 Mini&lt;/h1&gt;

&lt;p&gt;This board uses the same firmware as the Naze32 board.&lt;/p&gt;

&lt;h2&gt;Sensors&lt;/h2&gt;

&lt;p&gt;MPU6500 via SPI interface.&lt;/p&gt;

&lt;h2&gt;Ports&lt;/h2&gt;

&lt;p&gt;6 x 3pin ESC / Servo outputs
1 x 8pin JST connector (PPM/PWM/UART2)
1 x 4pin JST connector (UART3/I2C)&lt;/p&gt;

&lt;h2&gt;Pinouts&lt;/h2&gt;

&lt;p&gt;The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode.&lt;/p&gt;

&lt;p&gt;From right to left when looking at the socket from the edge of the board.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;RX_PPM&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RX_PPM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;RSSI_ADC&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RSSI_ADC&lt;/code&gt;.  Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;USART2 TX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;USART2 RX&lt;/td&gt;
&lt;td&gt;Built-in inverter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;LED_STRIP&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature LED_STRIP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but one SoftSerial port is made available to use instead.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1 RX&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature SOFTSERIAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1 TX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Serial Ports&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;RX&lt;/th&gt;
&lt;th&gt;TX&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;USART1&lt;/td&gt;
&lt;td&gt;RX  / PA10&lt;/td&gt;
&lt;td&gt;TX  / PA9 / TELEM&lt;/td&gt;
&lt;td&gt;TELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USART2&lt;/td&gt;
&lt;td&gt;RC4 / PA3&lt;/td&gt;
&lt;td&gt;RC3 / PA2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;USART3&lt;/td&gt;
&lt;td&gt;F3  / PB11&lt;/td&gt;
&lt;td&gt;F2  / PB10&lt;/td&gt;
&lt;td&gt;Flex port is configured as UART3 when port is configured&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1&lt;/td&gt;
&lt;td&gt;RC5 / PA6&lt;/td&gt;
&lt;td&gt;RC6 / PA7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Olimexino</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---olimexino"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---olimexino</id>
   <content type="html">&lt;h1&gt;Board - Olimexino&lt;/h1&gt;

&lt;p&gt;The Olimexino is a cheap and widely available development board&lt;/p&gt;

&lt;p&gt;This board is not recommended for cleanflight development because many of the pins needed are not broken out to header pins.  A better choice for development is the Port103R, EUSTM32F103RB (F1) or the STM32F3Discovery (F3).&lt;/p&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;h3&gt;RC Input&lt;/h3&gt;

&lt;p&gt;INPUT&lt;/p&gt;

&lt;p&gt;PA0 CH1 - D2  - PWM1 / PPM
PA1 CH2 - D3  - PWM2 / PWM RSSI
PA2 CH3 - D1  - PWM3 / UART2 TX
PA3 CH4 - D0  - PWM4 / UART2 RX
PA6 CH5 - D12 - PWM5 / SOFTSERIAL1 RX
PA7 CH6 - D11 - PWM6 / SOFTSERIAL1 TX
PB0 CH7 - D27 - PWM7 / SOFTSERIAL2 RX
PB1 CH8 - D28 - PWM8 / SOFTSERIAL2 TX&lt;/p&gt;

&lt;h3&gt;PWM Output&lt;/h3&gt;

&lt;p&gt;OUTPUT
PA8  CH1 - PWM9  - D6
PA11 CH2 - PWM10 - USBDM
PB6  CH3 - PWM11 - D5
PB7  CH4 - PWM12 - D9
PB8  CH5 - PWM13 - D14
PB9  CH6 - PWM14 - D24&lt;/p&gt;

&lt;h2&gt;Olimexino Shield V1&lt;/h2&gt;

&lt;p&gt;Headers for a CP2102 for UART1&lt;/p&gt;

&lt;p&gt;Top left&lt;/p&gt;

&lt;p&gt;6 way header pinouts (left to right)&lt;/p&gt;

&lt;p&gt;1 - N/C
2 - N/C
3 - N/C
4 - D7 - UART1 TX / CP2102 RX
5 - D8 - UART1 RX / CP2102 TX
6 - GND&lt;/p&gt;

&lt;p&gt;Headers for PPM, RSSI, SoftSerial1 inputs and Motor outputs&lt;/p&gt;

&lt;p&gt;Top centre&lt;/p&gt;

&lt;p&gt;Top Row = GROUND
Middle Row = 5V
Bottom Row = Signals&lt;/p&gt;

&lt;p&gt;Signal pinouts (left to right)&lt;/p&gt;

&lt;p&gt;1 - D2  - PWM1 - PPM
2 - D3  - PWM2 - RSSI
3 - D11 - PWM6  - INPUT CH6 / SS1 TX
4 - D12 - PWM5  - INPUT CH5 / SS1 RX
5 - D5  - PWM11 - OUTPUT CH3
6 - D9  - PWM12 - OUTPUT CH4
7 - D14 - PWM13 - OUTPUT CH5
8 - D24 - PWM14 - OUTPUT CH6&lt;/p&gt;

&lt;p&gt;SoftSerial 1 - Headers for FTDI&lt;/p&gt;

&lt;p&gt;Top Right&lt;/p&gt;

&lt;p&gt;6 way header pinouts (left to right)&lt;/p&gt;

&lt;p&gt;1 - N/C
2 - D11 - SS1 or UART2 TX / FTDI RX
3 - D12 - SS1 or UART2 RX / FTDI TX
4 - N/C
5 - N/C
6 - GND&lt;/p&gt;

&lt;p&gt;Top Right&lt;/p&gt;

&lt;p&gt;3 way power selector header&lt;/p&gt;

&lt;p&gt;1 - VIN
2 - 5V from FTDI
3 - N/C - Jumper Storage&lt;/p&gt;

&lt;p&gt;Middle Left&lt;/p&gt;

&lt;p&gt;3 way power selector header&lt;/p&gt;

&lt;p&gt;1 - VIN
2 - 5V from CP2102
3 - N/C - Jumper Storage&lt;/p&gt;

&lt;p&gt;Use either power selector to supply VIN from the serial port adapter sockets, ensure that both power selectors are not enabled at the same time.
One or both of the power selector jumpers MUST be in the jumper storage position. &lt;/p&gt;

&lt;p&gt;Sonar&lt;/p&gt;

&lt;p&gt;Inner Middle Bottom Right &lt;/p&gt;

&lt;p&gt;4 Header pins (top to bottom)&lt;/p&gt;

&lt;p&gt;1 - VIN
2 - Trigger
3 - Echo
4 - GND&lt;/p&gt;

&lt;p&gt;Serial IO &amp;amp; Serial Loopback  &lt;/p&gt;

&lt;p&gt;Bottom right&lt;/p&gt;

&lt;p&gt;The header pins allows combinations of serial loopback and Serial IO.  Any amount of connections or jumpers can be used at the same time.&lt;/p&gt;

&lt;p&gt;Jumper positions&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt; = Horizontal jumper&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;v = Vertical jumper
^&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;- FTDI RX connected to SS1 TX
&amp;lt;- FTDI TX connected to SS1 RX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-&amp;gt;&amp;lt; FTDI RX connected to UART2 TX
-&amp;gt;&amp;lt; FTDI TX connected to UART2 RX&lt;/p&gt;

&lt;p&gt;-v- FTDI LOOPBACK
-&lt;sup&gt;-&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;v&amp;ndash; SS1 LOOPBACK
&lt;sup&gt;&amp;ndash;&lt;/sup&gt;  &lt;/p&gt;

&lt;p&gt;&amp;ndash;v UART2 LOOPBACK
&amp;ndash;^  &lt;/p&gt;

&lt;p&gt;6 way header pinouts (top left to bottom right)&lt;/p&gt;

&lt;p&gt;123
456&lt;/p&gt;

&lt;p&gt;1 - SS 1 TX
2 - FTDI RX
3 - UART2 TX
4 - SS1 RX
5 - FTDI TX
6 - UART2 RX&lt;/p&gt;

&lt;p&gt;Bottom Right&lt;/p&gt;

&lt;p&gt;HoTT Telemetry port&lt;/p&gt;

&lt;p&gt;When the HoTT enable jumper is on pins 2 and 3 then HoTT data can be received/transmitted on either
serial port depending on the placement of the Derial IO selection jumpers.&lt;/p&gt;

&lt;p&gt;When not in use the HoTT enable jumper can be stored on pins 3 and 4&lt;/p&gt;

&lt;p&gt;The HoTT telemetry is connected to the center pins (2 &amp;amp; 5) of the Serial IO header.&lt;/p&gt;

&lt;p&gt;4 way header (left to right)&lt;/p&gt;

&lt;p&gt;1 - HoTT Telemetry In/Out
2 - HoTT Enable Jumper
3 - HoTT Enable Jumper
4 - N/C - Jumper Storage&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Naze32</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---naze32"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---naze32</id>
   <content type="html">&lt;h1&gt;Board - Naze32&lt;/h1&gt;

&lt;p&gt;The Naze32 target supports all Naze hardware revisions.  Revision 4 and 5 are used and
frequently flown by the primary maintainer.  Previous Naze hardware revisions may have issues,
if found please report via the &lt;a href=&quot;https://github.com/cleanflight/cleanflight/issues&quot;&gt;github issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Serial Ports&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;RX&lt;/th&gt;
&lt;th&gt;TX&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;USART1&lt;/td&gt;
&lt;td&gt;RX  / PA10&lt;/td&gt;
&lt;td&gt;TX  / PA9 / TELEM&lt;/td&gt;
&lt;td&gt;TELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USART2&lt;/td&gt;
&lt;td&gt;RC4 / PA3&lt;/td&gt;
&lt;td&gt;RC3 / PA2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1&lt;/td&gt;
&lt;td&gt;RC5 / PA6&lt;/td&gt;
&lt;td&gt;RC6 / PA7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;SOFTSERIAL2&lt;/td&gt;
&lt;td&gt;RC7 / PB0&lt;/td&gt;
&lt;td&gt;RC8 / PB1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;You cannot use USART1/TX/TELEM pins at the same time. &lt;/li&gt;
&lt;li&gt;You may encounter flashing problems if you have something connected to the RX/TX pins.  Try disconnecting RX/TX.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Pinouts&lt;/h2&gt;

&lt;p&gt;The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Circle&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;RX_PPM&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RX_PPM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;RSSI_ADC&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RSSI_ADC&lt;/code&gt;.  Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;USART2 TX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;USART2 RX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;LED_STRIP&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature LED_STRIP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Sonar Trigger&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Sonar Echo / CURRENT&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature CURRENT_METER&lt;/code&gt;  Connect to the output of a current sensor, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but two SoftSerial ports are made available to use instead.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1 RX&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature SOFTSERIAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;SOFTSERIAL1 TX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;SOFTSERIAL2 RX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;SOFTSERIAL2 TX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Recovery&lt;/h2&gt;

&lt;h3&gt;Board&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Short the two pads labelled &amp;lsquo;Boot&amp;rsquo; &lt;strong&gt;taking extra care not to touch the 5V pad&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Apply power to the board&lt;/li&gt;
&lt;li&gt;Remove the short on the board&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Cleanflight configurator&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Select the correct hardware and the desired release of the Clearflight firmware&lt;/li&gt;
&lt;li&gt;Put a check in the &amp;ldquo;No reboot sequence&amp;rdquo; &lt;/li&gt;
&lt;li&gt;Flash firmware&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/-------------------\
|O                 O|
| []5V              |
| [][]Boot          |
|                   |
|                   |
|                   |
|                   |
|O                 O|
\-------[USB]-------/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Board   Cjmcu</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---cjmcu"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---cjmcu</id>
   <content type="html">&lt;h1&gt;Board - CJMCU&lt;/h1&gt;

&lt;p&gt;The CJMCU is a tiny (80mm) board running a STM32F103, which contains a 3-Axis Compass (HMC5883L) 
and an Accelerometer/Gyro (MPU6050).&lt;/p&gt;

&lt;p&gt;This board does not have an onboard USB-Serial converter, so an external adapter is needed.&lt;/p&gt;

&lt;h1&gt;Hardware revisions&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Revision&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No boot jumper pads by LED1. Uses blue and red LEDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Boot jumper pads presoldered with pins and a jumper by LED1. Uses green and red LEDs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Version 2 boards are supported from firmware v1.4.0 onwards, do NOT flash earlier versions to version 2 boards.&lt;/p&gt;

&lt;h1&gt;Pins&lt;/h1&gt;

&lt;h2&gt;RX Connections&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Label&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PA0&lt;/td&gt;
&lt;td&gt;RC Channel 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PA1&lt;/td&gt;
&lt;td&gt;RC Channel 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PA2&lt;/td&gt;
&lt;td&gt;RC Channel 3 / USART2 TX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PA3&lt;/td&gt;
&lt;td&gt;RC Channel 4 / USART2 RX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;Power (See note)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;NOTE: The VCC RX Pin is not regulated and will supply what ever voltage is provided to the board, this will mean it&amp;rsquo;ll provide 5v if a 5v serial connection is used. Be careful if you are using a voltage sensitive RX. A regulated 3.3v supply can be found on the top pin of column 1, just below the RX GND pin.&lt;/p&gt;

&lt;h2&gt;Serial Connections&lt;/h2&gt;

&lt;p&gt;USART1 (along with power) is on the following pins.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Label&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TX1&lt;/td&gt;
&lt;td&gt;UART1 TX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RX1&lt;/td&gt;
&lt;td&gt;UART2 RX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3V3&lt;/td&gt;
&lt;td&gt;Power +3.3v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;Power +5v&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;USART2 is the following pins.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Label&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PA2&lt;/td&gt;
&lt;td&gt;USART2 TX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PA3&lt;/td&gt;
&lt;td&gt;USART2 RX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Power Connections&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Label&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Power +&lt;/td&gt;
&lt;td&gt;Power - 1 Cell 3.7v Max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Power -&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Motor Connections&lt;/h2&gt;

&lt;p&gt;In standard QUADX configuration, the motors are mapped:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cleanflight&lt;/th&gt;
&lt;th&gt;CJMCU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Motor 1&lt;/td&gt;
&lt;td&gt;Motor3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motor 2&lt;/td&gt;
&lt;td&gt;Motor2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motor 3&lt;/td&gt;
&lt;td&gt;Motor4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motor 4&lt;/td&gt;
&lt;td&gt;Motor1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;It is therefore simplest to wire the motors:
 * Motor 1 -&amp;gt; Clockwise
 * Motor 2 -&amp;gt; Anti-Clockwise
 * Motor 3 -&amp;gt; Clockwise
 * Motor 4 -&amp;gt; Anti-Clockwise&lt;/p&gt;

&lt;p&gt;If you are using the Hubsan x4/Ladybird motors, clockwise are Blue (GND) / Red (VCC) wires, anticlockwise
are Black (GND) / White (VCC).
i.e. there is one wire on each motor out of the standard RED/BLACK VCC/GND polarity colors that can be used to identify polarity.&lt;/p&gt;

&lt;p&gt;If you have wired as above, Motor1/Motor2 on the board will be forward.&lt;/p&gt;

&lt;h1&gt;Connecting a Serial-USB Adapter&lt;/h1&gt;

&lt;p&gt;You will need a USB -&amp;gt; Serial UART adapter. Connect:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Adapter&lt;/th&gt;
&lt;th&gt;CJMCU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Either 3.3v OR 5v&lt;/td&gt;
&lt;td&gt;The correct 3.3v OR 5v pin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RX&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;RX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;When first connected this should power up the board, and will be in bootloader mode. If this does not happen, check 
the charge switch is set to POW.
After the flashing process has been completed, this will allow access via the cleanflight configurator to change 
settings or flash a new firmware.&lt;/p&gt;

&lt;p&gt;WARNING: If the motors are connected and the board boots into the bootloader, they will start 
to spin after around 20 seconds, it is recommended not to connect the motors until the board
is flashed.&lt;/p&gt;

&lt;h1&gt;Flashing&lt;/h1&gt;

&lt;p&gt;To flash the board:
 * Open Cleanflight Configurator
 * Choose the latest CJMCU firmware from the list.
 * Select &amp;ldquo;Load Firmware [Online]&amp;rdquo; and wait for the firmware to download.
 * Tick &amp;ldquo;No Reboot Sequence&amp;rdquo; and &amp;ldquo;Full Chip Erase&amp;rdquo;
 * Connect the USB-&amp;gt;Serial adapter to the board
 * Select the USB-UART adapter from the top left box
 * Click &amp;ldquo;Flash Firmware&amp;rdquo;
 * You should see &amp;ldquo;Programming: SUCCESSFUL&amp;rdquo; in the log box
 * Click &amp;ldquo;Connect&amp;rdquo; -&amp;gt; This should open the &amp;ldquo;Initial Setup&amp;rdquo; tab and you should see sensor data from the quad shown
 * Unplug the quad and short the 2 &amp;ldquo;BOOT0&amp;rdquo; pins. Revision 1 boards require this to be soldered, revision 2 boards can connect the included jumper to the two pre-soldered pins - This prevents the board from going into bootloader mode on next
   boot, if anything goes wrong, simply disconnect these two pins and the bootloader will start, allowing you to reflash. You cannot
   overwrite the bootloader.&lt;/p&gt;

&lt;h1&gt;Charging&lt;/h1&gt;

&lt;p&gt;The CJMCU has on it a TP4056 Lithium battery charging IC that can charge a 1S battery at 1A using a provided 5v supply attached to the 5v serial pin.&lt;/p&gt;

&lt;p&gt;To charge an attached battery:
 * Set the power switch to OFF
 * Set the charge switch to CHG
 * Plug in a 1S battery to the battery pins
 * Plug in a 5v supply to the 5v serial pins&lt;/p&gt;

&lt;p&gt;The charger will finish when either the battery reaches 4.2v, or the battery&amp;rsquo;s voltage is greater than the charger&amp;rsquo;s input voltage.&lt;/p&gt;

&lt;p&gt;The two nearby LEDs will show the status of charging:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Green LED&lt;/th&gt;
&lt;th&gt;Red LED&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Charging&lt;/td&gt;
&lt;td&gt;On&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Finished&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;td&gt;On&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5v not connected&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;td&gt;Off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Batt not connected&lt;/td&gt;
&lt;td&gt;Flashing&lt;/td&gt;
&lt;td&gt;On&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1&gt;Helpful Hints&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If you are only using a 4 channel RX, in the auxiliary configuration tab, you can add a &amp;ldquo;Horizon&amp;rdquo; mode range around 1500 
for one of the the AUX channels which will result in it being always on&lt;/li&gt;
&lt;li&gt;Enabling the feature MOTOR_STOP helps with crashes so it doesn&amp;rsquo;t try to keep spinning on its back&lt;/li&gt;
&lt;li&gt;When the power runs low, the quad will start jumping around a bit, if the flight behaviour seems strange, check your batteries charge&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Chebuzzf3</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---chebuzzf3"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---chebuzzf3</id>
   <content type="html">&lt;h1&gt;Board - ChebuzzF3&lt;/h1&gt;

&lt;p&gt;The ChebuzzF3 is a daugter board which connects to the bottom of an STM32F3Discovery board and provides pin headers and ports for various FC connections.&lt;/p&gt;

&lt;p&gt;All connections were traced using a multimeter and then verified against the TauLabs source code using the revision linked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TauLabs/TauLabs/blob/816760dec2a20db7fb9ec1a505add240e696c31f/flight/targets/flyingf3/board-info/board_hw_defs.c&quot;&gt;https://github.com/TauLabs/TauLabs/blob/816760dec2a20db7fb9ec1a505add240e696c31f/flight/targets/flyingf3/board-info/board_hw_defs.c&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;p&gt;Board orientation.&lt;/p&gt;

&lt;p&gt;These notes assume that when the board is placed with the header pins facing up, the bottom right of the board is next to the 8 sets of INPUT pin headers.
Inner means between the two rows of header sockets, outer means between the left/right board edges and the header sockets.&lt;/p&gt;

&lt;h3&gt;SPI2 / External SPI&lt;/h3&gt;

&lt;p&gt;sclk GPIOB 13
miso GPIOB 14
mosi GPIOB 15&lt;/p&gt;

&lt;p&gt;There are 4 pins, labelled CS1-4 next to a label that reads Ext SPI.  The 3rd pin is connected to the flash chip on
the bottom right inner of the board.  The other pins on the flash chip are wired up to PB3/4/5&lt;/p&gt;

&lt;h3&gt;SPI3 / SPI&lt;/h3&gt;

&lt;p&gt;sclk GPIOB 3
miso GPIOB 4
mosi GPIOB 5&lt;/p&gt;

&lt;p&gt;ssel 1 GPIOB 10 / Ext SPI CS1
ssel 2 GPIOB 11 / Ext SPI CS2
ssel 3 GPIOB 12 / Ext SPI CS3 - wired up to Slave Select of M25P16 15MBitFlash chip
ssel 4 GPIOB 13 / Ext SPI CS4 - not usable since it is used for SPI2 sclk&lt;/p&gt;

&lt;h3&gt;RC Input&lt;/h3&gt;

&lt;p&gt;INPUT
PA8 / CH1 - TIM1_CH1
PB8 / CH2 - TIM16_CH1
PB9 / CH3 - TIM17_CH1
PC6 / CH4 - TIM8_CH1
PC7 / CH5 - TIM8_CH2
PC8 / CH6 - TIM8_CH3
PF9 / CH7 - TIM15_CH1
PF10 / CH8 - TIM15_CH2&lt;/p&gt;

&lt;h3&gt;PWM Outputs&lt;/h3&gt;

&lt;p&gt;OUTPUT
PD12 / CH1 - TIM4_CH1
PD13 / CH2 - TIM4_CH2
PD14 / CH3 - TIM4_CH3
PD15 / CH4 - TIM4_CH4
PA1 / CH5 - TIM2_CH2
PA2 / CH6 - TIM2_CH3
PA3 / CH7 - TIM2_CH4
PB0 / CH8 - TIM3_CH3
PB1 / CH9 - TIM3_CH4
PA4 / CH10 - TIM3_CH2 &lt;/p&gt;

&lt;h3&gt;Other ports&lt;/h3&gt;

&lt;p&gt;There is space for a MS5611 pressure sensor at the top left inner of the board.&lt;/p&gt;

&lt;p&gt;There is an I2C socket on the left outer of the board which connects to a PCA9306 I2C level shifter directly opposite (inner).
The PCA9306 is not populated on some boards and thus the I2C socket is unusable.&lt;/p&gt;

&lt;p&gt;There is a CAN socket on the top right outer of the board which connects to a MAX3015 CAN Tranceiver.
The MAX3015 is not populated on some boards and thus the CAN socket is unusable.&lt;/p&gt;

&lt;p&gt;There are some solder pads labelled Ext 1-4 at the top right inner of the board.&lt;/p&gt;

&lt;p&gt;GPIOE 6 / PE6 / Ext 1
GPIOD 3 / PD3 / Ext 2
GPIOD 4 / PD4 / Ext 3
GPIOB 3 / PB3 / Ext 4&lt;/p&gt;

&lt;p&gt;There are some solder pads labelled ADC0-3 &amp;amp; Diff Press at the top left inner of the board
They are connected to the ADC socket at the top left outer of the board&lt;/p&gt;

&lt;p&gt;PC3 / Diff Press - ADC12_IN9 (Differential Pressure)
PC2 / ADC2 - ADC12_IN8
PC1 / ADC1 - ADC12_IN7
PC0 / ADC0 - ADC12_IN6&lt;/p&gt;

&lt;p&gt;There is space for a MPXV5004/MPVZ5004 differential pressure sensor, if populated it&amp;rsquo;s analog pin connects to PC3.&lt;/p&gt;

&lt;p&gt;There are sockets for 5 UARTs labelled USART1-5.&lt;/p&gt;

&lt;p&gt;There is a socket labelled RX_IN.&lt;/p&gt;

&lt;p&gt;GPIOD 2 / PD2 / RX_IN&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Board   Cc3d</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---cc3d"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---cc3d</id>
   <content type="html">&lt;h1&gt;Board - CC3D&lt;/h1&gt;

&lt;p&gt;The OpenPilot Copter Control 3D aka CC3D is a board more tuned to Acrobatic flying or GPS based
auto-piloting.  It only has one sensor, the MPU6000 SPI based Accelerometer/Gyro.
It also features a 16Mbit SPI based EEPROM chip.  It has 6 ports labeled as inputs (one pin each)
and 6 ports labeled as motor/servo outputs (3 pins each).&lt;/p&gt;

&lt;p&gt;If issues are found with this board please report via the &lt;a href=&quot;https://github.com/cleanflight/cleanflight/issues&quot;&gt;github issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The board has a USB port directly connected to the processor.  Other boards like the Naze and Flip32
have an on-board USB to uart adapter which connect to the processor&amp;rsquo;s serial port instead.&lt;/p&gt;

&lt;p&gt;The board cannot currently be used for hexacopters/octocopters.&lt;/p&gt;

&lt;p&gt;Tricopter &amp;amp; Airplane support is untested, please report success or failure if you try it. &lt;/p&gt;

&lt;h1&gt;Pinouts&lt;/h1&gt;

&lt;p&gt;The 8 pin RC_Input connector has the following pinouts when used in RX_PPM/RX_SERIAL mode&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;PPM Input&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RX_PPM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SoftSerial1 TX / Sonar trigger&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;SoftSerial1 RX / Sonar Echo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature CURRENT_METER&lt;/code&gt;.  Connect to the output of a current sensor, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Battery Voltage sensor&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature VBAT&lt;/code&gt;. Connect to main battery using a voltage divider, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;RSSI&lt;/td&gt;
&lt;td&gt;Enable &lt;code&gt;feature RSSI_ADC&lt;/code&gt;.  Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The 6 pin RC_Output connector has the following pinouts when used in RX_PPM/RX_SERIAL mode&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;MOTOR 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;MOTOR 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;MOTOR 3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;MOTOR 4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;LED Strip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The 8 pin RC_Input connector has the following pinouts when used in RX_PARALLEL_PWM mode&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;CH1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;CH2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;CH3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;CH4/Battery Voltage sensor&lt;/td&gt;
&lt;td&gt;CH4 if battery voltage sensor is disabled&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;CH5/CH4&lt;/td&gt;
&lt;td&gt;CH4 if battery voltage monitor is enabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The 6 pin RC_Output connector has the following pinouts when used in RX_PARALLEL_PWM mode&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;MOTOR 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;MOTOR 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;MOTOR 3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;MOTOR 4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1&gt;Serial Ports&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Identifier&lt;/th&gt;
&lt;th&gt;Board Markings&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;VCP&lt;/td&gt;
&lt;td&gt;USB PORT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;USART1&lt;/td&gt;
&lt;td&gt;MAIN PORT&lt;/td&gt;
&lt;td&gt;Connected to an MCU controllable inverter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;USART3&lt;/td&gt;
&lt;td&gt;FLEX PORT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SoftSerial&lt;/td&gt;
&lt;td&gt;RC connector&lt;/td&gt;
&lt;td&gt;Pins 4 and 5 (Tx and Rx respectively)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The SoftSerial port is not available when RX_PARALLEL_PWM is used. The transmission data rate is limited to 19200 baud.&lt;/p&gt;

&lt;p&gt;To connect the GUI to the flight controller you just need a USB cable to use the Virtual Com Port (VCP) or you can use UART1 (Main Port).&lt;/p&gt;

&lt;p&gt;CLI access is only available via the VCP by default.&lt;/p&gt;

&lt;h1&gt;Main Port&lt;/h1&gt;

&lt;p&gt;The main port has MSP support enabled on it by default.&lt;/p&gt;

&lt;p&gt;The main port is connected to an inverter which is automatically enabled as required.  For example, if the main port is used for SBus Serial RX then an external inverter is not required.&lt;/p&gt;

&lt;h1&gt;Flex Port&lt;/h1&gt;

&lt;p&gt;The flex port will be enabled in I2C mode unless USART3 is used.  You can connect external I2C sensors and displays to this port.&lt;/p&gt;

&lt;p&gt;You cannot use USART3 and I2C at the same time.&lt;/p&gt;

&lt;h2&gt;Flex port pinout&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;Signal&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;VCC unregulated&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;I2C SCL / UART3 TX&lt;/td&gt;
&lt;td&gt;3.3v level&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;I2C SDA / UART3 RX&lt;/td&gt;
&lt;td&gt;3.3v level (5v tolerant&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1&gt;Flashing&lt;/h1&gt;

&lt;p&gt;There are two primary ways to get Cleanflight onto a CC3D board.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single binary image mode - best mode if you don&amp;rsquo;t want to use OpenPilot.&lt;/li&gt;
&lt;li&gt;OpenPilot Bootloader compatible image mode - best mode if you want to switch between OpenPilot and Cleanflight.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Single binary image mode.&lt;/h2&gt;

&lt;p&gt;The entire flash ram on the target processor is flashed with a single image.&lt;/p&gt;

&lt;p&gt;The image can be flashed by using a USB to UART adapter connected to the main port when the CC3D is put into the STM32 bootloader mode, achieved by powering on the CC3D with the SBL/3.3v pads bridged.  &lt;/p&gt;

&lt;h2&gt;OpenPilot Bootloader compatible image mode.&lt;/h2&gt;

&lt;p&gt;The initial section of flash ram on the target process is flashed with a bootloader which can then run the code in the
remaining area of flash ram.&lt;/p&gt;

&lt;p&gt;The OpenPilot bootloader code also allows the remaining section of flash to be reconfigured and re-flashed by the
OpenPilot Ground Station (GCS) via USB without requiring a USB to uart adapter.&lt;/p&gt;

&lt;h1&gt;Restoring OpenPilot bootloader&lt;/h1&gt;

&lt;p&gt;If you have a JLink debugger, you can use JLinkExe to flash the open pilot bootloader.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run JLinkExe &lt;code&gt;/Applications/SEGGER/JLink/JLinkExe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device STM32F103CB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadbin opbl.bin, 0x08000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Re-plug CC3D.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s an example session:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ /Applications/SEGGER/JLink/JLinkExe 
SEGGER J-Link Commander V4.90c (&amp;#39;?&amp;#39; for help)
Compiled Aug 29 2014 09:52:38
DLL version V4.90c, compiled Aug 29 2014 09:52:33
Firmware: J-Link ARM-OB STM32 compiled Aug 22 2012 19:52:04
Hardware: V7.00
S/N: -1 
Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull 
VTarget = 3.300V
Info: Could not measure total IR len. TDO is constant high.
Info: Could not measure total IR len. TDO is constant high.
No devices found on JTAG chain. Trying to find device on SWD.
Info: Found SWD-DP with ID 0x1BA01477
Info: Found Cortex-M3 r1p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: TPIU fitted.
Cortex-M3 identified.
Target interface speed: 100 kHz
J-Link&amp;gt;device STM32F103CB
Info: Device &amp;quot;STM32F103CB&amp;quot; selected (128 KB flash, 20 KB RAM).
Reconnecting to target...
Info: Found SWD-DP with ID 0x1BA01477
Info: Found SWD-DP with ID 0x1BA01477
Info: Found Cortex-M3 r1p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: TPIU fitted.
J-Link&amp;gt;r
Reset delay: 0 ms
Reset type NORMAL: Resets core &amp;amp; peripherals via SYSRESETREQ &amp;amp; VECTRESET bit.
J-Link&amp;gt;h
PC = 0800010C, CycleCnt = 00000000
R0 = 0000000C, R1 = 0000003F, R2 = 00000000, R3 = 00000008
R4 = 00003000, R5 = 023ACEFC, R6 = 200000F0, R7 = 20000304
R8 = 023B92BC, R9 = 00000000, R10= ED691105, R11= F626177C
R12= 000F0000
SP(R13)= 20000934, MSP= 20000934, PSP= 20000934, R14(LR) = FFFFFFFF
XPSR = 01000000: APSR = nzcvq, EPSR = 01000000, IPSR = 000 (NoException)
CFBP = 00000000, CONTROL = 00, FAULTMASK = 00, BASEPRI = 00, PRIMASK = 00
J-Link&amp;gt;loadbin opbl.bin, 0x08000000
Downloading file [opbl.bin]...
WARNING: CPU is running at low speed (8004 kHz).
Info: J-Link: Flash download: Flash download into internal flash skipped. Flash contents already match
Info: J-Link: Flash download: Total time needed: 0.898s (Prepare: 0.709s, Compare: 0.128s, Erase: 0.000s, Program: 0.000s, Verify: 0.000s, Restore: 0.059s)
O.K.
J-Link&amp;gt;q
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Board   Alienwii32</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/board---alienwii32"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/board---alienwii32</id>
   <content type="html">&lt;h1&gt;Board - AlienWii32 (ALIENWIIF1 and ALIENWIIF3 target)&lt;/h1&gt;

&lt;p&gt;The AlienWii32 is actually in prototype stage and few samples exist. There are some different variants and field testing with some users is ongoing. The information below is preliminary and will be updated as needed.&lt;/p&gt;

&lt;p&gt;Here are the hardware specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;STM32F103CBT6 MCU (ALIENWIIF1)&lt;/li&gt;
&lt;li&gt;STM32F303CCT6 MCU (ALIENWIIF3)&lt;/li&gt;
&lt;li&gt;MPU6050 accelerometer/gyro sensor unit&lt;/li&gt;
&lt;li&gt;4-8 x 4.2A brushed ESCs, integrated, to run the strongest micro motors&lt;/li&gt;
&lt;li&gt;extra-wide traces on the PCB, for maximum power throughput&lt;/li&gt;
&lt;li&gt;USB port, integrated&lt;/li&gt;
&lt;li&gt;(*) serial connection for external DSM2/DSMX sat receiver (e.g. Spektrum SAT, OrangeRx R100, Lemon RX or Deltang Rx31)&lt;/li&gt;
&lt;li&gt;ground and 3.3V for the receiver&lt;/li&gt;
&lt;li&gt;hardware bind plug for easy binding&lt;/li&gt;
&lt;li&gt;motor connections are at the corners for a clean look with reduced wiring&lt;/li&gt;
&lt;li&gt;dimensions: 29x33mm&lt;/li&gt;
&lt;li&gt;direct operation from an single cell lipoly battery&lt;/li&gt;
&lt;li&gt;3.3V LDO power regulator (older prototypes)&lt;/li&gt;
&lt;li&gt;3.3V buck-boost power converter (newer prototypes and production versions)&lt;/li&gt;
&lt;li&gt;battery monitoring with an LED for buzzer functionality (actualy for an ALIENWIIF3 variant)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(*) Spektrum Compatible DSM2 satellites are supported out of the box. DSMX sat will work with DSM2 protocol with default settings (DSM2, 11bit, 11ms is preset). This is chosen for maximum compatibility. For optimal connection it is recommended to adjust settings to match the capabilities of your transmitter and satellite receiver. If possible it is recommended to use the DSMX protocol since it is known as more reliable. Also to make use of additional channels you should adjust the following two parameters with the Cleanflight Configurator.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set serialrx_provider = 1   (0 for 1024bit, 1 for 2048bit) 
set spektrum_sat_bind = 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more detail of the different bind modes please refer the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/spektrum-bind/&quot;&gt;Spektrum Bind&lt;/a&gt; document&lt;/p&gt;

&lt;p&gt;Deltang receivers in serial mode will work like any other Spektrum satellite receiver (10bit, 22ms) only the bind process will be different. &lt;/p&gt;

&lt;p&gt;The pin layout for the ALIENWIIF1 is very similar to NAZE32 or the related clones (MW32, Flip32, etc.). The hardware bind pin is connected to pin 41 (PB5). The pin layout for the ALIENWIIF3 is similar to Sparky. The hardware bind pin is connected to pin 25 (PB12). The AlienWii32 firmware will be built as target ALIENWIIF1 or ALIENWIIF3. The firmware image will come with alternative default settings which will give the user a plug and play experience. There is no computer needed to get this into the air with an small Quadcopter. An preconfigured custom mixer for an Octocopter is part of the default settings to allow clean straight wiring with the AlienWii32. The mixer can be activated with &amp;ldquo;mixer custom&amp;rdquo; in the CLI. To use the AlienWii32 in an Hexa- or Octocopter or to do some more tuning additional configuration changes can be done as usual in the CLI or the Cleanflight configurator. &lt;/p&gt;

&lt;h2&gt;Flashing the firmware&lt;/h2&gt;

&lt;p&gt;The AlienWii32 F1 board can be flashed like the Naze board or the related clones. All the different methods will work in the same way.&lt;/p&gt;

&lt;p&gt;The AlienWii32 F3 board needs to be flashed via the USB port in DFU mode. Flashing via the Cleanflight GUI is not possible yet. The DFU mode can be activated via setting the BOOT0 jumper during power on of the board. The second method is to connect with an terminal program (i.e. Putty) to the board and enter the character &amp;ldquo;R&amp;rdquo; immediately after connecting. Details about the flashing process can be found in the related section of the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/board-sparky/&quot;&gt;Sparky&lt;/a&gt; documentation. The BOOT0 jumper should be removed and the board needs to be repowerd after firmware flashing. Please be aware, during reboot of the AlienWii F3 board, the GUI will disconnect and an manual reconnect is required.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blackbox</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/blackbox"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/blackbox</id>
   <content type="html">&lt;h1&gt;Blackbox flight data recorder&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/blackbox-screenshot-1.jpg&quot; alt=&quot;Rendered flight log frame&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This feature transmits your flight data information on every control loop iteration over a serial port to an external
logging device to be recorded, or to a dataflash chip which is present on some flight controllers.&lt;/p&gt;

&lt;p&gt;After your flight, you can process the resulting logs on your computer to either turn them into CSV (comma-separated
values) or render your flight log as a video using the tools &lt;code&gt;blackbox_decode&lt;/code&gt; and &lt;code&gt;blackbox_render&lt;/code&gt;. Those tools can be
found in this repository:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/blackbox-tools&quot;&gt;https://github.com/cleanflight/blackbox-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view your flight logs using your web browser with the interactive log viewer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/blackbox-log-viewer&quot;&gt;https://github.com/cleanflight/blackbox-log-viewer&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Logged data&lt;/h2&gt;

&lt;p&gt;The blackbox records flight data on every iteration of the flight control loop. It records the current time in
microseconds, P, I and D corrections for each axis, your RC command stick positions (after applying expo curves),
gyroscope data, accelerometer data (after your configured low-pass filtering), barometer readings, 3-axis magnetometer
readings, raw VBAT and current measurements, and the command being sent to each motor speed controller. This is all
stored without any approximation or loss of precision, so even quite subtle problems should be detectable from the fight
data log.&lt;/p&gt;

&lt;p&gt;GPS data is logged whenever new GPS data is available. Although the CSV decoder will decode this data, the video
renderer does not yet show any of the GPS information (this will be added later).&lt;/p&gt;

&lt;h2&gt;Supported configurations&lt;/h2&gt;

&lt;p&gt;The maximum data rate that can be recorded to the flight log is fairly restricted, so anything that increases the load
can cause the flight log to drop frames and contain errors.&lt;/p&gt;

&lt;p&gt;The Blackbox was developed and tested on a quadcopter. It has also been tested on a tricopter. It should work on
hexacopters or octocopters, but as they transmit more information to the flight log (due to having more motors), the 
number of dropped frames may increase. The &lt;code&gt;blackbox_render&lt;/code&gt; tool only supports tri and quadcopters (please send me 
flight logs from other craft, and I can add support for them!)&lt;/p&gt;

&lt;p&gt;Cleanflight&amp;rsquo;s &lt;code&gt;looptime&lt;/code&gt; setting will decide how many times per second an update is saved to the flight log. The
software was developed on a craft with a looptime of 2400. Any looptime smaller than this will put more strain on the
data rate. The default looptime on Cleanflight is 3500. &lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using a looptime of 2300 or smaller, you will probably need to reduce the sampling rate in the Blackbox
settings, or increase your logger&amp;rsquo;s baudrate to 250000. See the later section on configuring the Blackbox feature for
details.&lt;/p&gt;

&lt;h2&gt;Hardware&lt;/h2&gt;

&lt;p&gt;There are two options for storing your flight logs. You can either transmit the log data over a serial port to an 
external logging device like the &lt;a href=&quot;https://www.sparkfun.com/products/9530&quot;&gt;OpenLog serial data logger&lt;/a&gt; to be recorded to a microSDHC card, or if you have a
compatible flight controller you can store the logs on the onboard dataflash storage instead.&lt;/p&gt;

&lt;h3&gt;OpenLog serial data logger&lt;/h3&gt;

&lt;p&gt;The OpenLog ships with standard OpenLog 3 firmware installed. However, in order to reduce the number of dropped frames,
it should be reflashed with the &lt;a href=&quot;https://github.com/sparkfun/OpenLog/tree/master/firmware/OpenLog_v3_Light&quot;&gt;OpenLog Light firmware&lt;/a&gt; or the special &lt;a href=&quot;https://github.com/cleanflight/blackbox-firmware&quot;&gt;OpenLog Blackbox firmware&lt;/a&gt; (this needs to
be version 2.0 or higher to allow configuration of baud rates). &lt;/p&gt;

&lt;p&gt;The Blackbox variant of the firmware ensures that the OpenLog is using the correct settings, and defaults to 115200
baud. If you are using a looptime of 2500 or smaller, you should set the baud rate to 250000 instead to eliminate
dropped frames.&lt;/p&gt;

&lt;p&gt;You can find the Blackbox version of the OpenLog firmware &lt;a href=&quot;https://github.com/cleanflight/blackbox-firmware&quot;&gt;here&lt;/a&gt;, 
along with instructions for installing it onto your OpenLog.&lt;/p&gt;

&lt;h4&gt;microSDHC&lt;/h4&gt;

&lt;p&gt;Your choice of microSDHC card is very important to the performance of the system. The OpenLog relies on being able to
make many small writes to the card with minimal delay, which not every card is good at. A faster SD-card speed rating is
not a guarantee of better performance.&lt;/p&gt;

&lt;h5&gt;microSDHC cards known to have poor performance&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Generic 4GB Class 4 microSDHC card - the rate of missing frames is about 1%, and is concentrated around the most
interesting parts of the log!&lt;/li&gt;
&lt;li&gt;Sandisk Ultra 32GB (unlike the smaller 16GB version, this version has poor write latency)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;microSDHC cards known to have good performance&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Transcend 16GB Class 10 UHS-I microSDHC (typical error rate &amp;lt; 0.1%)&lt;/li&gt;
&lt;li&gt;Sandisk Extreme 16GB Class 10 UHS-I microSDHC (typical error rate &amp;lt; 0.1%)&lt;/li&gt;
&lt;li&gt;Sandisk Ultra 16GB (it performs only half as well as the Extreme in theory, but still very good)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should format any card you use with the &lt;a href=&quot;https://www.sdcard.org/downloads/formatter_4/&quot;&gt;SD Association&amp;rsquo;s special formatting tool&lt;/a&gt; , as it will give the OpenLog
the best chance of writing at high speed. You must format it with either FAT, or with FAT32 (recommended).&lt;/p&gt;

&lt;h4&gt;OpenLog configuration&lt;/h4&gt;

&lt;p&gt;Power up the OpenLog with a microSD card inside, wait 10 seconds or so, then power it down and plug the microSD card
into your computer. You should find a &amp;ldquo;CONFIG.TXT&amp;rdquo; file on the card. You should see the baud rate that the OpenLog has
been configured to. You probably want this to be set to either 115200 (the default) or 250000 (for craft with looptimes
smaller than 2500).&lt;/p&gt;

&lt;p&gt;Save the file and put the card back into your OpenLog, it should use those settings from now on.&lt;/p&gt;

&lt;p&gt;If your OpenLog didn&amp;rsquo;t write a CONFIG.TXT file, create a CONFIG.TXT file with these contents and store it in the root
of the MicroSD card:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;115200
baud
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using the official OpenLog Light firmware, use this configuration instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;115200,26,0,0,1,0,1
baud,escape,esc#,mode,verb,echo,ignoreRX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Serial port&lt;/h4&gt;

&lt;p&gt;A hardware serial port is required to connect the OpenLog to your flight controller (such as &lt;code&gt;serial_port_1&lt;/code&gt; on the
Naze32, the two-pin Tx/Rx header in the center of the board). The Blackbox can not be used with softserial ports as they
are too slow.&lt;/p&gt;

&lt;p&gt;Connect the &amp;ldquo;TX&amp;rdquo; pin of the serial port you&amp;rsquo;ve chosen to the OpenLog&amp;rsquo;s &amp;ldquo;RXI&amp;rdquo; pin. Don&amp;rsquo;t connect the serial port&amp;rsquo;s RX
pin to the OpenLog.&lt;/p&gt;

&lt;h4&gt;Protection&lt;/h4&gt;

&lt;p&gt;The OpenLog can be wrapped in black electrical tape or heat-shrink in order to insulate it from conductive frames (like
carbon fiber), but this makes its status LEDs impossible to see. I recommend wrapping it with some clear heatshrink
tubing instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/blackbox-installation-1.jpg&quot; alt=&quot;OpenLog installed&quot; title=&quot;OpenLog installed with double-sided tape, SDCard slot pointing outward&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Onboard dataflash storage&lt;/h3&gt;

&lt;p&gt;Some flight controllers have an onboard SPI NOR flash chip which can be used to store flight logs instead of using an 
OpenLog.&lt;/p&gt;

&lt;p&gt;The full version of the Naze32 and the CC3D have an onboard &amp;ldquo;m25p16&amp;rdquo; 2 megayte dataflash storage chip. This is a small
chip with 8 fat legs, which can be found at the base of the Naze32&amp;rsquo;s direction arrow. This chip is not present on the
&amp;ldquo;Acro&amp;rdquo; version of the Naze32.&lt;/p&gt;

&lt;p&gt;These chips are also supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Micron/ST M25P16 - 16 Mbit&lt;/li&gt;
&lt;li&gt;Micron N25Q064 - 64 Mbit&lt;/li&gt;
&lt;li&gt;Winbond W25Q64 - 64 Mbit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Enabling the Blackbox (CLI)&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;https://chrome.google.com/webstore/detail/cleanflight-configurator/enacoimjcgeinfnnnpajinjgmkahmfgb?hl=en&quot;&gt;Cleanflight Configurator&lt;/a&gt; , enter the CLI tab. Enable the Blackbox feature by typing in &lt;code&gt;feature BLACKBOX&lt;/code&gt; and
pressing enter. Now choose the device that you want to log to:&lt;/p&gt;

&lt;h3&gt;OpenLog serial data logger&lt;/h3&gt;

&lt;p&gt;Enter &lt;code&gt;set blackbox_device=0&lt;/code&gt; to switch to logging to a serial port (this is the default).&lt;/p&gt;

&lt;p&gt;You then need to let Cleanflight know which of &lt;a href=&quot;https://github.com/cleanflight/cleanflight/blob/master/docs/Serial.md&quot;&gt;your serial ports&lt;/a&gt; you connected the OpenLog to. A 115200 baud port
is required (such as &lt;code&gt;serial_port_1&lt;/code&gt; on the Naze32, the two-pin Tx/Rx header in the center of the board).&lt;/p&gt;

&lt;p&gt;You can use the GUI to configure a port for the Blackbox feature on the Ports tab.&lt;/p&gt;

&lt;h3&gt;Onboard dataflash&lt;/h3&gt;

&lt;p&gt;Enter &lt;code&gt;set blackbox_device=1&lt;/code&gt; to switch to logging to an onboard dataflash chip, if your flight controller has one.&lt;/p&gt;

&lt;h2&gt;Configuring the Blackbox&lt;/h2&gt;

&lt;p&gt;If you are using a short looptime like 2500 or smaller, try switching your OpenLog to 250000 baud (instead of the 
default of 115200) and set that baud rate on the Blackbox&amp;rsquo;s port in the Confgurator.&lt;/p&gt;

&lt;p&gt;The Blackbox currently provides two settings (&lt;code&gt;blackbox_rate_num&lt;/code&gt; and &lt;code&gt;blackbox_rate_denom&lt;/code&gt;) that allow you to control 
the rate at which data is logged. These two together form a fraction (&lt;code&gt;blackbox_rate_num / blackbox_rate_denom&lt;/code&gt;) which
decides what portion of the flight controller&amp;rsquo;s control loop iterations should be logged. The default is 1/1 which logs 
every iteration.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using a slower MicroSD card, you may need to reduce your logging rate to reduce the number of corrupted
logged frames that &lt;code&gt;blackbox_decode&lt;/code&gt; complains about. A rate of &amp;frac12; is likely to work for most craft.&lt;/p&gt;

&lt;p&gt;You can change the logging rate settings by entering the CLI tab in the &lt;a href=&quot;https://chrome.google.com/webstore/detail/cleanflight-configurator/enacoimjcgeinfnnnpajinjgmkahmfgb?hl=en&quot;&gt;Cleanflight Configurator&lt;/a&gt; and using the &lt;code&gt;set&lt;/code&gt;
command, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set blackbox_rate_num = 1
set blackbox_rate_denom = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The data rate for my quadcopter using a looptime of 2400 and a rate of 1/1 is about 10.25kB/s. This allows about 18
days of flight logs to fit on my OpenLog&amp;rsquo;s 16GB MicroSD card, which ought to be enough for anybody :).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re logging to an onboard dataflash chip instead of an OpenLog, be aware that the 2MB of storage space it offers
is pretty small. At the default 1/1 logging rate, and a 2400 looptime, this is only enough for about 3 minutes of
flight. This could be long enough for you to investigate some flying problem with your craft, but you may want to reduce
the logging rate in order to extend your recording time.&lt;/p&gt;

&lt;p&gt;To maximize your recording time, you could drop the rate way down to 1/32 (the smallest possible rate) which would
result in a logging rate of about 10-20Hz and about 650 bytes/second of data. At that logging rate, the 2MB flash chip
can store around 50 minutes of flight data, though the level of detail is severely reduced and you could not diagnose
flight problems like vibration or PID setting issues.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;The Blackbox starts recording data as soon as you arm your craft, and stops when you disarm.&lt;/p&gt;

&lt;p&gt;If your craft has a buzzer attached, you can use Cleanflight&amp;rsquo;s arming beep to synchronize your Blackbox log with your
flight video. Cleanflight&amp;rsquo;s arming beep is a &amp;ldquo;long, short&amp;rdquo; pattern. The beginning of the first long beep will be shown 
as a blue line in the flight data log, which you can sync against your recorded audio track.&lt;/p&gt;

&lt;p&gt;You should wait a few seconds after disarming your craft to allow the Blackbox to finish saving its data.&lt;/p&gt;

&lt;h3&gt;Usage - OpenLog&lt;/h3&gt;

&lt;p&gt;Each time the OpenLog is power-cycled, it begins a fresh new log file. If you arm and disarm several times without
cycling the power (recording several flights), those logs will be combined together into one file. The command line
tools will ask you to pick which one of these flights you want to display/decode.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t insert or remove the SD card while the OpenLog is powered up.&lt;/p&gt;

&lt;h3&gt;Usage - Dataflash chip&lt;/h3&gt;

&lt;p&gt;After your flights, you can use the &lt;a href=&quot;https://chrome.google.com/webstore/detail/cleanflight-configurator/enacoimjcgeinfnnnpajinjgmkahmfgb?hl=en&quot;&gt;Cleanflight Configurator&lt;/a&gt; to download the contents of the dataflash to your
computer. Go to the &amp;ldquo;dataflash&amp;rdquo; tab and click the &amp;ldquo;save flash to file&amp;hellip;&amp;rdquo; button. Saving the log can take 2 or 3
minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shipow.github.io/cleanflight-web/assets/images/blackbox-dataflash.png&quot; alt=&quot;Dataflash tab in Configurator&quot;&gt;&lt;/p&gt;

&lt;p&gt;After downloading the log, be sure to erase the chip to make it ready for reuse by clicking the &amp;ldquo;erase flash&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;If you try to start recording a new flight when the dataflash is already full, Blackbox logging will be disabled and
nothing will be recorded.&lt;/p&gt;

&lt;h2&gt;Converting logs to CSV or PNG&lt;/h2&gt;

&lt;p&gt;After your flights, you&amp;rsquo;ll have a series of flight log files with a .TXT extension. You&amp;rsquo;ll need to decode these with
the &lt;code&gt;blackbox_decode&lt;/code&gt; tool to create CSV (comma-separated values) files for analysis, or render them into a series of PNG
frames with &lt;code&gt;blackbox_render&lt;/code&gt; tool, which you could then convert into a video using another software package.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll find those tools along with instructions for using them in this repository:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/blackbox-tools&quot;&gt;https://github.com/cleanflight/blackbox-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view your .TXT flight log files interactively using your web browser with the Cleanflight Blackbox Explorer
tool:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cleanflight/blackbox-log-viewer&quot;&gt;https://github.com/cleanflight/blackbox-log-viewer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to scroll around a graphed version of your log and examine your log in detail.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Battery</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/battery"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/battery</id>
   <content type="html">&lt;h1&gt;Battery Monitoring&lt;/h1&gt;

&lt;p&gt;Cleanflight has a battery monitoring feature.  The voltage of the main battery can be measured by the system and used to trigger a low-battery warning &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/buzzer/&quot;&gt;buzzer&lt;/a&gt;, on-board status LED flashing and LED strip patterns.&lt;/p&gt;

&lt;p&gt;Low battery warnings can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help ensure you have time to safely land the aircraft&lt;/li&gt;
&lt;li&gt;Help maintain the life and safety of your LiPo/LiFe batteries, which should not be discharged below manufacturer recommendations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minimum and maximum cell voltages can be set, and these voltages are used to auto-detect the number of cells in the battery when it is first connected.&lt;/p&gt;

&lt;p&gt;Per-cell monitoring is not supported, as we only use one ADC to read the battery voltage.&lt;/p&gt;

&lt;h2&gt;Supported targets&lt;/h2&gt;

&lt;p&gt;All targets support battery voltage monitoring unless status.&lt;/p&gt;

&lt;h2&gt;Connections&lt;/h2&gt;

&lt;p&gt;When dealing with batteries &lt;strong&gt;ALWAYS CHECK POLARITY!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Measure expected voltages &lt;strong&gt;first&lt;/strong&gt; and then connect to the flight controller.  Powering the flight controller with
incorrect voltage or reversed polarity will likely fry your flight controller. Ensure your flight controller
has a voltage divider capable of measuring your particular battery voltage.&lt;/p&gt;

&lt;h3&gt;Naze32&lt;/h3&gt;

&lt;p&gt;The Naze32 has an on-board battery divider circuit; just connect your main battery to the VBAT connector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAUTION:&lt;/strong&gt;  When installing the connection from main battery to the VBAT connector, be sure to first disconnect the main battery from the frame/power distribution board.  Check the wiring very carefully before connecting battery again.  Incorrect connections can immediately and completely destroy the flight controller and connected peripherals (ESC, GPS, Receiver etc.).&lt;/p&gt;

&lt;h3&gt;CC3D&lt;/h3&gt;

&lt;p&gt;The CC3D has no battery divider.  To use voltage monitoring, you must create a divider that gives a 3.3v 
MAXIMUM output when the main battery is fully charged.  Connect the divider output to S5_IN/PA0/RC5.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;S5_IN/PA0/RC5 is Pin 7 on the 8 pin connector, second to last pin, on the opposite end from the 
GND/+5/PPM signal input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When battery monitoring is enabled on the CC3D, RC5 can no-longer be used for PWM input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Sparky&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&quot;http://shipow.github.io/cleanflight-web/docs/board-sparky/&quot;&gt;Sparky board chapter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Enable the &lt;code&gt;VBAT&lt;/code&gt; feature.&lt;/p&gt;

&lt;p&gt;Configure min/max cell voltages using the following CLI setting:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vbat_scale&lt;/code&gt; - Adjust this to match actual measured battery voltage to reported value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vbat_max_cell_voltage&lt;/code&gt; - Maximum voltage per cell, used for auto-detecting battery voltage in 0.1V units, i.e. 43 = 4.3V&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set vbat_warning_cell_voltage&lt;/code&gt; - Warning voltage per cell; this triggers battery-out alarms, in 0.1V units, i.e. 34 = 3.4V&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vbat_min_cell_voltage&lt;/code&gt; - Minimum voltage per cell; this triggers battery-out alarms, in 0.1V units, i.e. 33 = 3.3V&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set vbat_scale = 110
set vbat_max_cell_voltage = 43
set vbat_warning_cell_voltage = 34
set vbat_min_cell_voltage = 33
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Current Monitoring&lt;/h1&gt;

&lt;p&gt;Current monitoring (amperage) is supported by connecting a current meter to the appropriate current meter ADC input (see the documentation for your particular board).&lt;/p&gt;

&lt;p&gt;When enabled, the following values calculated and used by the telemetry and OLED display subsystems:
* Amps
* mAh used
* Capacity remaining&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Enable current monitoring using the CLI command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;feature CURRENT_METER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure the current meter type using the &lt;code&gt;current_meter_type&lt;/code&gt; settings here:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Sensor Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;ADC/hardware sensor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Virtual sensor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Configure capacity using the &lt;code&gt;battery_capacity&lt;/code&gt; setting, in mAh units.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using an OSD that expects the multiwii current meter output value, then set &lt;code&gt;multiwii_current_meter_output&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; (this multiplies amperage sent to MSP by 10).&lt;/p&gt;

&lt;h3&gt;ADC Sensor&lt;/h3&gt;

&lt;p&gt;The current meter may need to be configured so the value read at the ADC input matches actual current draw.  Just like you need a voltmeter to correctly calibrate your voltage reading you also need an ammeter to calibrate the current sensor.&lt;/p&gt;

&lt;p&gt;Use the following settings to adjust calibration:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;current_meter_scale&lt;/code&gt;
&lt;code&gt;current_meter_offset&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Virtual Sensor&lt;/h3&gt;

&lt;p&gt;The virtual sensor uses the throttle position to calculate an estimated current value. This is useful when a real sensor is not available. The following settings adjust the virtual sensor calibration:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_meter_scale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The throttle scaling factor [centiamps, i.e. 1/100th A]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_meter_offset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The current at zero throttle (while disarmed) [centiamps, i.e. 1/100th A]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;There are two simple methods to tune these parameters:  one uses a battery charger and another depends on actual current measurements.&lt;/p&gt;

&lt;h4&gt;Tuning Using Actual Current Measurements&lt;/h4&gt;

&lt;p&gt;If you know your craft&amp;rsquo;s current draw while disarmed (Imin) and at maximum throttle while armed (Imax), calculate the scaling factors as follows:
&lt;code&gt;
current_meter_scale = (Imax - Imin) * 100000 / (Tmax + (Tmax * Tmax / 50))
current_meter_offset = Imin * 100
&lt;/code&gt;
Note: Tmax is maximum throttle offset (i.e. for &lt;code&gt;max_throttle&lt;/code&gt; = 1850, Tmax = 1850 - 1000 = 850)&lt;/p&gt;

&lt;p&gt;For example, assuming a maximum current of 34.2A, a minimum current of 2.8A, and a Tmax &lt;code&gt;max_throttle&lt;/code&gt; = 1850:
&lt;code&gt;
current_meter_scale = (Imax - Imin) * 100000 / (Tmax + (Tmax * Tmax / 50))
                    = (34.2 - 2.8) * 100000 / (850 + (850 * 850 / 50))
                    = 205
current_meter_offset = Imin * 100 = 280
&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Tuning Using Battery Charger Measurement&lt;/h4&gt;

&lt;p&gt;If you cannot measure current draw directly, you can approximate it indirectly using your battery charger.&lt;br&gt;
However, note it may be difficult to adjust &lt;code&gt;current_meter_offset&lt;/code&gt; using this method unless you can 
measure the actual current draw with the craft disarmed.&lt;/p&gt;

&lt;p&gt;Note:
+ This method depends on the accuracy of your battery charger; results may vary.
+ If you add or replace equipment that changes the in-flight current draw (e.g. video transmitter, 
  camera, gimbal, motors, prop pitch/sizes, ESCs, etc.), you should recalibrate.&lt;/p&gt;

&lt;p&gt;The general method is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fully charge your flight battery&lt;/li&gt;
&lt;li&gt;Fly your craft, using &amp;gt;50% of your battery pack capacity (estimated)&lt;/li&gt;
&lt;li&gt;Note Cleanflight&amp;rsquo;s reported mAh draw&lt;/li&gt;
&lt;li&gt;Re-charge your flight battery, noting the mAh charging data needed to restore the pack to fully charged&lt;/li&gt;
&lt;li&gt;Adjust &lt;code&gt;current_meter_scale&lt;/code&gt; to according to the formula given below&lt;/li&gt;
&lt;li&gt;Repeat and test&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given (a) the reported mAh draw and the (b) mAh charging data, calculate a new &lt;code&gt;current_meter_scale&lt;/code&gt; value as follows:
&lt;code&gt;
current_meter_scale = (charging_data_mAh / reported_draw_mAh) * old_current_meter_scale
&lt;/code&gt;
For example, assuming:
+ A Cleanflight reported current draw of 1260 mAh
+ Charging data to restore full charge of 1158 mAh
+ A existing &lt;code&gt;current_meter_scale&lt;/code&gt; value of 400 (the default)&lt;/p&gt;

&lt;p&gt;Then the updated &lt;code&gt;current_meter_scale&lt;/code&gt; is:
&lt;code&gt;
current_meter_scale = (charging_data_mAh / reported_draw_mAh) * old_current_meter_scale
                    = (1158 / 1260) * 400
                    = 368
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Autotune</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/autotune"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/autotune</id>
   <content type="html">&lt;h1&gt;Autotune&lt;/h1&gt;

&lt;p&gt;Autotune helps to automatically tune your multirotor.&lt;/p&gt;

&lt;p&gt;WARNING: Autotune is an experimental feature.  Currently enough feedback has been gathered and we do not recommend that anyone uses it until this warning is removed.  Autotune may be replaced by G-Tune, Please see &lt;a href=&quot;https://github.com/cleanflight/cleanflight/pull/568&quot;&gt;https://github.com/cleanflight/cleanflight/pull/568&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2&gt;Configuration.&lt;/h2&gt;

&lt;p&gt;Autotune only works in HORIZON or ANGLE mode, before using auto-tune it&amp;rsquo;s best you setup so there is as little drift as possible.
Autotuning is best on a full battery in good flying conditions, i.e. no or minimal wind. Autotune does not support pid_controller 2  or higher (pid_controller 0 is the Cleanflight default, pid_controller 1 will work for autotune as well).&lt;/p&gt;

&lt;p&gt;Configure a two position switch on your transmitter to activate the AUTOTUNE mode. Autotune may be done in ether one of the both only, HORIZON or  ANGLE mode (will then apply on both modes). &lt;/p&gt;

&lt;h2&gt;Using autotuning&lt;/h2&gt;

&lt;p&gt;Turn off the autotune switch.  If the autotune switch is on while not armed the warning LED will flash and you cannot arm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Launch the multirotor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Phase 1: ROLL/YAW autotune. 
Turn on/hold the autotune switch on your transmitter for approx 5 seconds.  You can observe roll left/right while a beep code sounds on the beeper, when turning off the autotune switch, PID settings will have been updated for ROLL and YAW.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stay in air and re-align your copter for the following PITCH/YAW autotune.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Phase 2: PITCH/YAW autotune.
Turn on/hold the switch again for approx 5 seconds.  You can observe pitch forwards/backwards while a beep code sounds on the beeper, when turning off the autotune switch, PID settings will have been updated for PITCH and YAW.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep flying and see if it&amp;rsquo;s better.  If it&amp;rsquo;s worse then while still armed flip the switch again to restore previous PIDs that were present prior to arming.  You can do this while still flying or after landing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Land &amp;amp; disarm.  If desired you may verify results via an app while battery power still on. Cutting the power will lose the new unsaved PIDs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;rsquo;re happy with the PIDs then disarm (but leave the battery still on).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flip the autotune switch again (copter still under battery power) to save all settings. 
A beeper will sound indicating the settings are saved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then flip it back (so you can arm again).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Brad Quick for the initial Autotune algorithm in BradWii.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Atomic Barrier</title>
   <link href="http://shipow.github.io/cleanflight-web/docs/development/atomic-barrier"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://shipow.github.io/cleanflight-web/docs/development/atomic-barrier</id>
   <content type="html">&lt;h1&gt;Atomic Barrier Warning&lt;/h1&gt;

&lt;p&gt;If GCC is upgraded and a warning appears when compiling then the generated asm source must be verified.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;code&gt;
%% serial_softserial.c
warning &amp;quot;Please verify that ATOMIC_BARRIER works as intended&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To perform the verification, proceed as per discusson on issue #167 which reads:&lt;/p&gt;

&lt;p&gt;I hope it&amp;rsquo;s enough to check that optimized-away variable still has cleanup code at end of scope.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;static int markme=0;
markme++;
ATOMIC_BLOCK_NB(0xff) {
   ATOMIC_BARRIER(markme);
   markme++;
};
markme++;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pass &lt;code&gt;-save-temps=obj&lt;/code&gt; (or &lt;code&gt;-save-temps=cwd&lt;/code&gt;, but lots of files will end up in same directory as makefile) to gcc link step (LTO is in use), find resulting &lt;code&gt;*.ltrans*.ltrans.s&lt;/code&gt; (grep for &lt;code&gt;markme&lt;/code&gt;, on linux it ends up in &lt;code&gt;/tmp&lt;/code&gt;) and check that generated assembly sequence is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;                 MSR basepri_max, r3
# (possibly markme address load)
                # barier (markme) start

# (increment markme, load and store to memory)
        ldr     r2, [r3]
        adds    r0, r2, #1
        str     r0, [r3]

                # barier(markme)  end
                MSR basepri, r3

# (markme value should be cached in register on next increment)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The # barrier(markme) must surround access code and must be inside MSR basepri instructions ..&lt;/p&gt;

&lt;p&gt;Similar approach is used for ATOMIC_BLOCK in avr libraries, so gcc should not break this behavior.&lt;/p&gt;

&lt;p&gt;IMO attribute(cleanup) and asm volatile is defined in a way that should guarantee this.&lt;/p&gt;

&lt;p&gt;attribute(cleanup) is probably safer way to implement atomic sections - another possibility is to explicitly place barriers in code, but that can (and will eventually) lead to missed barrier/basepri restore on same path creating very hard to find bug.&lt;/p&gt;

&lt;p&gt;The MEMORY_BARRIER() code can be omitted and use ATOMIC_BLOCK with full memory barriers, but IMO it is better to explicitly state what memory is protected by barrier and gcc can use this knowledge to greatly improve generated code in future.&lt;/p&gt;
</content>
 </entry>
 

</feed>
